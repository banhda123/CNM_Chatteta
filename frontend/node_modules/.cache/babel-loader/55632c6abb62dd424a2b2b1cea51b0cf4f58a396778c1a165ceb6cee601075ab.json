{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth APIs\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\n\n// User APIs\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: profileData => api.put('/users/profile', profileData),\n  uploadAvatar: formData => api.post('/users/avatar', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  searchUsers: query => api.get(`/users/search?q=${query}`)\n};\n\n// Friend APIs\nexport const friendAPI = {\n  getFriends: () => api.get('/friends'),\n  getFriendRequests: () => api.get('/friends/requests'),\n  sendFriendRequest: userId => {\n    // Ensure userId is a valid integer\n    const receiverId = parseInt(userId, 10);\n    if (isNaN(receiverId)) {\n      return Promise.reject(new Error('Invalid user ID. Must be a number.'));\n    }\n    return api.post('/friends/request', {\n      receiverId\n    });\n  },\n  acceptFriendRequest: requestId => api.put(`/friends/request/${requestId}/accept`),\n  rejectFriendRequest: requestId => api.put(`/friends/request/${requestId}/reject`)\n};\n\n// Chat APIs\nexport const chatAPI = {\n  getMessages: userId => api.get(`/chat/messages/${userId}`),\n  sendMessage: messageData => api.post('/chat/messages', messageData),\n  uploadFile: formData => api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authAPI","login","credentials","post","register","userData","userAPI","getProfile","get","updateProfile","profileData","put","uploadAvatar","formData","searchUsers","query","friendAPI","getFriends","getFriendRequests","sendFriendRequest","userId","receiverId","parseInt","isNaN","Promise","reject","Error","acceptFriendRequest","requestId","rejectFriendRequest","chatAPI","getMessages","sendMessage","messageData","uploadFile"],"sources":["D:/CNM/CNM_Zalo_Nhom10/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests if available\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth APIs\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n};\n\n// User APIs\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (profileData) => api.put('/users/profile', profileData),\n  uploadAvatar: (formData) => api.post('/users/avatar', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n  searchUsers: (query) => api.get(`/users/search?q=${query}`),\n};\n\n// Friend APIs\nexport const friendAPI = {\n  getFriends: () => api.get('/friends'),\n  getFriendRequests: () => api.get('/friends/requests'),\n  sendFriendRequest: (userId) => {\n    // Ensure userId is a valid integer\n    const receiverId = parseInt(userId, 10);\n    if (isNaN(receiverId)) {\n      return Promise.reject(new Error('Invalid user ID. Must be a number.'));\n    }\n    return api.post('/friends/request', { receiverId });\n  },\n  acceptFriendRequest: (requestId) => api.put(`/friends/request/${requestId}/accept`),\n  rejectFriendRequest: (requestId) => api.put(`/friends/request/${requestId}/reject`),\n};\n\n// Chat APIs\nexport const chatAPI = {\n  getMessages: (userId) => api.get(`/chat/messages/${userId}`),\n  sendMessage: (messageData) => api.post('/chat/messages', messageData),\n  uploadFile: (formData) => api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKd,GAAG,CAACe,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAKjB,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAEE,QAAQ;AAC7D,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,UAAU,EAAEA,CAAA,KAAMnB,GAAG,CAACoB,GAAG,CAAC,gBAAgB,CAAC;EAC3CC,aAAa,EAAGC,WAAW,IAAKtB,GAAG,CAACuB,GAAG,CAAC,gBAAgB,EAAED,WAAW,CAAC;EACtEE,YAAY,EAAGC,QAAQ,IAAKzB,GAAG,CAACe,IAAI,CAAC,eAAe,EAAEU,QAAQ,EAAE;IAC9DtB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACFuB,WAAW,EAAGC,KAAK,IAAK3B,GAAG,CAACoB,GAAG,CAAC,mBAAmBO,KAAK,EAAE;AAC5D,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,UAAU,EAAEA,CAAA,KAAM7B,GAAG,CAACoB,GAAG,CAAC,UAAU,CAAC;EACrCU,iBAAiB,EAAEA,CAAA,KAAM9B,GAAG,CAACoB,GAAG,CAAC,mBAAmB,CAAC;EACrDW,iBAAiB,EAAGC,MAAM,IAAK;IAC7B;IACA,MAAMC,UAAU,GAAGC,QAAQ,CAACF,MAAM,EAAE,EAAE,CAAC;IACvC,IAAIG,KAAK,CAACF,UAAU,CAAC,EAAE;MACrB,OAAOG,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxE;IACA,OAAOtC,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAE;MAAEkB;IAAW,CAAC,CAAC;EACrD,CAAC;EACDM,mBAAmB,EAAGC,SAAS,IAAKxC,GAAG,CAACuB,GAAG,CAAC,oBAAoBiB,SAAS,SAAS,CAAC;EACnFC,mBAAmB,EAAGD,SAAS,IAAKxC,GAAG,CAACuB,GAAG,CAAC,oBAAoBiB,SAAS,SAAS;AACpF,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG;EACrBC,WAAW,EAAGX,MAAM,IAAKhC,GAAG,CAACoB,GAAG,CAAC,kBAAkBY,MAAM,EAAE,CAAC;EAC5DY,WAAW,EAAGC,WAAW,IAAK7C,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAE8B,WAAW,CAAC;EACrEC,UAAU,EAAGrB,QAAQ,IAAKzB,GAAG,CAACe,IAAI,CAAC,SAAS,EAAEU,QAAQ,EAAE;IACtDtB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;AACH,CAAC;AAED,eAAeH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}