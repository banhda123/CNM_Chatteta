{"ast":null,"code":"import axios from 'axios';\nexport const API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds\n});\n\n// Request interceptor for adding auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for handling errors\napi.interceptors.response.use(response => {\n  // Return only the data part of the response\n  return response.data;\n}, error => {\n  console.error('Response error:', error);\n  if (error.response) {\n    // The request was made and the server responded with an error status\n    console.error('Error data:', error.response.data);\n    console.error('Error status:', error.response.status);\n\n    // Xử lý token hết hạn\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('No response received:', error.request);\n  } else {\n    // Something happened in setting up the request\n    console.error('Request setup error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Auth APIs\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\n\n// User APIs\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: profileData => api.put('/users/profile', profileData),\n  uploadAvatar: formData => api.post('/users/avatar', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  searchUsers: query => api.get(`/users/search?q=${query}`)\n};\n\n// Friend APIs\nexport const friendAPI = {\n  getFriends: () => api.get('/friends'),\n  sendFriendRequest: userId => api.post('/friends/request', {\n    userId\n  }),\n  acceptFriendRequest: requestId => api.post(`/friends/accept/${requestId}`),\n  rejectFriendRequest: requestId => api.post(`/friends/reject/${requestId}`),\n  searchUsers: keyword => api.get(`/users/search?q=${encodeURIComponent(keyword)}`),\n  removeFriend: friendId => api.delete(`/friends/${friendId}`)\n};\n\n// Chat APIs\nexport const chatAPI = {\n  getMessages: userId => api.get(`/chat/messages/${userId}`),\n  sendMessage: messageData => api.post('/chat/messages', messageData),\n  uploadFile: formData => api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","console","Promise","reject","response","data","status","removeItem","message","authAPI","login","credentials","post","register","userData","userAPI","getProfile","get","updateProfile","profileData","put","uploadAvatar","formData","searchUsers","query","friendAPI","getFriends","sendFriendRequest","userId","acceptFriendRequest","requestId","rejectFriendRequest","keyword","encodeURIComponent","removeFriend","friendId","delete","chatAPI","getMessages","sendMessage","messageData","uploadFile"],"sources":["D:/CNM/CNM_Zalo_Nhom10/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nexport const API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 seconds\n});\n\n// Request interceptor for adding auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for handling errors\napi.interceptors.response.use(\n  (response) => {\n    // Return only the data part of the response\n    return response.data;\n  },\n  (error) => {\n    console.error('Response error:', error);\n    \n    if (error.response) {\n      // The request was made and the server responded with an error status\n      console.error('Error data:', error.response.data);\n      console.error('Error status:', error.response.status);\n      \n      // Xử lý token hết hạn\n      if (error.response.status === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.error('No response received:', error.request);\n    } else {\n      // Something happened in setting up the request\n      console.error('Request setup error:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Auth APIs\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n};\n\n// User APIs\nexport const userAPI = {\n  getProfile: () => api.get('/users/profile'),\n  updateProfile: (profileData) => api.put('/users/profile', profileData),\n  uploadAvatar: (formData) => api.post('/users/avatar', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n  searchUsers: (query) => api.get(`/users/search?q=${query}`),\n};\n\n// Friend APIs\nexport const friendAPI = {\n  getFriends: () => api.get('/friends'),\n  sendFriendRequest: (userId) => api.post('/friends/request', { userId }),\n  acceptFriendRequest: (requestId) => api.post(`/friends/accept/${requestId}`),\n  rejectFriendRequest: (requestId) => api.post(`/friends/reject/${requestId}`),\n  searchUsers: (keyword) => api.get(`/users/search?q=${encodeURIComponent(keyword)}`),\n  removeFriend: (friendId) => api.delete(`/friends/${friendId}`)\n};\n\n// Chat APIs\nexport const chatAPI = {\n  getMessages: (userId) => api.get(`/chat/messages/${userId}`),\n  sendMessage: (messageData) => api.post('/chat/messages', messageData),\n  uploadFile: (formData) => api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  }),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}