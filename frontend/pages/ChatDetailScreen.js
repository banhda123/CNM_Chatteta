import React, { useState, useRef, useEffect } from "react";
import { Alert } from "react-native";
import { useRoute, useNavigation } from "@react-navigation/native";
import GeminiIndicator from "../components/GeminiIndicator";
import {
  Box,
  AppBar,
  Toolbar,
  Typography,
  IconButton,
  TextField,
  Avatar,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Paper,
  Container,
  Badge,
  InputAdornment,
  Menu,
  MenuItem,
  CircularProgress,
  Grid,
  Popover,
  ListItemIcon,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  List,
  Tooltip,
  AvatarGroup,
  Switch,
  FormControlLabel,
  Drawer,
  Tab,
  Tabs,
  Divider,
  Slide,
  useTheme as useMuiTheme,
  ButtonGroup,
  Snackbar
} from "@mui/material";
import DoneAllIcon from "@mui/icons-material/DoneAll";
import {
  Send as SendIcon,
  Info as InfoIcon,
  Phone as PhoneIcon,
  Videocam as VideocamIcon,
  Search as SearchIcon,
  Clear as ClearIcon,
  Menu as MenuIcon,
  Settings as SettingsIcon,
  ArrowBack as ArrowBackIcon,
  MoreVert,
  InsertEmoticon as InsertEmoticonIcon,
  AttachFile as AttachFileIcon,
  Image as ImageIcon,
  Chat as ChatIcon,
  Person as PersonIcon,
  Contacts as ContactsIcon,
  SmartToy as SmartToyIcon,
  GroupAdd as GroupAddIcon,
  Check as CheckIcon,
  People as PeopleIcon,
  Group as GroupIcon,
  Edit as EditIcon,
  Forward as ForwardIcon,
  Undo as UndoIcon,
  PushPin as PushPinIcon,
  Delete as DeleteIcon,
  ExitToApp as ExitToAppIcon,
  Close as CloseIcon,
  PersonAdd as PersonAddIcon
} from "@mui/icons-material";
import Button from "@mui/material/Button";
import AddIcon from "@mui/icons-material/Add";
import ProfileScreen from "./ProfileScreen";
import ChatService from "../services/ChatService";
import UserService from "../services/UserService";
import AuthService from "../services/AuthService";
import SocketService from "../services/SocketService";
import CancelIcon from '@mui/icons-material/Cancel';
import AudiotrackIcon from '@mui/icons-material/Audiotrack';
import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';
import DescriptionIcon from '@mui/icons-material/Description';
import TableChartIcon from '@mui/icons-material/TableChart';
import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';
import RenderFileMessage from "../components/RenderFileMessage";
import MessageReactions from "../components/MessageReactions";
import CreateGroupDialog from "../components/CreateGroupDialog";
import GroupMembersDialog from "../components/GroupMembersDialog";
import EditGroupDialog from "../components/EditGroupDialog";
import GiphyGallery from "../components/GiphyGallery";
import GifIcon from '@mui/icons-material/Gif';
import PinnedMessageBanner from "../components/PinnedMessageBanner";
import PinnedMessagesDialog from "../components/PinnedMessagesDialog";
import PinMessageButton from "../components/PinMessageButton";
import { useTheme } from '../contexts/ThemeContext';
import ProfileDialog from '../components/ProfileDialog';
import FileUploadGroup from '../components/FileUploadGroup';
import LoadingAnimation from '../components/LoadingAnimation';
import VpnKeyIcon from '@mui/icons-material/VpnKey';
import KeyIcon from '@mui/icons-material/Key';
import GroupControlDrawer from '../components/GroupControlDrawer';


// Th√™m m·ªôt l·ªõp ghi log ƒë∆°n gi·∫£n v√†o ƒë·∫ßu file
const Logger = {
  // C√°c c·∫•p ƒë·ªô log
  levels: {
    DEBUG: 0,  // Chi ti·∫øt nh·∫•t, h·ªØu √≠ch khi ph√°t tri·ªÉn
    INFO: 1,   // Th√¥ng tin chung
    WARN: 2,   // C·∫£nh b√°o
    ERROR: 3,  // L·ªói
  },
  
  // C·∫•u h√¨nh c·∫•p ƒë·ªô hi·ªán t·∫°i
  currentLevel: 1, // M·∫∑c ƒë·ªãnh ch·ªâ hi·ªán INFO tr·ªü l√™n
  
  // B·∫≠t/t·∫Øt group logs cho d·ªÖ ƒë·ªçc
  useGroups: true,
  
  // Thi·∫øt l·∫≠p c·∫•p ƒë·ªô log
  setLevel(level) {
    this.currentLevel = level;
  },
  
  // C√°c ph∆∞∆°ng th·ª©c log theo c·∫•p ƒë·ªô
  debug(message, data) {
    if (this.currentLevel <= this.levels.DEBUG) {
      if (data && this.useGroups) {
        console.groupCollapsed(`üîé ${message}`);
        console.log(data);
        console.groupEnd();
      } else {
        console.log(`üîé ${message}`, data || '');
      }
    }
  },
  
  info(message, data) {
    if (this.currentLevel <= this.levels.INFO) {
      if (data && this.useGroups) {
        console.groupCollapsed(`‚ÑπÔ∏è ${message}`);
        console.log(data);
        console.groupEnd();
      } else {
        console.log(`‚ÑπÔ∏è ${message}`, data || '');
      }
    }
  },
  
  warn(message, data) {
    if (this.currentLevel <= this.levels.WARN) {
      if (data && this.useGroups) {
        console.groupCollapsed(`‚ö†Ô∏è ${message}`);
        console.log(data);
        console.groupEnd();
      } else {
        console.warn(`‚ö†Ô∏è ${message}`, data || '');
      }
    }
  },
  
  error(message, error) {
    if (this.currentLevel <= this.levels.ERROR) {
      if (error && this.useGroups) {
        console.groupCollapsed(`‚ùå ${message}`);
        console.error(error);
        console.groupEnd();
      } else {
        console.error(`‚ùå ${message}`, error || '');
      }
    }
  }
};

// Trong m√¥i tr∆∞·ªùng production, ch·ªâ hi·ªÉn th·ªã l·ªói
if (process.env.NODE_ENV === 'production') {
  Logger.setLevel(Logger.levels.ERROR);
}

const ChatUI = () => {
  const navigation = useNavigation();
  const route = useRoute();
  const { userId: routeUserId } = route.params || {};
  
  // C√°c state qu·∫£n l√Ω UI
  const [showLeftSidebar, setShowLeftSidebar] = useState(true);
  const [showProfile, setShowProfile] = useState(false);
  const [showSingleChat, setShowSingleChat] = useState(false);
  const [userId, setUserId] = useState(routeUserId);
  const [newMessage, setNewMessage] = useState("");
  const [messageType, setMessageType] = useState('text'); // Th√™m state cho message type
  const [anchorEl, setAnchorEl] = useState(null);
  const [sidebarMenuAnchorEl, setSidebarMenuAnchorEl] = useState(null); // New state for sidebar menu
  const [notificationAnchorEl, setNotificationAnchorEl] = useState(null);
  const [friendRequests, setFriendRequests] = useState([]);
  const [loadingRequests, setLoadingRequests] = useState(false);
  const [activeConversation, setActiveConversation] = useState(null);
  const [conversations, setConversations] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredConversations, setFilteredConversations] = useState([]);
  const [messages, setMessages] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  const [typingUsers, setTypingUsers] = useState({});
  const [isProcessingAI, setIsProcessingAI] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [loading, setLoading] = useState({
    conversations: true,
    messages: true,
  });
  const [showAIMention, setShowAIMention] = useState(false);
  const [mentionPosition, setMentionPosition] = useState({ top: 0, left: 0 });
  const inputRef = useRef(null);
  const messagesEndRef = useRef(null);
  const [user, setUser] = useState({
    name: "",
    avatar: "",
    status: "",
    birthday: "",
    phone: "",
    email: "",
    about: "",
  });
  const [emojiAnchorEl, setEmojiAnchorEl] = useState(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showGifGallery, setShowGifGallery] = useState(false);
  const [activeTab, setActiveTab] = useState('emoji'); // Track active tab: 'emoji' or 'gif'
  const [selectedFile, setSelectedFile] = useState(null);
  const [selectedFilePreview, setSelectedFilePreview] = useState(null);
  const fileInputRef = useRef(null);
  
  // State for pinned messages functionality
  const [pinnedMessagesDialogOpen, setPinnedMessagesDialogOpen] = useState(false);
  const [selectedPinnedMessage, setSelectedPinnedMessage] = useState(null);

  const { isDarkMode, toggleTheme } = useTheme();

  const [profileDialogOpen, setProfileDialogOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);

  // Th√™m state m·ªõi cho lazy loading
  const [hasMoreMessages, setHasMoreMessages] = useState(false);
  const [nextMessageCursor, setNextMessageCursor] = useState(null);
  const [loadingMoreMessages, setLoadingMoreMessages] = useState(false);
  const messagesContainerRef = useRef(null);
  const topMessageRef = useRef(null);
  const scrollPositionRef = useRef(null);  // Theo d√µi v·ªã tr√≠ cu·ªôn
  const socketConnectionInitialized = useRef(false); // Theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi socket
  const reportedUsers = useRef(new Set()); // Theo d√µi ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n th√¥ng b√°o online

  // Function to check if the current conversation is with Gemini AI
  const isGeminiConversation = () => {
    if (!activeConversation || activeConversation.type !== 'private') return false;
    
    // Get the other participant in the conversation
    const otherUser = getOtherParticipant(activeConversation)?.idUser;
    
    // Check if the other user is Gemini AI (you might identify it by a specific ID or name)
    return otherUser && otherUser.name === 'Gemini AI';
  };

  // Th√™m state cho danh s√°ch ng∆∞·ªùi d√πng online
  const [onlineUsers, setOnlineUsers] = useState([]);
  // Th√™m state ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã danh s√°ch cu·ªôc tr√≤ chuy·ªán tr√™n mobile
  const [showConversationList, setShowConversationList] = useState(true);
  // Th√™m useRef cho debounce timeout
  const typingTimeoutRef = useRef(null);
  const typingLastSentRef = useRef(0);
  const typingMinInterval = 2000; // ƒê·ªô tr·ªÖ t·ªëi thi·ªÉu gi·ªØa c√°c s·ª± ki·ªán typing (2 gi√¢y)
  const [messageContextMenu, setMessageContextMenu] = useState(null);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const [attachMenuAnchorEl, setAttachMenuAnchorEl] = useState(null);
  const [attachMenuOpen, setAttachMenuOpen] = useState(false);
  const [forwardDialogOpen, setForwardDialogOpen] = useState(false);
  const [targetConversation, setTargetConversation] = useState(null);
  
  // Group chat state variables
  const [createGroupDialogOpen, setCreateGroupDialogOpen] = useState(false);
  const [groupMembersDialogOpen, setGroupMembersDialogOpen] = useState(false);
  const [editGroupDialogOpen, setEditGroupDialogOpen] = useState(false);
  
  // List of emojis
  const emojis = [
    "üòä", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", 
    "üòâ", "üòã", "üòé", "üòç", "üòò", "ü•∞", "üòó", "üòô",
    "üòö", "üôÇ", "ü§ó", "ü§©", "ü§î", "ü§®", "üòê", "üòë",
    "üò∂", "üôÑ", "üòè", "üò£", "üò•", "üòÆ", "ü§ê", "üòØ"
  ];

  const formatChatTime = (mongodbDate) => {
    if (!mongodbDate) return "";

    const date = new Date(mongodbDate);
    const now = new Date();

    // Check if same day
    if (date.toDateString() === now.toDateString()) {
      return date.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      });
    }

    // Check if yesterday
    const yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
      return "Yesterday";
    }

    // Check if same year
    if (date.getFullYear() === now.getFullYear()) {
      return date.toLocaleDateString([], { month: "short", day: "numeric" });
    }

    // Older than current year
    return date.toLocaleDateString([], {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Helper function to safely get other participant
  const getOtherParticipant = (conversation) => {
    if (!conversation?.members) {
      console.log('No members in conversation:', conversation?._id);
      return { idUser: {} };
    }
    
    // Ensure members is always an array
    const members = Array.isArray(conversation.members) ? conversation.members : [];
    
    if (members.length === 0) {
      console.log('Empty members array in conversation:', conversation?._id);
      return { idUser: {} };
    }
    
    // Ensure we compare IDs as strings to avoid object comparison issues
    const currentUserId = userId ? userId.toString() : '';
    
    // Find the other user in the conversation
    const otherMember = members.find(member => {
      // Get member ID as string for comparison
      const memberId = member?.idUser?._id ? member.idUser._id.toString() : 
                      (member?.idUser ? member.idUser.toString() : '');
      
      // Compare with current user ID
      return memberId && memberId !== currentUserId;
    });
    
    // Check if otherMember exists and has idUser data
    if (otherMember && otherMember.idUser) {
      // For populated idUser objects
      if (typeof otherMember.idUser === 'object' && otherMember.idUser._id) {
        // If we have name property, the object is properly populated
        if (otherMember.idUser.name) {
          return otherMember;
        } else {
          // We have an object with ID but no name, try to get full user data
          console.log('Member has incomplete user data, need to fetch:', otherMember.idUser._id);
        }
      }
      
      // For cases where idUser is just an ID string, try to find the full user object
      // in other places (like conversation.lastMessageSender)
      if (typeof otherMember.idUser === 'string' && conversation.lastMessageSender) {
        const lastSenderId = conversation.lastMessageSender._id?.toString() || '';
        
        if (lastSenderId === otherMember.idUser) {
          return {
            ...otherMember,
            idUser: conversation.lastMessageSender
          };
        }
      }
    }
    
    // If we couldn't find/reconstruct a proper user object, return a fallback
    return otherMember || { idUser: {} };
  };

  // H√†m l·∫•y t√™n ng∆∞·ªùi g·ª≠i trong tin nh·∫Øn nh√≥m
  const getSenderName = (message, conversation) => {
    // N·∫øu l√† tin nh·∫Øn c·ªßa ch√≠nh m√¨nh, tr·∫£ v·ªÅ "B·∫°n"
    if (isSentByCurrentUser(message)) {
      return "B·∫°n";
    }
    
    // N·∫øu l√† chat ƒë∆°n (kh√¥ng ph·∫£i nh√≥m), l·∫•y t√™n t·ª´ ng∆∞·ªùi tham gia kh√°c
    if (conversation?.type === "private") {
      const otherParticipant = getOtherParticipant(conversation);
      return otherParticipant?.idUser?.name || "Ng∆∞·ªùi d√πng";
    }
    
    // N·∫øu c√≥ th√¥ng tin t·ª´ originalSender (ƒë√£ ƒë∆∞·ª£c l∆∞u khi nh·∫≠n tin nh·∫Øn)
    if (message.originalSender?.name) {
      return message.originalSender.name;
    }
    
    // Ensure we always use string IDs for comparison
    const messageSenderId = message.sender?.toString() || '';
    
    // T√¨m ng∆∞·ªùi g·ª≠i trong danh s√°ch th√†nh vi√™n nh√≥m
    if (conversation?.members && Array.isArray(conversation.members) && messageSenderId) {
      const senderMember = conversation.members.find(member => 
        member.idUser && (
          (member.idUser._id && member.idUser._id.toString() === messageSenderId) ||
          (typeof member.idUser === 'string' && member.idUser.toString() === messageSenderId)
        )
      );
      
      if (senderMember?.idUser?.name) {
        return senderMember.idUser.name;
      } else if (senderMember?.name) {
        return senderMember.name;
      }
      
      // T√¨m ki·∫øm trong m·∫£ng admin n·∫øu ƒë√¢y l√† nh√≥m
      if (conversation.admin && conversation.admin._id && 
          conversation.admin._id.toString() === messageSenderId) {
        return conversation.admin.name || "Qu·∫£n tr·ªã vi√™n";
      }
      
      // T√¨m ki·∫øm trong admin2 n·∫øu c√≥
      if (conversation.admin2 && conversation.admin2._id && 
          conversation.admin2._id.toString() === messageSenderId) {
        return conversation.admin2.name || "Ph√≥ nh√≥m";
      }
    }
    
    // Th·ª≠ t√¨m trong conversation.lastMessageSender
    if (conversation?.lastMessageSender && 
        conversation.lastMessageSender._id && 
        conversation.lastMessageSender._id.toString() === messageSenderId) {
      return conversation.lastMessageSender.name;
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh v·ªõi sender ID
    return "Ng∆∞·ªùi d√πng";
  };

  //  Log ƒë·ªÉ debug vi·ªác t√¨m ki·∫øm th√¥ng tin ng∆∞·ªùi d√πng
  const logSenderInfo = (message, source) => {
    if (!message || !message.sender) return;
    
    const senderId = typeof message.sender === 'object' ? message.sender._id : message.sender.toString();
    console.log(`üîç [${source}] X·ª≠ l√Ω message t·ª´ sender: ${senderId}`);
    
    if (message.originalSender?.name) {
      console.log(`‚úÖ [${source}] ƒê√£ c√≥ th√¥ng tin sender: ${message.originalSender.name}`);
    } else {
      console.log(`‚ö†Ô∏è [${source}] Kh√¥ng c√≥ th√¥ng tin originalSender cho ID: ${senderId}`);
    }
  };

  // N·∫øu kh√¥ng c√≥ userId t·ª´ route params, th·ª≠ l·∫•y t·ª´ localStorage
  useEffect(() => {
    if (!userId) {
      const userData = AuthService.getUserData();
      if (userData && userData._id) {
        setUserId(userData._id);
      }
    }
  }, [userId]);

  // Fetch user data when component mounts or userId changes
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        if (!userId) {
          return; // Kh√¥ng fetch n·∫øu ch∆∞a c√≥ userId
        }

        const userData = await UserService.getUserById(userId);
        setUser({
          name: userData?.name || "No name provided",
          avatar: userData?.avatar || "https://via.placeholder.com/150",
          status: userData?.status || "Hey there! I'm using this app",
          birthday: userData?.birthday || "Not specified",
          phone: userData?.phone || "Not provided",
          email: userData?.email || "Not provided",
          about: userData?.about || "No bio yet",
        });
      } catch (error) {
        Alert.alert("Error", "Failed to load profile data");
        console.error(error);
      }
    };

    fetchUserData();
  }, [userId]);

  // Fetch conversations when component mounts or user changes
  useEffect(() => {
    if (userId) {
      fetchConversations();
    }
  }, [userId]);

  useEffect(() => {
    const fetchFriendRequests = async () => {
      if (!userId) {
        console.warn("Cannot fetch friend requests: Missing userId");
        return;
      }
      
      try {
        setLoadingRequests(true);
        console.log(`Fetching friend requests for user: ${userId}`);
        
        // The UserService now handles errors internally and returns empty array instead of throwing
        const requests = await UserService.getAllFriendRequests(userId);
        
        // Filter out any requests that have been rejected in this session
        const filteredRequests = requests.filter(request => {
          return !localStorage.getItem(`rejected_request_${request._id}`);
        });
        
        setFriendRequests(filteredRequests);
        
        console.log(`Loaded ${filteredRequests.length} friend requests successfully`);
      } catch (error) {
        console.error("Error fetching friend requests:", error);
        // Don't show alerts for this as it's not critical - just set empty array
        setFriendRequests([]);
      } finally {
        setLoadingRequests(false);
      }
    };

    fetchFriendRequests();
  }, [userId]); // Add all dependencies here

  const handleNotificationMenuOpen = async (event) => {
    if (!userId) {
      console.warn("Cannot load notifications: Missing userId");
      return;
    }
    
    setNotificationAnchorEl(event.currentTarget);
    setLoadingRequests(true);
    
    try {
      console.log(`Loading friend requests for user: ${userId}`);
      const requests = await UserService.getAllFriendRequests(userId);
      
      // Filter out any requests that have been rejected in this session
      const filteredRequests = requests.filter(request => {
        return !localStorage.getItem(`rejected_request_${request._id}`);
      });
      
      setFriendRequests(filteredRequests);
      console.log(`Loaded ${filteredRequests.length} friend requests successfully`);
    } catch (error) {
      console.error("Error loading friend requests:", error);
      // Set to empty array to avoid UI issues
      setFriendRequests([]);
    } finally {
      setLoadingRequests(false);
    }
  };

  const handleNotificationMenuClose = () => {
    setNotificationAnchorEl(null);
  };

  const fetchConversations = async () => {
    try {
      setLoading((prev) => ({ ...prev, conversations: true }));
      const token = await AuthService.getAccessToken();
      if (!token) {
        throw new Error("No authentication token found");
      }

      Logger.info('Fetching user conversations');
      const convs = await ChatService.getUserConversations(userId, token);

      if (!Array.isArray(convs)) {
        throw new Error("Invalid conversations data format");
      }
      
      // Log conversation structure for debugging
      if (convs.length > 0) {
        console.log(`Fetched ${convs.length} conversations`);
        const sampleConv = convs[0];
        console.log('Sample conversation structure:', {
          type: sampleConv.type,
          hasMembers: !!sampleConv.members,
          memberCount: sampleConv.members?.length || 0,
          hasMemberUserData: sampleConv.members?.some(m => m.idUser && typeof m.idUser === 'object' && m.idUser.name)
        });
      }

      setConversations(convs);

      if (convs.length > 0) {
        // L∆∞u th√¥ng tin admin v√†o localStorage cho m·ªói cu·ªôc tr√≤ chuy·ªán
        convs.forEach(conv => {
          if (conv.type === 'group') {
            if (conv.admin) {
              const adminId = conv.admin._id || conv.admin;
              localStorage.setItem(`adminId_${conv._id}`, adminId);
              localStorage.setItem('adminId', adminId);
            }
            
            if (conv.admin2) {
              const admin2Id = conv.admin2._id || conv.admin2;
              localStorage.setItem(`admin2Id_${conv._id}`, admin2Id);
              localStorage.setItem('admin2Id', admin2Id);
            }
          }
        });
        
        // Kh√¥ng t·ª± ƒë·ªông thi·∫øt l·∫≠p cu·ªôc tr√≤ chuy·ªán ho·∫°t ƒë·ªông
        // setActiveConversation(firstConv);
        
        // Kh√¥ng t·∫£i tin nh·∫Øn ngay l·∫≠p t·ª©c ƒë·ªÉ c·∫£i thi·ªán t·ªëc ƒë·ªô t·∫£i ban ƒë·∫ßu
        // await loadMessages(firstConv._id);
      }
      
      // ƒê√°nh d·∫•u r·∫±ng ƒë√£ ho√†n th√†nh t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán
      setLoading((prev) => ({ ...prev, conversations: false }));
    } catch (error) {
      Alert.alert("Error", "Failed to load conversations");
      Logger.error("Error fetching conversations", error);
      setLoading((prev) => ({ ...prev, conversations: false }));
    }
  };

  // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c loadMessages
  const loadMessages = async (conversationId) => {
    try {
      setLoading((prev) => ({ ...prev, messages: true }));

      Logger.info("Loading messages for conversation", { conversationId });

      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error("No authentication token found");
      }

      // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c√≥ h·ªó tr·ª£ lazy loading v·ªõi limit ƒë√£ gi·∫£m xu·ªëng 15
      const result = await ChatService.getConversationMessages(conversationId);
      
      
      // Ki·ªÉm tra d·ªØ li·ªáu response
      if (!result || (!result.messages && !Array.isArray(result))) {
        throw new Error("Invalid messages data format");
      }
      
      // L·∫•y danh s√°ch tin nh·∫Øn t·ª´ response
      const msgs = result.messages || result;
      
      if (!Array.isArray(msgs)) {
        throw new Error("Messages data is not an array");
      }

      // Chu·∫©n h√≥a ID ng∆∞·ªùi d√πng v√† tin nh·∫Øn
      const normalizedMsgs = msgs.map(msg => {
        // ƒê·∫£m b·∫£o ID ng∆∞·ªùi g·ª≠i lu√¥n ·ªü d·∫°ng string ƒë·ªÉ so s√°nh nh·∫•t qu√°n
        if (msg.sender && typeof msg.sender === 'object' && msg.sender._id) {
          // L∆∞u th√¥ng tin ng∆∞·ªùi g·ª≠i g·ªëc ƒë·ªÉ hi·ªÉn th·ªã trong UI
          msg.originalSender = { 
            _id: msg.sender._id,
            name: msg.sender.name || "Ng∆∞·ªùi d√πng",
            avatar: msg.sender.avatar
          };
          // Ch·ªâ d√πng ID cho c√°c ph√©p so s√°nh
          msg.sender = msg.sender._id;
        } else if (msg.sender && typeof msg.sender === 'string') {
          const senderId = msg.sender.toString();
          
          // T√¨m trong danh s√°ch th√†nh vi√™n nh√≥m
          if (activeConversation?.members && Array.isArray(activeConversation.members)) {
            const senderMember = activeConversation.members.find(member => 
              member.idUser && (
                (member.idUser._id && member.idUser._id.toString() === senderId) ||
                (typeof member.idUser === 'string' && member.idUser.toString() === senderId)
              )
            );
            
            if (senderMember?.idUser && typeof senderMember.idUser === 'object') {
              msg.originalSender = {
                _id: senderMember.idUser._id,
                name: senderMember.idUser.name || "Ng∆∞·ªùi d√πng",
                avatar: senderMember.idUser.avatar
              };
            }
            // Ki·ªÉm tra admin
            else if (activeConversation.admin && 
                   activeConversation.admin._id && 
                   activeConversation.admin._id.toString() === senderId) {
              msg.originalSender = {
                _id: activeConversation.admin._id,
                name: activeConversation.admin.name || "Qu·∫£n tr·ªã vi√™n",
                avatar: activeConversation.admin.avatar
              };
            }
            // Ki·ªÉm tra admin2
            else if (activeConversation.admin2 && 
                   activeConversation.admin2._id && 
                   activeConversation.admin2._id.toString() === senderId) {
              msg.originalSender = {
                _id: activeConversation.admin2._id,
                name: activeConversation.admin2.name || "Ph√≥ nh√≥m",
                avatar: activeConversation.admin2.avatar
              };
            }
            else {
              // M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng ID ng∆∞·ªùi g·ª≠i n·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin
              msg.originalSender = {
                _id: senderId,
                name: "Ng∆∞·ªùi d√πng",
                avatar: null
              };
            }
          }
        }
        
        // ƒê·∫£m b·∫£o ID tin nh·∫Øn nh·∫•t qu√°n
        if (msg._id) {
          msg.id = msg._id;
        }
        
        // Debug: Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi g·ª≠i sau khi x·ª≠ l√Ω
        logSenderInfo(msg, 'loadMessages');
        
        return msg;
      });

      // L·ªçc tin nh·∫Øn kh√¥ng n·∫±m trong danh s√°ch ƒë√£ x√≥a
      const filteredMsgs = normalizedMsgs.filter(msg => 
        !msg.deletedBy || !msg.deletedBy.some(id => id.toString() === userId.toString())
      );
      
      Logger.info(`Loaded ${filteredMsgs.length} messages for display`);
      
      // C·∫≠p nh·∫≠t state
      setMessages(filteredMsgs);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i lazy loading
      setHasMoreMessages(result.hasMore || false);
      setNextMessageCursor(result.nextCursor || null);
      
      // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ xem (kh√¥ng ƒë·ª£i ho√†n th√†nh ƒë·ªÉ tr√°nh ch·∫∑n UI)
      ChatService.markMessagesAsSeen(conversationId, token)
        .catch(err => Logger.error("Error marking messages as seen", err));
      
      // T·∫£i tin nh·∫Øn ƒë√£ ghim n·∫øu l√† nh√≥m (kh√¥ng ƒë·ªìng b·ªô ƒë·ªÉ kh√¥ng ch·∫∑n UI)
      if (activeConversation && activeConversation.type === 'group') {
        ChatService.getPinnedMessages(conversationId, token)
          .then(response => {
            if (response.success && response.pinnedMessages) {
              setActiveConversation(prev => ({
                ...prev,
                pinnedMessages: response.pinnedMessages
              }));
            }
          })
          .catch(err => Logger.error("Error loading pinned messages", err));
      }
      
      // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t (gi·∫£m th·ªùi gian ch·ªù)
      setTimeout(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
      
    } catch (error) {
      Alert.alert("Error", "Failed to load messages");
      Logger.error("Error loading messages", error);
    } finally {
      setLoading((prev) => ({ ...prev, messages: false }));
    }
  };

  // C·∫£i thi·ªán ph∆∞∆°ng th·ª©c loadMoreMessages
  const loadMoreMessages = async () => {
    // Ch·ªâ t·∫£i th√™m n·∫øu c√≤n tin nh·∫Øn c≈© v√† kh√¥ng ƒëang t·∫£i
    if (!hasMoreMessages || loadingMoreMessages || !nextMessageCursor || !activeConversation) {
      return;
    }
    
    try {
      setLoadingMoreMessages(true);
      Logger.info("Loading more messages", { before: nextMessageCursor });
      
      // L∆∞u v·ªã tr√≠ scroll hi·ªán t·∫°i
      if (messagesContainerRef.current) {
        scrollPositionRef.current = {
          scrollHeight: messagesContainerRef.current.scrollHeight,
          scrollTop: messagesContainerRef.current.scrollTop,
        };
      }
      
      // T·∫£i th√™m tin nh·∫Øn c≈© h∆°n - gi·ªõi h·∫°n 20 tin nh·∫Øn m·ªói l·∫ßn
      const result = await ChatService.loadMoreMessages(
        activeConversation._id,
        nextMessageCursor,
        20 // Gi·ªõi h·∫°n s·ªë tin nh·∫Øn t·∫£i th√™m
      );
      
      if (!result || !result.messages || !Array.isArray(result.messages)) {
        throw new Error("Invalid messages data format");
      }
      
      // Kh√¥ng t·∫£i th√™m n·∫øu kh√¥ng c√≥ tin nh·∫Øn m·ªõi
      if (result.messages.length === 0) {
        Logger.info("No more messages to load");
        setHasMoreMessages(false);
        return;
      }
      
      // Chu·∫©n h√≥a ID ng∆∞·ªùi d√πng v√† tin nh·∫Øn
      const normalizedMsgs = result.messages.map(msg => {
        // ƒê·∫£m b·∫£o ID ng∆∞·ªùi g·ª≠i lu√¥n ·ªü d·∫°ng string ƒë·ªÉ so s√°nh nh·∫•t qu√°n
        if (msg.sender && typeof msg.sender === 'object' && msg.sender._id) {
          // L∆∞u th√¥ng tin ng∆∞·ªùi g·ª≠i g·ªëc ƒë·ªÉ hi·ªÉn th·ªã trong UI
          msg.originalSender = { 
            _id: msg.sender._id,
            name: msg.sender.name || "Ng∆∞·ªùi d√πng",
            avatar: msg.sender.avatar
          };
          // Ch·ªâ d√πng ID cho c√°c ph√©p so s√°nh
          msg.sender = msg.sender._id;
        } else if (msg.sender && typeof msg.sender === 'string') {
          // T√¨m trong danh s√°ch th√†nh vi√™n nh√≥m
          if (activeConversation?.members && Array.isArray(activeConversation.members)) {
            const senderMember = activeConversation.members.find(member => 
              member.idUser && 
              ((member.idUser._id && member.idUser._id.toString() === msg.sender.toString()) ||
              (typeof member.idUser === 'string' && member.idUser.toString() === msg.sender.toString()))
            );
            
            if (senderMember?.idUser) {
              msg.originalSender = {
                _id: typeof senderMember.idUser === 'object' ? senderMember.idUser._id : senderMember.idUser,
                name: typeof senderMember.idUser === 'object' ? senderMember.idUser.name : "Ng∆∞·ªùi d√πng",
                avatar: typeof senderMember.idUser === 'object' ? senderMember.idUser.avatar : null
              };
            }
            // Ki·ªÉm tra admin
            else if (activeConversation.admin && 
                   activeConversation.admin._id && 
                   activeConversation.admin._id.toString() === msg.sender.toString()) {
              msg.originalSender = {
                _id: activeConversation.admin._id,
                name: activeConversation.admin.name || "Qu·∫£n tr·ªã vi√™n",
                avatar: activeConversation.admin.avatar
              };
            }
            // Ki·ªÉm tra admin2
            else if (activeConversation.admin2 && 
                   activeConversation.admin2._id && 
                   activeConversation.admin2._id.toString() === msg.sender.toString()) {
              msg.originalSender = {
                _id: activeConversation.admin2._id,
                name: activeConversation.admin2.name || "Ph√≥ nh√≥m",
                avatar: activeConversation.admin2.avatar
              };
            }
          }
        }
        
        // ƒê·∫£m b·∫£o ID tin nh·∫Øn nh·∫•t qu√°n
        if (msg._id) {
          msg.id = msg._id;
        }
        
        return msg;
      });
      
      // L·ªçc tin nh·∫Øn ƒë√£ x√≥a
      const filteredNewMsgs = normalizedMsgs.filter(msg => 
        !msg.deletedBy || !msg.deletedBy.some(id => id.toString() === userId.toString())
      );
      
      Logger.info(`Loaded ${filteredNewMsgs.length} additional messages`);
      
      // C·∫≠p nh·∫≠t state v·ªõi tin nh·∫Øn m·ªõi + tin nh·∫Øn hi·ªán t·∫°i
      setMessages(prevMessages => [...filteredNewMsgs, ...prevMessages]);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i lazy loading
      setHasMoreMessages(result.hasMore);
      setNextMessageCursor(result.nextCursor);
      
      // Kh√¥i ph·ª•c v·ªã tr√≠ scroll sau khi DOM c·∫≠p nh·∫≠t
      setTimeout(() => {
        if (messagesContainerRef.current && scrollPositionRef.current) {
          // T√≠nh to√°n offset m·ªõi - ƒë·∫£m b·∫£o v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi ƒë∆∞·ª£c gi·ªØ nguy√™n
          const newScrollTop = 
            messagesContainerRef.current.scrollHeight - 
            scrollPositionRef.current.scrollHeight + 
            scrollPositionRef.current.scrollTop;
            
          messagesContainerRef.current.scrollTop = newScrollTop;
        }
      }, 50);
      
    } catch (error) {
      Logger.error("Error loading more messages", error);
    } finally {
      setLoadingMoreMessages(false);
    }
  };

  // C·∫£i thi·ªán Intersection Observer
  useEffect(() => {
    // Ch·ªâ thi·∫øt l·∫≠p observer n·∫øu c√≥ c√°c ƒëi·ªÅu ki·ªán c·∫ßn thi·∫øt
    if (!hasMoreMessages || !messagesContainerRef.current || messages.length === 0) return;
    
    // T·∫°o ph·∫ßn t·ª≠ top message ref n·∫øu ch∆∞a c√≥
    let topMessageElement = topMessageRef.current;
    
    if (!topMessageElement) {
      // S·ª≠ d·ª•ng tin nh·∫Øn ƒë·∫ßu ti√™n l√†m ƒëi·ªÉm m·ªëc
      topMessageElement = document.getElementById(`message-${messages[0]._id || messages[0].id}`);
      topMessageRef.current = topMessageElement;
    }
    
    if (!topMessageElement) return;
    
    Logger.debug("Setting up Intersection Observer for lazy loading");
    
    const options = {
      root: messagesContainerRef.current,
      rootMargin: "100px 0px 0px 0px", // T·∫£i tr∆∞·ªõc khi ƒë·∫øn ƒë·ªânh 100px
      threshold: 0.1 // K√≠ch ho·∫°t khi ph·∫ßn t·ª≠ hi·ªÉn th·ªã √≠t nh·∫•t 10%
    };
    
    const handleIntersect = (entries) => {
      const [entry] = entries;
      
      if (entry.isIntersecting && hasMoreMessages && !loadingMoreMessages) {
        Logger.info("Top message visible, loading more messages");
        loadMoreMessages();
      }
    };
    
    const observer = new IntersectionObserver(handleIntersect, options);
    observer.observe(topMessageElement);
    
    return () => {
      if (topMessageElement) {
        observer.unobserve(topMessageElement);
      }
      observer.disconnect();
    };
  }, [hasMoreMessages, loadingMoreMessages, messages, activeConversation]);

  // Save draft to localStorage
  useEffect(() => {
    // Ch·ªâ t·∫£i b·∫£n nh√°p n·∫øu kh√¥ng c√≥ tin nh·∫Øn n√†o ƒëang ƒë∆∞·ª£c so·∫°n
    if (activeConversation && !newMessage.trim()) {
      const draft = localStorage.getItem(`draft-${activeConversation._id}`);
      if (draft) setNewMessage(draft);
    }
  }, [activeConversation]);

  // C·∫£i thi·ªán h√†m ki·ªÉm tra sender ID ƒë·ªÉ ƒë·ªìng nh·∫•t vi·ªác so s√°nh
  const isSentByCurrentUser = (message) => {
    if (!message || !userId) return false;
    
    // ƒê·∫£m b·∫£o t·∫•t c·∫£ ID ƒë∆∞·ª£c chuy·ªÉn th√†nh string ƒë·ªÉ so s√°nh
    const senderId = message.sender?.toString() || message.idUser?.toString() || '';
    const currentUserId = userId.toString();
    
    return senderId === currentUserId;
  };

  // ƒêo·∫°n x·ª≠ l√Ω nh·∫≠n tin nh·∫Øn t·ª´ socket
  useEffect(() => {
    // Setup socket event listener for new messages
    SocketService.onNewMessage((message) => {
      if (!message) return;
      
      console.log(`üì© Received message from socket: ${message._id || 'unknown'}`);
      
      // Ki·ªÉm tra xem tin nh·∫Øn c√≥ thu·ªôc cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i kh√¥ng
      if (activeConversation && message.idConversation.toString() !== activeConversation._id.toString()) {
        console.log(`üì§ Tin nh·∫Øn kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i. idConversation: ${message.idConversation}, activeConversation: ${activeConversation._id}`);
        return; // B·ªè qua tin nh·∫Øn kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      }
      
      // Chu·∫©n h√≥a ID ng∆∞·ªùi g·ª≠i t·ª´ server ƒë·ªÉ ƒë·∫£m b·∫£o so s√°nh ƒë√∫ng
      if (message.sender && typeof message.sender === 'object' && message.sender._id) {
        // L∆∞u th√¥ng tin ng∆∞·ªùi g·ª≠i g·ªëc ƒë·ªÉ hi·ªÉn th·ªã trong UI
        message.originalSender = { 
          _id: message.sender._id,
          name: message.sender.name || "Ng∆∞·ªùi d√πng",
          avatar: message.sender.avatar 
        };
        // Ch·ªâ d√πng ID cho c√°c ph√©p so s√°nh
        message.sender = message.sender._id;
      } 
      // N·∫øu c√≥ sender_info ri√™ng bi·ªát th√¨ s·ª≠ d·ª•ng
      else if (message.sender_info && typeof message.sender_info === 'object' && message.sender_info._id) {
        message.originalSender = {
          _id: message.sender_info._id,
          name: message.sender_info.name || "Ng∆∞·ªùi d√πng",
          avatar: message.sender_info.avatar
        };
      }
      // N·∫øu l√† m·ªôt ID ƒë∆°n gi·∫£n m√† ch√∫ng ta c·∫ßn t√¨m ki·∫øm th√¥ng tin
      else if (message.sender && typeof message.sender === 'string' && activeConversation) {
        const senderId = message.sender.toString();
        
        // Log ƒë·ªÉ debug
        console.log(`üîç T√¨m th√¥ng tin cho sender ID: ${senderId}`);
        
        // T√¨m trong danh s√°ch th√†nh vi√™n nh√≥m
        if (activeConversation?.members && Array.isArray(activeConversation.members)) {
          const senderMember = activeConversation.members.find(member => 
            member.idUser && (
              (member.idUser._id && member.idUser._id.toString() === senderId) ||
              (typeof member.idUser === 'string' && member.idUser.toString() === senderId)
            )
          );
          
          if (senderMember?.idUser && typeof senderMember.idUser === 'object') {
            console.log(`‚úÖ T√¨m th·∫•y th√¥ng tin sender t·ª´ members: ${senderMember.idUser.name || 'Kh√¥ng c√≥ t√™n'}`);
            message.originalSender = {
              _id: senderMember.idUser._id,
              name: senderMember.idUser.name || "Ng∆∞·ªùi d√πng",
              avatar: senderMember.idUser.avatar
            };
          }
          // Ki·ªÉm tra admin
          else if (activeConversation.admin && 
                 activeConversation.admin._id && 
                 activeConversation.admin._id.toString() === senderId) {
            console.log(`‚úÖ T√¨m th·∫•y th√¥ng tin sender t·ª´ admin: ${activeConversation.admin.name || 'Qu·∫£n tr·ªã vi√™n'}`);
            message.originalSender = {
              _id: activeConversation.admin._id,
              name: activeConversation.admin.name || "Qu·∫£n tr·ªã vi√™n",
              avatar: activeConversation.admin.avatar
            };
          }
          // Ki·ªÉm tra admin2
          else if (activeConversation.admin2 && 
                 activeConversation.admin2._id && 
                 activeConversation.admin2._id.toString() === senderId) {
            console.log(`‚úÖ T√¨m th·∫•y th√¥ng tin sender t·ª´ admin2: ${activeConversation.admin2.name || 'Ph√≥ nh√≥m'}`);
            message.originalSender = {
              _id: activeConversation.admin2._id,
              name: activeConversation.admin2.name || "Ph√≥ nh√≥m",
              avatar: activeConversation.admin2.avatar
            };
          }
          else {
            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin sender ƒë·∫ßy ƒë·ªß`);
            // M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng ID ng∆∞·ªùi g·ª≠i n·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin
            message.originalSender = {
              _id: senderId,
              name: "Ng∆∞·ªùi d√πng",
              avatar: null
            };
          }
        }
      }
      
      // Debug: Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi g·ª≠i sau khi x·ª≠ l√Ω
      logSenderInfo(message, 'socket');
      
      // Add or update message in the list
      setMessages((prev) => {
        // Ki·ªÉm tra n·∫øu tin nh·∫Øn n√†y l√† GIF v√† ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥
        if (message.type === 'gif' && sentGifIds.current.has(message._id)) {
          console.log('üíØ GIF message already processed, skipping:', message._id);
          return prev; // Kh√¥ng th√™m tin nh·∫Øn v√†o danh s√°ch
        }
        
        // Check if this message already exists in our list
        const existingIndex = prev.findIndex(
          (msg) =>
            (msg._id && msg._id === message._id) ||
            (msg.id && msg.id === message._id) ||
            (msg.id &&
              msg.id.startsWith('temp-') &&
              msg.sender.toString() === message.sender.toString() &&
              ((msg.content === message.content) || 
              (msg.fileName === message.fileName && msg.type === message.type)))
        );
        
        const isDuplicate = existingIndex !== -1;
        
        if (isDuplicate) {
          console.log('‚ö†Ô∏è This message already exists, updating instead of adding new');
          // Update existing message instead of adding new one
          return prev.map((msg, index) => {
            if (index === existingIndex) {
              console.log('üîÑ Updating message:', msg.id, ' -> ', message._id);
              
              // Create enhanced message with all required properties
              const enhancedMessage = { 
                ...message,                           // Take everything from server message
                _id: message._id,                     // Ensure ID is set
                id: message._id,                      // Ensure id is also set for consistent checking
                status: "delivered",                  // Update status
                originalSender: message.originalSender || msg.originalSender, // Gi·ªØ th√¥ng tin ng∆∞·ªùi g·ª≠i
                fileUrl: message.fileUrl || msg.fileUrl,     // Keep file URL
                fileName: message.fileName || msg.fileName,  // Keep file name
                fileType: message.fileType || msg.fileType,  // Keep file type
                type: message.type || msg.type,              // Keep message type
                content: message.content || msg.content      // Keep content
              };
              
              console.log('üìú Updated message data:', enhancedMessage);
              return enhancedMessage;
            }
            return msg;
          });
        } else {
          console.log('‚ú® Adding new message to list');
          
          // Ensure the message has consistent ID format  
          const enhancedMessage = {
            ...message,
            id: message._id,              // Add id property for consistent checking
            status: "delivered"           // Set status
          };

          // Handle specific file types
          if (['image', 'video', 'audio', 'pdf', 'doc', 'excel', 'presentation', 'file'].includes(message.type)) {
            // Log file data
            console.log(`üìÅ Processing ${message.type} message:`, {
              id: message._id,
              url: message.fileUrl,
              fileName: message.fileName,
              fileType: message.fileType,
              content: message.content
            });

            // If there's no fileUrl but there's a message with this ID that has it, use that
            if (!message.fileUrl && existingIndex !== -1) {
              enhancedMessage.fileUrl = prev[existingIndex].fileUrl;
            }
            
            if (!message.fileName && existingIndex !== -1) {
              enhancedMessage.fileName = prev[existingIndex].fileName;
            }
          }
          
          // N·∫øu l√† tin nh·∫Øn GIF, th√™m v√†o danh s√°ch ƒë√£ x·ª≠ l√Ω
          if (message.type === 'gif' && message._id) {
            sentGifIds.current.add(message._id);
          }
          
          // If no duplicates, add to list
          return [...prev, enhancedMessage];
        }
      });
      
      // Scroll to bottom when new message arrives
      setTimeout(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
      
      // If message is from another user and we're in the conversation, mark as seen
      if (
        message.sender.toString() !== userId.toString() && 
        message.idConversation.toString() === activeConversation?._id.toString()
      ) {
        // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ xem
        SocketService.markMessageAsSeen(activeConversation._id);
      }

      // C·∫≠p nh·∫≠t activeConversation v·ªõi tin nh·∫Øn m·ªõi nh∆∞ng gi·ªØ nguy√™n th√¥ng tin members
      if (activeConversation && activeConversation._id === message.idConversation) {
        setActiveConversation(prev => {
          // T·∫°o b·∫£n sao s√¢u c·ªßa activeConversation
          return {
            ...prev,
            lastMessage: {
              _id: message._id,
              content: message.content,
              type: message.type,
              fileUrl: message.fileUrl,
              fileName: message.fileName,
              sender: message.sender
            }
            // Gi·ªØ nguy√™n c√°c thu·ªôc t√≠nh kh√°c, ƒë·∫∑c bi·ªát l√† members
          };
        });
      }
    });
    
    // Group chat socket event listeners
    // Group created event
    SocketService.onGroupCreated((newGroup) => {
      console.log('üîî Group created:', newGroup);
      setConversations(prev => [newGroup, ...prev]);
    });
    
    // Group updated event
    SocketService.onGroupUpdated((data) => {
      console.log('üîî Group updated:', data);
      
      const { conversationId, name, avatar, updatedBy, systemMessage } = data;
      
      // Update conversations list with new group info
      setConversations(prev => 
        prev.map(conv => {
          if (conv._id === conversationId) {
            // Create a new object with updated properties
            return {
              ...conv,
              name: name || conv.name,
              avatar: avatar || conv.avatar
            };
          }
          return conv;
        })
      );
      
      // Update active conversation if it's the one that was updated
      if (activeConversation && activeConversation._id === conversationId) {
        setActiveConversation(prev => ({
          ...prev,
          name: name || prev.name,
          avatar: avatar || prev.avatar
        }));
        
        // Add a system message to the UI about the update
        if (systemMessage) {
          const tempSystemMessage = {
            _id: systemMessage._id || Date.now().toString(),
            type: 'system',
            content: systemMessage.content,
            createdAt: systemMessage.createdAt || new Date(),
            temporary: true // Mark as temporary so it doesn't duplicate with actual messages
          };
          
          // Add the system message to the messages list
          setMessages(prev => [...prev, tempSystemMessage]);
        }
      }
    });
    
    // Admin2 assigned event - when the current user is assigned as admin2
    SocketService.onAdmin2Assigned(({ conversation, memberId, assignedBy }) => {
      console.log('üîî User assigned as admin2:', { conversation, memberId, assignedBy });
      
      // Get current user data
      const userData = AuthService.getUserData();
      const currentUserId = userData?._id;
      
      // Check if the current user is the one being assigned as admin2
      const isCurrentUserAssigned = memberId === currentUserId;
      
      if (isCurrentUserAssigned) {
        console.log('Current user was assigned as admin2');
        
        // Update the conversation in the list
        setConversations(prev => 
          prev.map(conv => 
            conv._id === conversation._id ? conversation : conv
          )
        );
        
        // Update active conversation if it's the one that was updated
        if (activeConversation && activeConversation._id === conversation._id) {
          setActiveConversation(conversation);
          
          // Add a system message to the UI about the admin2 assignment
          const systemMessage = {
            _id: Date.now().toString(),
            type: 'system',
            content: `${assignedBy}  ƒë√£ giao quy·ªÅn ph√≥ nh√≥m cho b·∫°n`,
            createdAt: new Date(),
            temporary: true // Mark as temporary so it doesn't duplicate with actual messages
          };
          
          // Add the system message to the messages list
          setMessages(prev => [...prev, systemMessage]);
        }
      }
    });
    
    // Admin2 removed event - when the current user's admin2 role is removed
    SocketService.onAdmin2Removed(({ conversation, memberId, removedBy }) => {
      console.log('üîî Ng∆∞·ªùi d√πng ƒë√£ b·ªã xo√° ph√≥ nh√≥m:', { conversation, memberId, removedBy });
      
      // Get current user data
      const userData = AuthService.getUserData();
      const currentUserId = userData?._id;
      
      // Check if the current user is the one being removed from admin2
      const isCurrentUserRemoved = memberId === currentUserId;
      
      if (isCurrentUserRemoved) {
        console.log('Current user was removed from admin2 role');
        
        // X√≥a admin2Id t·ª´ localStorage
        localStorage.removeItem(`admin2Id_${conversation._id}`);
        localStorage.removeItem('admin2Id');
        
        // Update the conversation in the list
        setConversations(prev => 
          prev.map(conv => 
            conv._id === conversation._id ? {
              ...conv,
              admin2: null // ƒê·∫£m b·∫£o admin2 l√† null ƒë·ªÉ c·∫≠p nh·∫≠t ƒë√∫ng quy·ªÅn
            } : conv
          )
        );
        
        // Update active conversation if it's the one that was updated
        if (activeConversation && activeConversation._id === conversation._id) {
          setActiveConversation(prev => ({
            ...prev,
            admin2: null // ƒê·∫£m b·∫£o admin2 l√† null ƒë·ªÉ c·∫≠p nh·∫≠t ƒë√∫ng quy·ªÅn
          }));
          
          // Add a system message to the UI about the admin2 removal
          const systemMessage = {
            _id: Date.now().toString(),
            type: 'system',
            content: `${removedBy} ƒë√£ x√≥a b·∫°n kh·ªèi ph√≥ nh√≥m`,
            createdAt: new Date(),
            temporary: true // Mark as temporary so it doesn't duplicate with actual messages
          };
          
          // Add the system message to the messages list
          setMessages(prev => [...prev, systemMessage]);
        }
      } else {
        // N·∫øu ng∆∞·ªùi b·ªã x√≥a kh√¥ng ph·∫£i l√† ng∆∞·ªùi d√πng hi·ªán t·∫°i, v·∫´n c·∫≠p nh·∫≠t state ƒë·ªÉ UI nh·∫•t qu√°n
        // Update the conversation in the list
        setConversations(prev => 
          prev.map(conv => 
            conv._id === conversation._id ? {
              ...conv,
              admin2: null
            } : conv
          )
        );
        
        // Update active conversation if it's the one that was updated
        if (activeConversation && activeConversation._id === conversation._id) {
          setActiveConversation(prev => ({
            ...prev,
            admin2: null
          }));
        }
      }
    });
    
    // Member added to group event
    SocketService.onMemberAdded(({ conversation, member }) => {
      console.log('üîî Ng∆∞·ªùi d√πng ƒë∆∞·ª£c th√™m v√†o nh√≥m:', { conversation, member });
      
      // Get current user data
      const userData = AuthService.getUserData();
      const currentUserId = userData?._id;
      
      // Check if the current user is the one being added to the group
      const isCurrentUserAdded = member && (
        (member._id === currentUserId) || 
        (member.idUser && member.idUser._id === currentUserId) ||
        (member.idUser === currentUserId)
      );
      
      console.log('Is current user added to group:', isCurrentUserAdded);
      
      setConversations(prev => {
        // Check if the conversation already exists in the list
        const conversationExists = prev.some(conv => conv._id === conversation._id);
        
        if (conversationExists) {
          // Update existing conversation
          return prev.map(conv => 
            conv._id === conversation._id ? conversation : conv
          );
        } else if (isCurrentUserAdded) {
          // Add new conversation to the list if current user was added
          console.log('Adding new group conversation to list:', conversation);
          return [conversation, ...prev];
        } else {
          // No changes needed
          return prev;
        }
      });
      
      // Update active conversation if it's the one that was updated
      if (activeConversation && activeConversation._id === conversation._id) {
        setActiveConversation(conversation);
      }
    });
    
    // Member removed from group event
    SocketService.onMemberRemoved(({ conversation, memberId, memberName }) => {
      console.log('üîî Ng∆∞·ªùi d√πng ƒë∆∞·ª£c x√≥a kh·ªèi nh√≥m:', { conversation, memberId, memberName });
      
      // Get current user data
      const userData = AuthService.getUserData();
      const currentUserId = userData?._id;
      
      // Check if the current user is the one being removed
      const isCurrentUserRemoved = memberId === currentUserId;
      
      if (isCurrentUserRemoved) {
        console.log('Current user was removed from the group');
        // Remove the conversation from the list if current user was removed
        setConversations(prev => prev.filter(conv => conv._id !== conversation._id));
        
        // If the active conversation is the one the user was removed from, clear it
        if (activeConversation && activeConversation._id === conversation._id) {
          setActiveConversation(null);
          setMessages([]);
          // Navigate back to conversation list if needed
          if (window.innerWidth <= 768) {
            setShowConversationList(true);
          }
        }
      } else {
        // Update the conversation in the list with the new member list
        setConversations(prev => 
          prev.map(conv => 
            conv._id === conversation._id ? conversation : conv
          )
        );
        
        // Update active conversation if it's the one that was updated
        if (activeConversation && activeConversation._id === conversation._id) {
          setActiveConversation(conversation);
          
          // Add a system message to the UI about the member leaving
          if (memberName) {
            const systemMessage = {
              _id: Date.now().toString(),
              type: 'system',
              content: `${memberName} left the group`,
              createdAt: new Date(),
              temporary: true // Mark as temporary so it doesn't duplicate with actual messages
            };
            
            // Add the system message to the messages list
            setMessages(prev => [...prev, systemMessage]);
          }
        }
      }
    });
    
    // User left group event
    SocketService.onGroupLeft(({ conversationId, userId: leftUserId }) => {
      console.log('üîî Ng∆∞·ªùi d√πng r·ªùi kh·ªèi nh√≥m:', { conversationId, userId: leftUserId });    
      
      // If current user left the group, remove it from the list
      if (leftUserId === userId) {
        setConversations(prev => prev.filter(conv => conv._id !== conversationId));
        
        // If active conversation is the one user left, clear it
        if (activeConversation && activeConversation._id === conversationId) {
          setActiveConversation(null);
        }
      } else {
        // Otherwise, update the conversation
        ChatService.getConversationById(conversationId)
          .then(updatedConversation => {
            setConversations(prev => 
              prev.map(conv => 
                conv._id === conversationId ? updatedConversation : conv
              )
            );
            
            // Update active conversation if it's the one that was updated
            if (activeConversation && activeConversation._id === conversationId) {
              setActiveConversation(updatedConversation);
            }
          })
          .catch(error => console.error('Error updating conversation after user left:', error));
      }
    });
    
    // Group deleted event
    SocketService.onGroupDeleted(({ conversationId }) => {
      console.log('üîî Nh√≥m ƒë√£ b·ªã x√≥a:', conversationId);
      setConversations(prev => prev.filter(conv => conv._id !== conversationId));
      
      // If active conversation is the one that was deleted, clear it
      if (activeConversation && activeConversation._id === conversationId) {
        setActiveConversation(null);
      }
    });
    
    // Member removed from group event (real-time update)
    SocketService.onMemberRemovedFromGroup((data) => {
      console.log('üîî Th√†nh vi√™n b·ªã x√≥a kh·ªèi nh√≥m (socket event):', data);
      const { conversationId, memberId, removedBy } = data;
      
      // Get current user data
      const userData = AuthService.getUserData();
      const currentUserId = userData?._id;
      
      // If the current user is the one being removed, handle it differently
      if (memberId === currentUserId) {
        // Remove the conversation from the list
        setConversations(prev => prev.filter(conv => conv._id !== conversationId));
        
        // If the active conversation is the one the user was removed from, clear it
        if (activeConversation && activeConversation._id === conversationId) {
          setActiveConversation(null);
          setMessages([]);
          // Navigate back to conversation list if needed
          if (window.innerWidth <= 768) {
            setShowConversationList(true);
          }
        }
      } else {
        // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c danh s√°ch th√†nh vi√™n trong cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
        if (activeConversation && activeConversation._id === conversationId) {
          // T·∫°o b·∫£n sao c·ªßa activeConversation v√† x√≥a th√†nh vi√™n b·ªã lo·∫°i b·ªè
          const updatedConversation = {
            ...activeConversation,
            members: activeConversation.members.filter(
              member => member.idUser && 
              ((member.idUser._id && member.idUser._id.toString() !== memberId.toString()) ||
               (typeof member.idUser === 'string' && member.idUser.toString() !== memberId.toString()))
            )
          };
          
          // C·∫≠p nh·∫≠t state v·ªõi danh s√°ch th√†nh vi√™n m·ªõi
          setActiveConversation(updatedConversation);
          
          // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán
          setConversations(prev => 
            prev.map(conv => 
              conv._id === conversationId ? updatedConversation : conv
            )
          );
          
          // Th√™m th√¥ng b√°o h·ªá th·ªëng v·ªÅ vi·ªác th√†nh vi√™n b·ªã x√≥a
          const systemMessage = {
            _id: Date.now().toString(),
            type: 'system',
            content: data.memberName 
              ? `${data.memberName} ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m b·ªüi ${data.removedByName || 'qu·∫£n tr·ªã vi√™n'}`
              : `M·ªôt th√†nh vi√™n ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m`,
            createdAt: new Date(),
            temporary: true
          };
          
          setMessages(prev => [...prev, systemMessage]);
        } else {
          // N·∫øu kh√¥ng ph·∫£i cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i, v·∫´n c·∫≠p nh·∫≠t trong danh s√°ch
          setConversations(prev => 
            prev.map(conv => {
              if (conv._id === conversationId) {
                return {
                  ...conv,
                  members: conv.members ? conv.members.filter(
                    member => member.idUser && 
                    ((member.idUser._id && member.idUser._id.toString() !== memberId.toString()) ||
                     (typeof member.idUser === 'string' && member.idUser.toString() !== memberId.toString()))
                  ) : []
                };
              }
              return conv;
            })
          );
        }
      }
    });
    
    return () => {
      // Cleanup socket listeners
      SocketService.removeListener('new_message');
      SocketService.removeListener('group_created');
      SocketService.removeListener('group_updated');
      SocketService.removeListener('member_added');
      SocketService.removeListener('member_removed');
      SocketService.removeListener('member_removed_from_group');
      SocketService.removeListener('group_left');
      SocketService.removeListener('group_deleted');
    };
  }, [activeConversation, userId]);

  // C·∫≠p nh·∫≠t h√†m handleSendMessage ƒë·ªÉ g·ª≠i tin nh·∫Øn qua socket
  const handleSendMessage = async () => {
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ tin nh·∫Øn ho·∫∑c kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán
    if ((!newMessage.trim() && !selectedFile) || !activeConversation?._id) return;
    
    // Ki·ªÉm tra n·∫øu tin nh·∫Øn b·∫Øt ƒë·∫ßu b·∫±ng @AIGemini ho·∫∑c @AiGemini
    if (newMessage.trim().startsWith('@AIGemini') || newMessage.trim().startsWith('@AiGemini')) {
      try {
        // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
        setIsProcessingAI(true);
        
        // G·ªçi API ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn AI
        const result = await ChatService.processAIGeminiMessage(
          newMessage.trim(),
          activeConversation._id,
          userId
        );
        
        // X·ª≠ l√Ω k·∫øt qu·∫£
        if (result?.error) {
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
          setSnackbarMessage(result.message);
          setSnackbarOpen(true);
        } else if (result?.success) {
          // Hi·ªÉn th·ªã tin nh·∫Øn t·∫°m th·ªùi
          if (result.tempMessages && Array.isArray(result.tempMessages)) {
            // Th√™m tin nh·∫Øn t·∫°m th·ªùi v√†o danh s√°ch tin nh·∫Øn
            setMessages(prevMessages => [...prevMessages, ...result.tempMessages]);
            
            // Cu·ªôn xu·ªëng d∆∞·ªõi khi c√≥ tin nh·∫Øn m·ªõi
            setTimeout(() => {
              messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
            }, 100);
            
            // Sau khi c√≥ k·∫øt qu·∫£ t·ª´ AI, c·∫≠p nh·∫≠t tin nh·∫Øn AI v·ªõi n·ªôi dung th·ª±c t·∫ø
            setTimeout(() => {
              setMessages(prevMessages => {
                // T√¨m v√† thay th·∫ø tin nh·∫Øn AI t·∫°m th·ªùi b·∫±ng tin nh·∫Øn th·ª±c t·∫ø
                return prevMessages.map(msg => {
                  // N·∫øu l√† tin nh·∫Øn AI t·∫°m th·ªùi, thay th·∫ø b·∫±ng tin nh·∫Øn th·ª±c t·∫ø
                  if (msg.isAI && msg.status === 'sending') {
                    return result.aiMessage;
                  }
                  return msg;
                });
              });
              
              // Cu·ªôn xu·ªëng d∆∞·ªõi khi c√≥ tin nh·∫Øn m·ªõi
              messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
            }, 500);
          }
        }
        
        // X√≥a tin nh·∫Øn v√† ·∫©n tr·∫°ng th√°i x·ª≠ l√Ω
        setNewMessage("");
        setIsProcessingAI(false);
        
        // X√≥a b·∫£n nh√°p tin nh·∫Øn kh·ªèi localStorage
        if (activeConversation?._id) {
          localStorage.removeItem(`draft-${activeConversation._id}`);
        }
        
        return; // K·∫øt th√∫c h√†m v√¨ tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi AI
      } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω tin nh·∫Øn AI:', error);
        setSnackbarMessage('Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu AI. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setSnackbarOpen(true);
        setIsProcessingAI(false);
      }
    }

    // Log th√¥ng tin th√†nh vi√™n tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn
    console.log(`üìä Tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn - S·ªë th√†nh vi√™n: ${activeConversation.members?.length || 0}`);
    
    // L∆∞u b·∫£n sao c·ªßa activeConversation ƒë·ªÉ tr√°nh m·∫•t th√¥ng tin th√†nh vi√™n
    // S·ª≠ d·ª•ng deep copy cho c√°c thu·ªôc t√≠nh quan tr·ªçng
    const conversationCopy = {
      ...activeConversation,
      members: activeConversation.members ? [...activeConversation.members] : [],
      admin: activeConversation.admin ? {...activeConversation.admin} : null,
      admin2: activeConversation.admin2 ? {...activeConversation.admin2} : null,
    };
    
    // Log th√¥ng tin b·∫£n sao
    console.log(`üìã B·∫£n sao cu·ªôc tr√≤ chuy·ªán - S·ªë th√†nh vi√™n: ${conversationCopy.members?.length || 0}`);

    // D·ª´ng tr·∫°ng th√°i typing n·∫øu ƒëang nh·∫≠p
    if (isTyping) {
      setIsTyping(false);
      SocketService.sendStopTypingStatus(activeConversation._id, userId);
    }

    // Determine message type based on selected file
    let messageType = 'text';
    if (selectedFile) {
      if (selectedFile.type.startsWith('image/')) {
        messageType = 'image';
      } else if (selectedFile.type.startsWith('video/')) {
        messageType = 'video';
      } else if (selectedFile.type.startsWith('audio/')) {
        messageType = 'audio';
      } else if (selectedFile.detectedType) {
        // Use the detected type from handleFileSelect
        messageType = selectedFile.detectedType;
      } else {
        messageType = 'file';
      }
    }

    // T·∫°o tin nh·∫Øn t·∫°m th·ªùi
    const tempMessage = {
      id: `temp-${Date.now()}`,
      text: newMessage,
      content: newMessage,
      sender: userId,
      originalSender: { 
        _id: userId,
        name: user.name,
        avatar: user.avatar
      },
      time: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
      createdAt: new Date().toISOString(),
      seen: false,
      status: "sending",
      hasFile: !!selectedFile,
      fileName: selectedFile?.name || "",
      fileType: selectedFile?.type || "",
      type: messageType,
      fileUrl: selectedFile && selectedFile.type.startsWith('image/') 
        ? selectedFilePreview 
        : (selectedFile?.tempFileUrl || null), // S·ª≠ d·ª•ng tempFileUrl n·∫øu kh√¥ng ph·∫£i h√¨nh ·∫£nh
    };
    
    // X·ª≠ l√Ω b·ªï sung cho tin nh·∫Øn ·∫£nh
    if (selectedFile && selectedFile.type && selectedFile.type.startsWith('image/')) {
      // ƒê√°nh d·∫•u ƒë√¢y l√† xem tr∆∞·ªõc
      tempMessage.isPreview = !!selectedFilePreview;
      
      // N·∫øu l√† ·∫£nh v√† kh√¥ng c√≥ n·ªôi dung, ƒë·∫∑t content r·ªóng
      if (!newMessage.trim()) {
        tempMessage.content = '';
      }
    }

    // Th√™m tin nh·∫Øn v√†o UI ngay l·∫≠p t·ª©c
    setMessages((prev) => [...prev, tempMessage]);
    setNewMessage("");
    
    // X√≥a b·∫£n nh√°p tin nh·∫Øn kh·ªèi localStorage
    if (activeConversation?._id) {
      localStorage.removeItem(`draft-${activeConversation._id}`);
    }
    
    // Cu·ªôn xu·ªëng d∆∞·ªõi khi c√≥ tin nh·∫Øn m·ªõi
    setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);

    try {
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error("No authentication token found");
      }

      // X·ª≠ l√Ω t·∫£i l√™n file
      if (selectedFile) {
        console.log('üìé ƒêang t·∫£i l√™n file:', selectedFile.name, 'lo·∫°i:', messageType);
        
        const formData = new FormData();
        formData.append('file', selectedFile);
        formData.append('idConversation', activeConversation._id);
        formData.append('sender', userId);
        formData.append('content', newMessage || `File: ${selectedFile.name}`);
        formData.append('type', messageType);
        
        // Th√™m socketId ƒë·ªÉ server c√≥ th·ªÉ g·ª≠i th√¥ng b√°o tin nh·∫Øn m·ªõi ƒë·∫øn ƒë√∫ng client
        const socketId = SocketService.getSocketId();
        if (socketId) {
          console.log('üîå G·ª≠i k√®m socketId ƒë·ªÉ x·ª≠ l√Ω real-time:', socketId);
          formData.append('socketId', socketId);
        }

        try {
          // T·∫£i l√™n file qua HTTP
          console.log('üì§ T·∫£i l√™n file qua HTTP');
          const fileResponse = await ChatService.uploadFile(formData, token);
          console.log('‚úÖ T·∫£i l√™n file th√†nh c√¥ng:', fileResponse);
          
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn t·∫°m ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt tin nh·∫Øn ƒë√£ g·ª≠i th√†nh c√¥ng
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === tempMessage.id
                ? {
                    ...msg,
                    _id: fileResponse._id, // Th√™m _id ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p socket kh√¥ng tr·∫£ v·ªÅ k·ªãp th·ªùi
                    status: "sent", // ƒê√°nh d·∫•u l√† ƒë√£ g·ª≠i
                    fileUrl: fileResponse.fileUrl || msg.fileUrl, // C·∫≠p nh·∫≠t URL t·ª´ response
                    fileName: fileResponse.fileName || msg.fileName,
                    fileType: fileResponse.fileType || msg.fileType,
                    // X√≥a tr·∫°ng th√°i preview
                    isPreview: false
                  }
                : msg
            )
          );
          
          // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán (thay v√¨ ƒë·ª£i socket)
          const updatedConversation = {
            ...conversationCopy, // S·ª≠ d·ª•ng b·∫£n sao ƒë√£ l∆∞u ƒë·ªÉ gi·ªØ nguy√™n th√¥ng tin th√†nh vi√™n
            lastMessage: {
              _id: fileResponse._id,
              content: fileResponse.content || `File: ${fileResponse.fileName}`,
              type: fileResponse.type || messageType,
              fileUrl: fileResponse.fileUrl,
              fileName: fileResponse.fileName,
              sender: userId
            }
          };
          
          // Log th√¥ng tin cu·ªôc tr√≤ chuy·ªán sau khi c·∫≠p nh·∫≠t
          console.log(`üìà Sau khi c·∫≠p nh·∫≠t (file) - S·ªë th√†nh vi√™n: ${updatedConversation.members?.length || 0}`);
          
          setActiveConversation(updatedConversation);
          
          // X√≥a file ƒë√£ ch·ªçn
          setSelectedFile(null);
          setSelectedFilePreview(null);
          if (fileInputRef.current) {
            fileInputRef.current.value = '';
          }
        } catch (error) {
          console.error("‚ùå L·ªói khi t·∫£i l√™n file:", error);
          
          // Hi·ªÉn th·ªã th√¥ng tin l·ªói chi ti·∫øt h∆°n
          let errorMessage = "Kh√¥ng th·ªÉ t·∫£i l√™n file";
          if (error.response) {
            // Server ƒë√£ tr·∫£ v·ªÅ ph·∫£n h·ªìi v·ªõi m√£ l·ªói
            console.error("Chi ti·∫øt l·ªói t·ª´ server:", error.response.data);
            errorMessage = `L·ªói: ${error.response.status} - ${error.response.data.error || error.response.data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`;
          } else if (error.request) {
            // Request ƒë∆∞·ª£c t·∫°o nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
            console.error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:", error.request);
            errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.";
          } else {
            // C√≥ l·ªói khi thi·∫øt l·∫≠p request
            console.error("L·ªói thi·∫øt l·∫≠p request:", error.message);
            errorMessage = `L·ªói: ${error.message}`;
          }
          
          Alert.alert("L·ªói t·∫£i l√™n", errorMessage);
          
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn th√†nh th·∫•t b·∫°i
          setMessages((prev) =>
            prev.map((msg) =>
              msg.id === tempMessage.id ? { ...msg, status: "failed" } : msg
            )
          );
        }
      } else {
        // G·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua socket
        console.log('üí¨ G·ª≠i tin nh·∫Øn vƒÉn b·∫£n qua socket');
        
        const messageData = {
          idConversation: activeConversation._id,
          content: newMessage,
          type: "text",
          sender: userId,
        };
        
        // ƒê·∫£m b·∫£o socket ƒë∆∞·ª£c k·∫øt n·ªëi
        if (!SocketService.isConnected) {
          console.log('üîÑ Socket ch∆∞a k·∫øt n·ªëi, ƒëang k·∫øt n·ªëi l·∫°i...');
          SocketService.connect();
        }
        
        // G·ª≠i tin nh·∫Øn qua socket
        console.log('üì® G·ª≠i tin nh·∫Øn:', messageData);
        SocketService.sendMessage(messageData);
        
        // Socket s·∫Ω ph√°t s·ª± ki·ªán new_message khi tin nh·∫Øn ƒë∆∞·ª£c l∆∞u v√†o database
        // Nh∆∞ng ƒë·ªÉ c·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c, ta s·∫Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
        setMessages((prev) =>
          prev.map((msg) =>
            msg.id === tempMessage.id
              ? {
                  ...msg,
                  status: "sent"
                }
              : msg
          )
        );
        
        // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán v·ªõi tin nh·∫Øn m·ªõi
        const updatedConversation = {
          ...conversationCopy, // S·ª≠ d·ª•ng b·∫£n sao ƒë·ªÉ gi·ªØ nguy√™n th√¥ng tin th√†nh vi√™n
          lastMessage: {
            content: newMessage,
            type: "text",
            sender: userId
          }
        };
        
        // Log th√¥ng tin cu·ªôc tr√≤ chuy·ªán sau khi c·∫≠p nh·∫≠t
        console.log(`üìà Sau khi c·∫≠p nh·∫≠t - S·ªë th√†nh vi√™n: ${updatedConversation.members?.length || 0}`);
        
        setActiveConversation(updatedConversation);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
      Alert.alert("Error", "Failed to send message");
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn th√†nh th·∫•t b·∫°i
      setMessages((prev) =>
        prev.map((msg) =>
          msg.id === tempMessage.id ? { ...msg, status: "failed" } : msg
        )
      );
    }
  };

  const handleFindFriendByPhoneNumber = async (phone) => {
    if (!phone) return;
    try {
      const user = await UserService.searchUser(phone);
      setFoundUser(user); // store found user
    } catch (error) {
      console.error("User not found or error:", error);
      setFoundUser(null); // clear result if error
    }
  };

  const handleConversationSelect = async (conversation) => {
    try {
      // Log th√¥ng tin v·ªÅ members c·ªßa cu·ªôc tr√≤ chuy·ªán
      console.log(`üîç Ch·ªçn cu·ªôc tr√≤ chuy·ªán: ${conversation._id}`);
      console.log(`üë• S·ªë th√†nh vi√™n: ${conversation.members?.length || 0}`);
      if (conversation.members && conversation.members.length > 0) {
        console.log('üë§ Danh s√°ch th√†nh vi√™n:', conversation.members.map(m => m.name || m._id).join(', '));
      }
      
      // ƒê·∫∑t cu·ªôc tr√≤ chuy·ªán ƒëang ho·∫°t ƒë·ªông tr∆∞·ªõc
      setActiveConversation(conversation);
      
      // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i tin nh·∫Øn
      setLoading((prev) => ({ ...prev, messages: true }));
      
      // T·∫£i tin nh·∫Øn cho cu·ªôc tr√≤ chuy·ªán ƒë∆∞·ª£c ch·ªçn
      await loadMessages(conversation._id);
      
      // Tham gia ph√≤ng socket cho cu·ªôc tr√≤ chuy·ªán n√†y
      SocketService.joinConversation(conversation._id);
      
      // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ xem
      await ChatService.markMessagesAsSeen(conversation._id);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i UI
      setShowSingleChat(true);
      
      // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
      setTimeout(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
    } catch (error) {
      Logger.error("Error selecting conversation", error);
      Alert.alert("Error", "Failed to load conversation");
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSidebarMenuAnchorEl(null);
    localStorage.removeItem('currentMenu');
  };

  const handleSidebarMenuOpen = (event) => {
    setSidebarMenuAnchorEl(event.currentTarget);
  };

  const handleChange = (event) => {
    const input = event.target.value;
    setPhone(input);
    handleFindFriendByPhoneNumber(input);
  };

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleEmojiOpen = (event) => {
    setEmojiAnchorEl(event.currentTarget);
    setShowEmojiPicker(true);
    setActiveTab('emoji');
  };

  const handleEmojiClose = () => {
    setEmojiAnchorEl(null);
    setShowEmojiPicker(false);
    setShowGifGallery(false);
  };

  const handleTabChange = (tab) => {
    if (typeof tab === 'object') {
      setEmojiAnchorEl(tab.currentTarget);
      setActiveTab('gif');
      setShowEmojiPicker(false);
      setShowGifGallery(true);
    } else {
      setActiveTab(tab);
      setShowEmojiPicker(tab === 'emoji');
      setShowGifGallery(tab === 'gif');
    }
  };

  const insertEmoji = (emoji) => {
    setNewMessage(prevMessage => prevMessage + emoji);
    inputRef.current?.focus();
  };

  // L∆∞u tr·ªØ ID c·ªßa tin nh·∫Øn GIF ƒë√£ g·ª≠i ƒë·ªÉ tr√°nh hi·ªÉn th·ªã tr√πng l·∫∑p
  const sentGifIds = useRef(new Set());
  
  const handleSendGif = async (gif) => {
    try {
      if (!activeConversation?._id || !userId) return;
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error("Kh√¥ng c√≥ token x√°c th·ª±c");
      }
      
      const caption = newMessage.trim();
      
      Logger.info('Sending GIF message', { gifData: gif });
      
      // T·∫°o ID duy nh·∫•t cho tin nh·∫Øn t·∫°m th·ªùi
      const tempId = `temp_gif_${Date.now()}`;
      
      // L∆∞u ID v√†o danh s√°ch ƒë√£ g·ª≠i
      sentGifIds.current.add(tempId);
      
      // G·ª≠i tin nh·∫Øn GIF qua API
      const response = await ChatService.sendGifMessage(
        activeConversation._id,
        userId,
        gif, // Truy·ªÅn to√†n b·ªô ƒë·ªëi t∆∞·ª£ng gif t·ª´ Giphy API
        token,
        caption
      );
      
      // L∆∞u ID th·ª±c t·∫ø v√†o danh s√°ch ƒë√£ g·ª≠i
      if (response && response._id) {
        sentGifIds.current.add(response._id);
      }
      
      if (caption) {
        setNewMessage("");
        if (activeConversation?._id) {
          localStorage.removeItem(`draft-${activeConversation._id}`);
        }
      }
      
      handleEmojiClose();
    } catch (error) {
      console.error('Error sending GIF:', error);
      // S·ª≠ d·ª•ng Dialog thay v√¨ Alert.alert v√¨ ƒë√¢y l√† ·ª©ng d·ª•ng web
      setErrorMessage('Kh√¥ng th·ªÉ g·ª≠i GIF. Vui l√≤ng th·ª≠ l·∫°i.');
      setErrorDialogOpen(true);
    }
  };

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    setSelectedFile(file);
    
    // Determine file type and create preview when possible
    if (file.type.startsWith('image/')) {
      // For images, create a preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedFilePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    } else if (file.type.startsWith('video/')) {
      // For videos, we'll just use a placeholder in the UI
      setSelectedFilePreview(null);
    } else {
      // For documents and other file types
      setSelectedFilePreview(null);
      
      // Determine file type for UI display
      let fileType = 'file';
      if (file.type.includes('pdf')) {
        fileType = 'pdf';
      } else if (file.type.includes('word') || 
                file.type.includes('document') ||
                file.name.endsWith('.doc') || 
                file.name.endsWith('.docx')) {
        fileType = 'doc';
      } else if (file.type.includes('excel') || 
                file.type.includes('sheet') ||
                file.name.endsWith('.xls') || 
                file.name.endsWith('.xlsx')) {
        fileType = 'excel';
      } else if (file.type.includes('presentation') ||
                file.name.endsWith('.ppt') || 
                file.name.endsWith('.pptx')) {
        fileType = 'presentation';
      }
      
      // Store the detected file type for later use
      file.detectedType = fileType;
      
      // T·∫°o m·ªôt identifier t·∫°m cho file ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc khi upload
      // ƒê·∫£m b·∫£o m·ªói file ƒë·ªÅu c√≥ m·ªôt identifier duy nh·∫•t
      file.tempFileUrl = `temp_file_${Date.now()}_${file.name}`;
    }
    
    // Focus input text for caption
    setTimeout(() => {
      inputRef.current?.focus();
    }, 100);
  };

  const handleCancelFileSelection = () => {
    setSelectedFile(null);
    setSelectedFilePreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };

  const handleLogout = async () => {
    try {
      await AuthService.logout();
      // ƒê√≥ng menu
      handleMenuClose();
      // ƒê·∫∑t c·ªù ƒë·ªÉ App.js bi·∫øt ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t
      localStorage.setItem("isLoggedOut", "true");
      // Reload trang ƒë·ªÉ App.js c√≥ th·ªÉ ki·ªÉm tra l·∫°i tr·∫°ng th√°i x√°c th·ª±c
      window.location.reload();
    } catch (error) {
      console.error("Logout error:", error);
      Alert.alert("Error", "Failed to logout");
    }
  };

  // Th√™m useEffect m·ªõi ƒë·ªÉ k·∫øt n·ªëi socket khi component mount
  useEffect(() => {
    // Tr√°nh t·∫°o nhi·ªÅu connection 
    if (socketConnectionInitialized.current) return;
    
    Logger.info('Thi·∫øt l·∫≠p k·∫øt n·ªëi socket realtime...');
    
    try {
      // K·∫øt n·ªëi socket khi component mount - nh∆∞ng tr√¨ ho√£n m·ªôt ch√∫t ƒë·ªÉ cho ph√©p UI hi·ªÉn th·ªã tr∆∞·ªõc
      setTimeout(() => {
        const socket = SocketService.connect();
        socketConnectionInitialized.current = true;
        
        // Khi socket k·∫øt n·ªëi th√†nh c√¥ng
        const handleConnect = () => {
          Logger.info('Socket ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng:', socket.id);
          
          // Tham gia ph√≤ng user
          if (userId) {
            const userData = AuthService.getUserData();
            if (userData) {
              Logger.info('Tham gia ph√≤ng user:', userData._id);
              SocketService.joinUserRoom(userData);
            }
          }
          
          // Tham gia cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
          if (activeConversation?._id) {
            Logger.info('Tham gia cu·ªôc tr√≤ chuy·ªán:', activeConversation._id);
            SocketService.joinConversation(activeConversation._id);
          }
          
          // Tham gia t·∫•t c·∫£ c√°c cu·ªôc tr√≤ chuy·ªán - nh∆∞ng tr√¨ ho√£n ƒë·ªÉ kh√¥ng l√†m ch·∫≠m UI
          if (conversations?.length > 0) {
            setTimeout(() => {
              const conversationIds = conversations.map(c => c._id);
              Logger.info('Tham gia t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán:', conversationIds.length);
              SocketService.joinAllConversations(conversationIds);
            }, 1000); // Tr√¨ ho√£n 1 gi√¢y ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc
          }
        };
        
        // Khi socket ng·∫Øt k·∫øt n·ªëi
        const handleDisconnect = (reason) => {
          Logger.info('Socket ƒë√£ ng·∫Øt k·∫øt n·ªëi, l√Ω do:', reason);
          
          // ƒê·∫∑t l·∫°i tr·∫°ng th√°i k·∫øt n·ªëi n·∫øu b·ªã ng·∫Øt b·ªüi server ho·∫∑c l·ªói m·∫°ng
          if (reason === 'io server disconnect' || reason === 'transport close' || reason === 'transport error') {
            // ƒê√°nh d·∫•u l√† c·∫ßn kh·ªüi t·∫°o l·∫°i k·∫øt n·ªëi khi component rerender
            socketConnectionInitialized.current = false;
          }
        };
        
        // Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán socket
        socket.on('connect', handleConnect);
        socket.on('disconnect', handleDisconnect);
        
        // N·∫øu ƒë√£ k·∫øt n·ªëi th√¨ g·ªçi ngay handler
        if (socket.connected) {
          handleConnect();
        }
      }, 500); // Tr√¨ ho√£n 500ms ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc
      
      // Cleanup khi component unmount
      return () => {
        Logger.info('D·ªçn d·∫πp c√°c s·ª± ki·ªán socket');
        if (SocketService.socket) {
          SocketService.socket.off('connect');
          SocketService.socket.off('disconnect');
        }
        
        // Ch·ªâ ƒë·∫∑t l·∫°i flag n·∫øu component th·ª±c s·ª± unmount
        // KH√îNG g·ªçi SocketService.disconnect() ·ªü ƒë√¢y ƒë·ªÉ tr√°nh k·∫øt n·ªëi l·∫°i kh√¥ng c·∫ßn thi·∫øt
        // khi component rerender
        socketConnectionInitialized.current = false;
      };
    } catch (error) {
      Logger.error('L·ªói khi thi·∫øt l·∫≠p k·∫øt n·ªëi socket:', error);
      // ƒê·∫∑t l·∫°i flag n·∫øu c√≥ l·ªói
      socketConnectionInitialized.current = false;
    }
  }, [userId]); // Ch·ªâ ph·ª• thu·ªôc v√†o userId ƒë·ªÉ kh·ªüi t·∫°o m·ªôt l·∫ßn
  
  // useEffect ri√™ng ƒë·ªÉ c·∫≠p nh·∫≠t khi activeConversation thay ƒë·ªïi
  useEffect(() => {
    if (!SocketService.socket || !SocketService.isConnected) return;
    
    // Tham gia cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
    if (activeConversation?._id) {
      console.log('üí¨ Tham gia cu·ªôc tr√≤ chuy·ªán m·ªõi:', activeConversation._id);
      SocketService.joinConversation(activeConversation._id);
      
      // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ xem
      SocketService.markMessageAsSeen(activeConversation._id);
    }
    
    // Th√¥ng b√°o r·∫±ng ng∆∞·ªùi d√πng ƒëang xem tin nh·∫Øn
    if (activeConversation?._id) {
      SocketService.viewingMessages(activeConversation._id);
    }
    
    return () => {
      if (activeConversation?._id) {
        SocketService.stopViewingMessages(activeConversation._id);
      }
    };
  }, [activeConversation]);

  // X·ª≠ l√Ω tr·∫°ng th√°i typing
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('‚å®Ô∏è Thi·∫øt l·∫≠p listener cho tr·∫°ng th√°i typing');
    
    const handleUserTyping = (typingUserId) => {
      console.log('‚å®Ô∏è Ng∆∞·ªùi d√πng ƒëang nh·∫≠p:', typingUserId);
      
      // T√¨m t√™n ng∆∞·ªùi d√πng t·ª´ cu·ªôc tr√≤ chuy·ªán
      let typingUserName = "Ai ƒë√≥";
      
      if (activeConversation?.members) {
        const typingMember = activeConversation.members.find(
          member => member.idUser && member.idUser._id === typingUserId
        );
        
        if (typingMember?.idUser?.name) {
          typingUserName = typingMember.idUser.name;
        }
      }
      
      // C·∫≠p nh·∫≠t state
      setTypingUsers(prev => ({
        ...prev,
        [typingUserId]: typingUserName
      }));
    };
    
    const handleUserStopTyping = (typingUserId) => {
      console.log('üõë Ng∆∞·ªùi d√πng ng·ª´ng nh·∫≠p:', typingUserId);
      
      // C·∫≠p nh·∫≠t state
      setTypingUsers(prev => {
        const newState = { ...prev };
        delete newState[typingUserId];
        return newState;
      });
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onUserTyping(handleUserTyping);
    SocketService.onUserStopTyping(handleUserStopTyping);
    
    // Cleanup
    return () => {
      SocketService.removeListener('user_typing');
      SocketService.removeListener('user_stop_typing');
    };
  }, [activeConversation]);

  // X·ª≠ l√Ω tin nh·∫Øn ƒë√£ xem
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üëÅÔ∏è Thi·∫øt l·∫≠p listener cho tin nh·∫Øn ƒë√£ xem');
    
    const handleMessageSeen = () => {
      console.log('üëÅÔ∏è Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c xem');
      
      // C·∫≠p nh·∫≠t t·∫•t c·∫£ tin nh·∫Øn th√†nh ƒë√£ xem
      setMessages(prev => 
        prev.map(msg => ({
          ...msg,
          seen: true
        }))
      );
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onMessageSeen(handleMessageSeen);
    
    // Cleanup
    return () => {
      SocketService.removeListener('seen_message');
    };
  }, []);

  // X·ª≠ l√Ω cu·ªôc tr√≤ chuy·ªán m·ªõi
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üÜï Thi·∫øt l·∫≠p listener cho cu·ªôc tr√≤ chuy·ªán m·ªõi');
    
    const handleNewConversation = (conversation) => {
      console.log('üÜï C√≥ cu·ªôc tr√≤ chuy·ªán m·ªõi:', conversation);
      
      // Th√™m cu·ªôc tr√≤ chuy·ªán m·ªõi v√†o danh s√°ch
      setConversations(prev => {
        // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i ch∆∞a
        const exists = prev.some(conv => conv._id === conversation._id);
        if (!exists) {
          return [conversation, ...prev];
        }
        return prev;
      });
      
      // Tham gia v√†o cu·ªôc tr√≤ chuy·ªán m·ªõi
      SocketService.joinConversation(conversation._id);
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onNewConversation(handleNewConversation);
    
    // Cleanup
    return () => {
      SocketService.removeListener('new_conversation');
    };
  }, []);

  // X·ª≠ l√Ω s·ª± ki·ªán nh√≥m m·ªõi ƒë∆∞·ª£c t·∫°o
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üë• Thi·∫øt l·∫≠p listener cho nh√≥m m·ªõi ƒë∆∞·ª£c t·∫°o');
    
    const handleGroupCreatedSocket = (newGroup) => {
      console.log('üë• Nh√≥m m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o:', newGroup);
      
      // Ki·ªÉm tra xem nh√≥m n√†y ƒë√£ ƒë∆∞·ª£c th√™m th·ªß c√¥ng ch∆∞a
      const isAlreadyAdded = window.addedGroupIds && window.addedGroupIds.has(newGroup._id);
      
      if (isAlreadyAdded) {
        console.log('üë• Nh√≥m n√†y ƒë√£ ƒë∆∞·ª£c th√™m th·ªß c√¥ng, b·ªè qua');
        return;
      }
      
      // Th√™m nh√≥m m·ªõi v√†o danh s√°ch cu·ªôc tr√≤ chuy·ªán
      setConversations(prev => {
        // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i ch∆∞a
        const exists = prev.some(conv => conv._id === newGroup._id);
        if (!exists) {
          // ƒê∆∞a nh√≥m m·ªõi l√™n ƒë·∫ßu danh s√°ch
          console.log('üë• Th√™m nh√≥m m·ªõi v√†o danh s√°ch cu·ªôc tr√≤ chuy·ªán');
          
          // ƒê√°nh d·∫•u nh√≥m ƒë√£ ƒë∆∞·ª£c th√™m ƒë·ªÉ tr√°nh th√™m l·∫°i t·ª´ socket event kh√°c
          window.addedGroupIds = window.addedGroupIds || new Set();
          window.addedGroupIds.add(newGroup._id);
          
          // Thi·∫øt l·∫≠p timeout ƒë·ªÉ x√≥a ID sau 5 gi√¢y
          setTimeout(() => {
            if (window.addedGroupIds && window.addedGroupIds.has(newGroup._id)) {
              window.addedGroupIds.delete(newGroup._id);
            }
          }, 5000);
          
          return [newGroup, ...prev];
        }
        console.log('üë• Nh√≥m ƒë√£ t·ªìn t·∫°i trong danh s√°ch, b·ªè qua');
        return prev;
      });
      
      // Tham gia v√†o nh√≥m m·ªõi
      SocketService.joinConversation(newGroup._id);
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onGroupCreated(handleGroupCreatedSocket);
    
    // Cleanup
    return () => {
      SocketService.removeListener('group_created');
    };
  }, [conversations]);

  // X·ª≠ l√Ω s·ª± ki·ªán ghim v√† b·ªè ghim tin nh·∫Øn
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üìå Thi·∫øt l·∫≠p listener cho ghim/b·ªè ghim tin nh·∫Øn');
    
    const handleMessagePinned = (data) => {
      if (!data || !data.message || !data.conversation) {
        console.warn('‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ s·ª± ki·ªán message_pinned');
        return;
      }
      
      console.log(`üìå Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ghim: ${data.message._id}`);
      
      // C·∫≠p nh·∫≠t tin nh·∫Øn trong danh s√°ch tin nh·∫Øn hi·ªán t·∫°i
      if (activeConversation && activeConversation._id === data.conversation.toString()) {
        // Update the messages array
        setMessages(prevMessages => 
          prevMessages.map(msg => 
            msg._id === data.message._id ? {...msg, isPinned: true, pinnedBy: data.message.pinnedBy, pinnedAt: data.message.pinnedAt} : msg
          )
        );
        
        // Update the active conversation to reflect the pinned message
        // This is crucial for components like PinnedMessageBanner to update immediately
        setActiveConversation(prevConversation => ({
          ...prevConversation,
          pinnedMessages: prevConversation.pinnedMessages 
            ? [data.message, ...prevConversation.pinnedMessages]
            : [data.message]
        }));
        
        // Th√™m th√¥ng b√°o h·ªá th·ªëng n·∫øu c√≥
        if (data.systemMessage) {
          // Ki·ªÉm tra xem th√¥ng b√°o n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
          setMessages(prevMessages => {
            // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng b√°o t∆∞∆°ng t·ª± ch∆∞a (trong kho·∫£ng 2 gi√¢y g·∫ßn ƒë√¢y)
            const recentSystemMessage = prevMessages.find(msg => 
              msg.type === 'system' && 
              msg.systemType === 'pin_message' &&
              msg.createdAt && 
              (new Date().getTime() - new Date(msg.createdAt).getTime() < 2000)
            );
            
            // N·∫øu ƒë√£ c√≥ th√¥ng b√°o t∆∞∆°ng t·ª±, kh√¥ng th√™m n·ªØa
            if (recentSystemMessage) {
              return prevMessages;
            }
            
            // N·∫øu ch∆∞a c√≥, th√™m th√¥ng b√°o m·ªõi
            return [...prevMessages, data.systemMessage];
          });
          
          // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi
          setTimeout(() => {
            messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
          }, 100);
        }
      }
    };
    
    const handleMessageUnpinned = (data) => {
      if (!data || !data.messageId || !data.conversation) {
        console.warn('‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ s·ª± ki·ªán message_unpinned');
        return;
      }
      
      console.log(`üìå Tin nh·∫Øn ƒë√£ b·ªè ghim: ${data.messageId}`);
      console.log('üìå Chi ti·∫øt data b·ªè ghim:', JSON.stringify(data));
      
      // C·∫≠p nh·∫≠t tin nh·∫Øn trong danh s√°ch tin nh·∫Øn hi·ªán t·∫°i
      if (activeConversation && activeConversation._id === data.conversation.toString()) {
        console.log('üìå C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn trong danh s√°ch tin nh·∫Øn');
        // Update the messages array
        setMessages(prevMessages => 
          prevMessages.map(msg => 
            msg._id === data.messageId ? {...msg, isPinned: false, pinnedBy: null, pinnedAt: null} : msg
          )
        );
        
        // Update the active conversation to reflect the unpinned message
        // This is crucial for components like PinnedMessageBanner to update immediately
        setActiveConversation(prevConversation => {
          console.log('üìå C·∫≠p nh·∫≠t activeConversation.pinnedMessages');
          console.log('üìå Tr∆∞·ªõc khi c·∫≠p nh·∫≠t:', prevConversation.pinnedMessages?.length || 0, 'tin nh·∫Øn ƒë√£ ghim');
          
          if (prevConversation.pinnedMessages) {
            const updatedConversation = {
              ...prevConversation,
              pinnedMessages: prevConversation.pinnedMessages.filter(
                msg => msg._id !== data.messageId
              )
            };
            
            console.log('üìå Sau khi c·∫≠p nh·∫≠t:', updatedConversation.pinnedMessages?.length || 0, 'tin nh·∫Øn ƒë√£ ghim');
            return updatedConversation;
          }
          return prevConversation;
        });
        
        // Th√™m th√¥ng b√°o h·ªá th·ªëng n·∫øu c√≥
        if (data.systemMessage) {
          // Ki·ªÉm tra xem th√¥ng b√°o n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
          setMessages(prevMessages => {
            // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng b√°o t∆∞∆°ng t·ª± ch∆∞a (trong kho·∫£ng 2 gi√¢y g·∫ßn ƒë√¢y)
            const recentSystemMessage = prevMessages.find(msg => 
              msg.type === 'system' && 
              msg.systemType === 'unpin_message' &&
              msg.createdAt && 
              (new Date().getTime() - new Date(msg.createdAt).getTime() < 2000)
            );
            
            // N·∫øu ƒë√£ c√≥ th√¥ng b√°o t∆∞∆°ng t·ª±, kh√¥ng th√™m n·ªØa
            if (recentSystemMessage) {
              return prevMessages;
            }
            
            // C·∫≠p nh·∫≠t n·ªôi dung th√¥ng b√°o n·∫øu hi·ªÉn th·ªã "ai ƒë√≥"
            const updatedSystemMessage = {...data.systemMessage};
            if (updatedSystemMessage.content && updatedSystemMessage.content.includes('Ai ƒë√≥')) {
              const currentUserName = user?.name || AuthService.getUserData()?.name || "B·∫°n";
              updatedSystemMessage.content = updatedSystemMessage.content.replace('Ai ƒë√≥', currentUserName);
            }
            
            // N·∫øu ch∆∞a c√≥, th√™m th√¥ng b√°o m·ªõi
            return [...prevMessages, updatedSystemMessage];
          });
          
          // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi
          setTimeout(() => {
            messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
          }, 100);
        }
      }
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onMessagePinned(handleMessagePinned);
    SocketService.onMessageUnpinned(handleMessageUnpinned);
    
    // Cleanup
    return () => {
      SocketService.removeListener('message_pinned');
      SocketService.removeListener('message_unpinned');
    };
  }, [activeConversation, user]);
  
  // X·ª≠ l√Ω c·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üîÑ Thi·∫øt l·∫≠p listener cho c·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán');
    
    const handleUpdateConversationList = (data) => {
      if (!data || !data.conversation) {
        console.warn('‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ s·ª± ki·ªán update_conversation_list');
        return;
      }
      
      console.log(`üîÑ C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán: ${data.conversation._id}, tin nh·∫Øn m·ªõi lo·∫°i: ${data.newMessage?.type || 'kh√¥ng x√°c ƒë·ªãnh'}`);
      
      // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán
      setConversations(prev => {
        // T√¨m v·ªã tr√≠ c·ªßa cu·ªôc tr√≤ chuy·ªán trong danh s√°ch hi·ªán t·∫°i
        const index = prev.findIndex(conv => conv._id === data.conversation._id);
        
        // N·∫øu kh√¥ng t√¨m th·∫•y, th√™m cu·ªôc tr√≤ chuy·ªán m·ªõi v√†o ƒë·∫ßu danh s√°ch
        if (index === -1) {
          console.log('‚ú® Th√™m cu·ªôc tr√≤ chuy·ªán m·ªõi v√†o ƒë·∫ßu danh s√°ch');
          return [data.conversation, ...prev];
        }
        
        // T·∫°o b·∫£n sao c·ªßa m·∫£ng hi·ªán t·∫°i
        const updatedConversations = [...prev];
        const existingConv = updatedConversations[index];
        
        // Lu√¥n gi·ªØ nguy√™n th√¥ng tin members t·ª´ phi√™n b·∫£n c≈©
        const updatedConversation = {
          ...data.conversation,
          members: existingConv.members || data.conversation.members,
          // Gi·ªØ nguy√™n c√°c th√¥ng tin quan tr·ªçng kh√°c
          admin: existingConv.admin || data.conversation.admin,
          admin2: existingConv.admin2 || data.conversation.admin2
        };
        
        // N·∫øu l√† chat ƒë∆°n, gi·ªØ nguy√™n t√™n cu·ªôc tr√≤ chuy·ªán
        if (data.conversation.type === 'private') {
          updatedConversation.name = existingConv.name;
        }
        
        updatedConversations[index] = updatedConversation;
        
        // ƒê∆∞a cu·ªôc tr√≤ chuy·ªán v·ª´a c·∫≠p nh·∫≠t l√™n ƒë·∫ßu danh s√°ch
        console.log(`üîù ƒê∆∞a cu·ªôc tr√≤ chuy·ªán ${data.conversation._id} l√™n ƒë·∫ßu danh s√°ch`);
        const conversationToMove = updatedConversations.splice(index, 1)[0];
        
        return [conversationToMove, ...updatedConversations];
      });
      
      // N·∫øu ƒëang ·ªü trong cu·ªôc tr√≤ chuy·ªán n√†y, c·∫≠p nh·∫≠t active conversation
      if (activeConversation && activeConversation._id === data.conversation._id) {
        // Lu√¥n gi·ªØ nguy√™n th√¥ng tin members t·ª´ phi√™n b·∫£n c≈©
        setActiveConversation(prev => ({
          ...prev,
          lastMessage: data.conversation.lastMessage,
          // Gi·ªØ nguy√™n c√°c th√¥ng tin quan tr·ªçng
          members: prev.members || data.conversation.members,
          admin: prev.admin || data.conversation.admin,
          admin2: prev.admin2 || data.conversation.admin2,
          // ƒê·ªëi v·ªõi chat ƒë∆°n, gi·ªØ nguy√™n t√™n
          name: data.conversation.type === 'private' ? prev.name : data.conversation.name,
        }));
        
        console.log('üîÑ C·∫≠p nh·∫≠t activeConversation v·ªõi tin nh·∫Øn m·ªõi nh∆∞ng gi·ªØ nguy√™n th√¥ng tin members');
      }
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onUpdateConversationList(handleUpdateConversationList);
    
    // Listen for avatar updates
    const handleAvatarUpdated = (event) => {
      setUser(prevUser => ({
        ...prevUser,
        avatar: event.detail.avatar
      }));
    };
    
    // Listen for socket avatar updates from other users
    const handleSocketAvatarUpdated = (data) => {
      console.log('üë§ Nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t avatar t·ª´ user kh√°c:', data.userId);
      
      // Skip if it's our own update (already handled by custom event)
      if (data.userId === userId) return;
      
      // Update avatar in conversations list for this user
      setConversations(prev => 
        prev.map(conv => {
          // Process both private conversations and group conversations
          // For private chats: Update if the other participant is the user who changed their avatar
          if (conv.type === 'private') {
            const updatedMembers = conv.members?.map(member => {
              if (member.idUser && 
                  ((typeof member.idUser === 'object' && member.idUser._id === data.userId) || 
                   member.idUser === data.userId)) {
                // Update this member's avatar
                return {
                  ...member,
                  idUser: typeof member.idUser === 'object' 
                    ? { ...member.idUser, avatar: data.avatarUrl }
                    : member.idUser
                };
              }
              return member;
            });
            
            if (updatedMembers) {
              return { ...conv, members: updatedMembers };
            }
          }
          // For group chats: Update the avatar of any member who matches the updated user
          else if (conv.type === 'group' && conv.members) {
            const updatedMembers = conv.members.map(member => {
              if (member.idUser && 
                  ((typeof member.idUser === 'object' && member.idUser._id === data.userId) || 
                   member.idUser === data.userId)) {
                // Update this member's avatar
                return {
                  ...member,
                  idUser: typeof member.idUser === 'object' 
                    ? { ...member.idUser, avatar: data.avatarUrl }
                    : member.idUser
                };
              }
              return member;
            });
            
            // Also update admin/admin2 avatar if they match the updated user
            let updatedConv = { ...conv, members: updatedMembers };
            
            // Update admin avatar if needed
            if (updatedConv.admin && 
                ((typeof updatedConv.admin === 'object' && updatedConv.admin._id === data.userId) ||
                 updatedConv.admin === data.userId)) {
              updatedConv.admin = typeof updatedConv.admin === 'object'
                ? { ...updatedConv.admin, avatar: data.avatarUrl }
                : updatedConv.admin;
            }
            
            // Update admin2 avatar if needed
            if (updatedConv.admin2 && 
                ((typeof updatedConv.admin2 === 'object' && updatedConv.admin2._id === data.userId) ||
                 updatedConv.admin2 === data.userId)) {
              updatedConv.admin2 = typeof updatedConv.admin2 === 'object'
                ? { ...updatedConv.admin2, avatar: data.avatarUrl }
                : updatedConv.admin2;
            }
            
            return updatedConv;
          }
          
          return conv;
        })
      );
      
      // Also update the active conversation if it contains the updated user
      if (activeConversation) {
        setActiveConversation(prev => {
          // Skip if not valid conversation
          if (!prev || !prev.members) return prev;
          
          // Create a copy of the conversation
          let updatedConversation = { ...prev };
          
          // Update members avatars
          if (updatedConversation.members) {
            updatedConversation.members = updatedConversation.members.map(member => {
              if (member.idUser && 
                  ((typeof member.idUser === 'object' && member.idUser._id === data.userId) || 
                   member.idUser === data.userId)) {
                // Update this member's avatar
                return {
                  ...member,
                  idUser: typeof member.idUser === 'object' 
                    ? { ...member.idUser, avatar: data.avatarUrl }
                    : member.idUser
                };
              }
              return member;
            });
          }
          
          // For group conversations, also update admin/admin2 if needed
          if (updatedConversation.type === 'group') {
            // Update admin avatar if needed
            if (updatedConversation.admin && 
                ((typeof updatedConversation.admin === 'object' && updatedConversation.admin._id === data.userId) ||
                 updatedConversation.admin === data.userId)) {
              updatedConversation.admin = typeof updatedConversation.admin === 'object'
                ? { ...updatedConversation.admin, avatar: data.avatarUrl }
                : updatedConversation.admin;
            }
            
            // Update admin2 avatar if needed
            if (updatedConversation.admin2 && 
                ((typeof updatedConversation.admin2 === 'object' && updatedConversation.admin2._id === data.userId) ||
                 updatedConversation.admin2 === data.userId)) {
              updatedConversation.admin2 = typeof updatedConversation.admin2 === 'object'
                ? { ...updatedConversation.admin2, avatar: data.avatarUrl }
                : updatedConversation.admin2;
            }
          }
          
          return updatedConversation;
        });
      }
      
      // Also update other UI elements displaying user avatars if needed
      // For example, avatars in message bubbles
      setMessages(prev => {
        return prev.map(message => {
          // Check if this message is from the user who updated their avatar
          if (message.originalSender && 
              ((typeof message.sender === 'object' && message.sender._id === data.userId) ||
               message.sender === data.userId)) {
            
            return {
              ...message,
              originalSender: {
                ...message.originalSender,
                avatar: data.avatarUrl
              }
            };
          }
          return message;
        });
      });
    };
    
    // Add event listener for avatar updates
    window.addEventListener('user-avatar-updated', handleAvatarUpdated);
    
    // Register socket listener for avatar updates from other users
    SocketService.onAvatarUpdated(handleSocketAvatarUpdated);
    
    // Cleanup
    return () => {
      SocketService.removeListener('update_conversation_list');
      window.removeEventListener('user-avatar-updated', handleAvatarUpdated);
      SocketService.removeListener('avatar_updated');
    };
  }, [activeConversation]);

  // H√†m x·ª≠ l√Ω khi nh·∫≠p tin nh·∫Øn (ƒë·ªÉ g·ª≠i tr·∫°ng th√°i typing)
  const handleMessageTyping = (e) => {
    const input = e.target.value;
    setNewMessage(input);
    
    // Ch·ªâ g·ª≠i s·ª± ki·ªán typing n·∫øu ƒëang trong m·ªôt cu·ªôc tr√≤ chuy·ªán
    if (!activeConversation?._id) return;
    
    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒëang g√µ @
    if (input.endsWith('@') || (input.includes('@') && input.lastIndexOf('@') === input.length - 1)) {
      // Hi·ªÉn th·ªã g·ª£i √Ω @AIGemini
      setShowAIMention(true);
      
      // T√≠nh to√°n v·ªã tr√≠ hi·ªÉn th·ªã g·ª£i √Ω
      if (inputRef.current) {
        const inputRect = inputRef.current.getBoundingClientRect();
        setMentionPosition({
          top: inputRect.top - 40, // Hi·ªÉn th·ªã ph√≠a tr√™n input
          left: inputRect.left
        });
      }
    } else {
      // ·∫®n g·ª£i √Ω n·∫øu kh√¥ng g√µ @
      setShowAIMention(false);
    }
    
    // Thi·∫øt l·∫≠p is typing
    const isNowTyping = input.length > 0;
    
    // S·ª≠ d·ª•ng debounce ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng s·ª± ki·ªán g·ª≠i ƒëi
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    
    // Ki·ªÉm tra n·∫øu ƒë√£ g·ª≠i s·ª± ki·ªán g·∫ßn ƒë√¢y, kh√¥ng g·ª≠i n·ªØa
    const now = Date.now();
    const canSendTypingEvent = now - typingLastSentRef.current > typingMinInterval;
    
    if (isNowTyping) {
      // N·∫øu ƒëang typing v√† ch∆∞a g·ª≠i event ho·∫∑c ƒë√£ qu√° th·ªùi gian debounce
      if (canSendTypingEvent && !isTyping) {
        // G·ª≠i tr·∫°ng th√°i typing v√† c·∫≠p nh·∫≠t timestamp
        console.log('‚å®Ô∏è G·ª≠i tr·∫°ng th√°i typing');
        SocketService.sendTypingStatus(activeConversation._id, userId);
        typingLastSentRef.current = now;
        setIsTyping(true);
      }
      
      // ƒê·∫∑t timeout ƒë·ªÉ g·ª≠i stop_typing sau m·ªôt kho·∫£ng th·ªùi gian kh√¥ng ƒë√°nh
      typingTimeoutRef.current = setTimeout(() => {
        if (isTyping) {
          console.log('‚å®Ô∏è G·ª≠i tr·∫°ng th√°i stop_typing sau th·ªùi gian kh√¥ng ƒë√°nh');
          SocketService.sendStopTypingStatus(activeConversation._id, userId);
          setIsTyping(false);
        }
      }, 3000);
    } else if (isTyping) {
      // N·∫øu kh√¥ng c√≤n ƒëang nh·∫≠p m√† tr∆∞·ªõc ƒë√≥ ƒëang typing
      console.log('‚å®Ô∏è G·ª≠i tr·∫°ng th√°i stop_typing v√¨ kh√¥ng c√≤n nh·∫≠p');
      SocketService.sendStopTypingStatus(activeConversation._id, userId);
      setIsTyping(false);
    }
    
    // L∆∞u nh√°p tin nh·∫Øn v√†o localStorage
    if (activeConversation?._id) {
      const key = `draft-${activeConversation._id}`;
      if (input.trim()) {
        localStorage.setItem(key, input);
      } else {
        localStorage.removeItem(key);
      }
    }
  };

  // Th√™m CSS cho hi·ªáu ·ª©ng typing
  const typingAnimationStyle = `
    .typing-animation {
      display: inline-flex;
      align-items: center;
      margin-left: 8px;
    }
    
    .typing-animation .dot {
      display: inline-block;
      width: 6px;
      height: 6px;
      border-radius: 50%;
      margin-right: 3px;
      background: #aaa;
      animation: typing-dot 1.4s infinite ease-in-out both;
    }
    
    .typing-animation .dot:nth-child(1) {
      animation-delay: -0.32s;
    }
    
    .typing-animation .dot:nth-child(2) {
      animation-delay: -0.16s;
    }
    
    @keyframes typing-dot {
      0%, 80%, 100% { 
        transform: scale(0);
      }
      40% { 
        transform: scale(1);
      }
    }
  `;

  // Th√™m style v√†o head
  useEffect(() => {
    const styleElement = document.createElement('style');
    styleElement.textContent = typingAnimationStyle;
    document.head.appendChild(styleElement);

    return () => {
      document.head.removeChild(styleElement);
    };
  }, []);

  // Th√™m event listeners cho thu h·ªìi v√† xo√° tin nh·∫Øn
  useEffect(() => {
    // ... existing socket event bindings ...
    
    const handleMessageRevoked = (data) => {
      console.log('üìù Tin nh·∫Øn ƒë√£ b·ªã thu h·ªìi:', data);
      const { messageId, conversationId, type } = data;
      
      // Ch·ªâ x·ª≠ l√Ω n·∫øu messageId v√† conversationId ƒë√∫ng v·ªõi cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      if (conversationId === activeConversation?._id) {
        setMessages(prevMessages => 
          prevMessages.map(msg => {
            if (msg._id === messageId) {
              console.log('üîÑ ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ thu h·ªìi:', 
                { id: messageId, type: type || msg.type || 'text' });
              
                  return {
                ...msg, 
                isRevoked: true,
                // Gi·ªØ l·∫°i lo·∫°i tin nh·∫Øn ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o thu h·ªìi ph√π h·ª£p
                type: type || msg.type || 'text',
                // Gi·ªØ l·∫°i c√°c thu·ªôc t√≠nh quan tr·ªçng kh√°c
                fileUrl: msg.fileUrl, // Gi·ªØ l·∫°i ƒë·ªÉ nh·∫≠n bi·∫øt ƒë√¢y l√† tin nh·∫Øn ·∫£nh/file
                fileName: msg.fileName
              };
            }
            return msg;
          })
        );
      }
    };
    
    const handleMessageDeleted = (data) => {
      console.log('üóëÔ∏è Tin nh·∫Øn ƒë√£ b·ªã xo√°:', data);
      const { messageId, conversationId, forUser } = data;
      
      // Ch·ªâ x·ª≠ l√Ω n·∫øu tin nh·∫Øn thu·ªôc cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i v√† d√†nh cho ng∆∞·ªùi d√πng hi·ªán t·∫°i
      if (conversationId === activeConversation?._id && forUser === userId) {
        // X√≥a tin nh·∫Øn kh·ªèi danh s√°ch hi·ªÉn th·ªã
        setMessages(prevMessages => 
          prevMessages.filter(msg => msg._id !== messageId)
        );
      }
    };
    
    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán thu h·ªìi v√† xo√° tin nh·∫Øn
    SocketService.onMessageRevoked(handleMessageRevoked);
    SocketService.onMessageDeleted(handleMessageDeleted);
    
    return () => {
      // ... existing cleanup ...
      SocketService.removeListener('message_revoked');
      SocketService.removeListener('message_deleted');
    };
  }, [activeConversation]);
  
  // X·ª≠ l√Ω hi·ªÉn th·ªã menu ng·ªØ c·∫£nh cho tin nh·∫Øn
  const handleMessageContextMenu = (event, message) => {
    // Cho ph√©p hi·ªÉn th·ªã menu cho t·∫•t c·∫£ tin nh·∫Øn (c·∫£ c·ªßa m√¨nh v√† ng∆∞·ªùi kh√°c)
    event.preventDefault();
    event.stopPropagation();
    setMessageContextMenu(event.currentTarget);
    setSelectedMessage(message);
  };
  
  // ƒê√≥ng menu ng·ªØ c·∫£nh tin nh·∫Øn
  const handleMessageContextMenuClose = () => {
    setMessageContextMenu(null);
    setSelectedMessage(null);
  };
  
  // X·ª≠ l√Ω chuy·ªÉn ti·∫øp tin nh·∫Øn
  const handleForwardMessage = () => {
    setForwardDialogOpen(true);
    setMessageContextMenu(null);
  };
  
  // X·ª≠ l√Ω ƒë√≥ng dialog chuy·ªÉn ti·∫øp tin nh·∫Øn
  const handleCloseForwardDialog = () => {
    setForwardDialogOpen(false);
    setTargetConversation(null);
    setSelectedMessage(null);
  };

  // Group chat handlers
  const handleCreateGroup = () => {
    setCreateGroupDialogOpen(true);
    handleMenuClose();
  };

  const handleGroupCreated = (newConversation) => {
    console.log('üîÑ X·ª≠ l√Ω nh√≥m m·ªõi ƒë∆∞·ª£c t·∫°o:', newConversation._id);
    
    // ƒê√°nh d·∫•u nh√≥m ƒë√£ ƒë∆∞·ª£c th√™m ƒë·ªÉ tr√°nh th√™m l·∫°i t·ª´ socket event
    window.addedGroupIds = window.addedGroupIds || new Set();
    window.addedGroupIds.add(newConversation._id);
    
    // Thi·∫øt l·∫≠p timeout ƒë·ªÉ x√≥a ID sau 10 gi√¢y
    setTimeout(() => {
      if (window.addedGroupIds && window.addedGroupIds.has(newConversation._id)) {
        window.addedGroupIds.delete(newConversation._id);
        console.log('üîÑ ƒê√£ x√≥a ID nh√≥m kh·ªèi danh s√°ch theo d√µi:', newConversation._id);
      }
    }, 10000);
    
    // Th√™m nh√≥m m·ªõi v√†o danh s√°ch cu·ªôc tr√≤ chuy·ªán
    setConversations(prev => {
      // Ki·ªÉm tra xem ƒë√£ t·ªìn t·∫°i ch∆∞a
      const exists = prev.some(conv => conv._id === newConversation._id);
      if (exists) {
        console.log('üîÑ Nh√≥m ƒë√£ t·ªìn t·∫°i trong danh s√°ch, kh√¥ng th√™m l·∫°i');
        return prev;
      }
      console.log('üîÑ Th√™m nh√≥m m·ªõi v√†o ƒë·∫ßu danh s√°ch cu·ªôc tr√≤ chuy·ªán');
      return [newConversation, ...prev];
    });
    
    // Select the new conversation
    handleConversationSelect(newConversation);
    
    // Close the dialog
    setCreateGroupDialogOpen(false);
  };

  const handleOpenGroupMembers = () => {
    if (activeConversation && activeConversation.type === 'group') {
      // Log c√°c th√¥ng tin quan tr·ªçng ƒë·ªÉ debug
      console.log('Current active conversation:', activeConversation);
      
      const adminId = activeConversation.admin?._id || activeConversation.admin || 
                     localStorage.getItem(`adminId_${activeConversation._id}`) || 
                     localStorage.getItem('adminId');
      const admin2Id = activeConversation.admin2?._id || activeConversation.admin2 || 
                     localStorage.getItem(`admin2Id_${activeConversation._id}`) || 
                     localStorage.getItem('admin2Id');
                     
      console.log('Admin check - Current user:', userId);
      console.log('Admin check - Admin ID:', adminId);
      console.log('Admin check - Admin2 ID:', admin2Id);
      
      setGroupMembersDialogOpen(true);
      handleMenuClose();
    }
  };

  const handleEditGroup = () => {
    if (activeConversation && activeConversation.type === 'group') {
      // Ki·ªÉm tra quy·ªÅn admin tr∆∞·ªõc khi m·ªü dialog ch·ªânh s·ª≠a nh√≥m
      if (isGroupAdmin(activeConversation) || isGroupAdmin2(activeConversation)) {
        setEditGroupDialogOpen(true);
        handleMenuClose();
      } else {
        Alert.alert("Th√¥ng b√°o", "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a nh√≥m n√†y");
      }
    }
  };

  const handleGroupUpdated = (updatedConversation) => {
    console.log('üîÑ Group updated:', updatedConversation);
    console.log('Admin:', updatedConversation.admin);
    console.log('Admin2:', updatedConversation.admin2);

    // L∆∞u th√¥ng tin admin v√†o localStorage khi nh√≥m ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    if (updatedConversation.type === 'group') {
      if (updatedConversation.admin) {
        const adminId = updatedConversation.admin._id || updatedConversation.admin;
        localStorage.setItem(`adminId_${updatedConversation._id}`, adminId);
        localStorage.setItem('adminId', adminId);
        console.log('üìù Stored admin ID in localStorage:', adminId);
      }
      
      if (updatedConversation.admin2) {
        const admin2Id = updatedConversation.admin2._id || updatedConversation.admin2;
        localStorage.setItem(`admin2Id_${updatedConversation._id}`, admin2Id);
        localStorage.setItem('admin2Id', admin2Id);
        console.log('üìù Stored admin2 ID in localStorage:', admin2Id);
      }
    }
    
    // Update the conversation in the list
    setConversations(prev => 
      prev.map(conv => 
        conv._id === updatedConversation._id ? updatedConversation : conv
      )
    );
    
    // Update active conversation if it's the one that was updated
    if (activeConversation && activeConversation._id === updatedConversation._id) {
      setActiveConversation(updatedConversation);
    }
    
    // Close any open dialogs
    setEditGroupDialogOpen(false);
  };

  const handleMemberAdded = (updatedConversation) => {
    console.log('üë§ Member added to group:', updatedConversation);
    console.log('Admin:', updatedConversation.admin);
    console.log('Admin2:', updatedConversation.admin2);
    
    // L∆∞u th√¥ng tin admin v√†o localStorage
    if (updatedConversation.type === 'group') {
      if (updatedConversation.admin) {
        const adminId = updatedConversation.admin._id || updatedConversation.admin;
        localStorage.setItem(`adminId_${updatedConversation._id}`, adminId);
        localStorage.setItem('adminId', adminId);
      }
      
      if (updatedConversation.admin2) {
        const admin2Id = updatedConversation.admin2._id || updatedConversation.admin2;
        localStorage.setItem(`admin2Id_${updatedConversation._id}`, admin2Id);
        localStorage.setItem('admin2Id', admin2Id);
      }
    }
    
    // Update conversation in list
    setConversations(prev =>
      prev.map(conv =>
        conv._id === updatedConversation._id ? updatedConversation : conv
      )
    );

    // Update active conversation if it's the one that was updated
    if (activeConversation && activeConversation._id === updatedConversation._id) {
      setActiveConversation(updatedConversation);
    }

    // Add system message about new member
    const systemMessage = {
      type: 'system',
      systemType: 'member_added',
      content: `${updatedConversation.lastMessage.content}`,
      conversationId: updatedConversation._id,
      createdAt: new Date().toISOString()
    };

    setMessages(prev => [...prev, systemMessage]);
  };

  const handleMemberRemoved = (updatedConversation) => {
    console.log('üë§ Member removed from group:', updatedConversation);
    console.log('Admin:', updatedConversation.admin);
    console.log('Admin2:', updatedConversation.admin2);
    
    // L∆∞u th√¥ng tin admin v√†o localStorage
    if (updatedConversation.type === 'group') {
      if (updatedConversation.admin) {
        const adminId = updatedConversation.admin._id || updatedConversation.admin;
        localStorage.setItem(`adminId_${updatedConversation._id}`, adminId);
        localStorage.setItem('adminId', adminId);
      }
      
      if (updatedConversation.admin2) {
        const admin2Id = updatedConversation.admin2._id || updatedConversation.admin2;
        localStorage.setItem(`admin2Id_${updatedConversation._id}`, admin2Id);
        localStorage.setItem('admin2Id', admin2Id);
      } else {
        // N·∫øu kh√¥ng c√≥ admin2, x√≥a kh·ªèi localStorage
        localStorage.removeItem(`admin2Id_${updatedConversation._id}`);
        localStorage.removeItem('admin2Id');
      }
    }
    
    // Update conversation in list
    setConversations(prev =>
      prev.map(conv =>
        conv._id === updatedConversation._id ? updatedConversation : conv
      )
    );

    // Update active conversation if it's the one that was updated
    if (activeConversation && activeConversation._id === updatedConversation._id) {
      setActiveConversation(updatedConversation);
    }

    // Determine appropriate content for system message
    let messageContent = 'M·ªôt th√†nh vi√™n ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m';
    
    // Only try to access lastMessage.content if it exists
    if (updatedConversation.lastMessage && updatedConversation.lastMessage.content) {
      messageContent = updatedConversation.lastMessage.content;
    }

    // Add system message about member removal
    const systemMessage = {
      type: 'system',
      systemType: 'member_removed',
      content: messageContent,
      conversationId: updatedConversation._id,
      createdAt: new Date().toISOString()
    };

    setMessages(prev => [...prev, systemMessage]);
  };

  const handleLeaveGroup = async (groupId) => {
    try {
      await ChatService.leaveGroup(groupId);
      
      // Remove the group from conversations list
      setConversations(prev => prev.filter(conv => conv._id !== groupId));
      
      // If active conversation is the one we're leaving, clear it
      if (activeConversation && activeConversation._id === groupId) {
        setActiveConversation(null);
      }
      
      // Close the dialog
      setGroupMembersDialogOpen(false);
    } catch (error) {
      console.error('Error leaving group:', error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ r·ªùi nh√≥m chat');
    }
  };

  const handleDeleteGroup = async (groupId) => {
    try {
      await ChatService.deleteGroup(groupId);
      
      // Remove the group from conversations list
      setConversations(prev => prev.filter(conv => conv._id !== groupId));
      
      // If active conversation is the one we're deleting, clear it
      if (activeConversation && activeConversation._id === groupId) {
        setActiveConversation(null);
      }
      
      // Close the dialog
      setGroupMembersDialogOpen(false);
    } catch (error) {
      console.error('Error deleting group:', error);
      Alert.alert('Error', 'Failed to delete group chat');
    }
  };



  const handleGroupLeft = (conversationId) => {
    // Remove conversation from list
    setConversations(prev =>
      prev.filter(conv => conv._id !== conversationId)
    );

    // Clear active conversation if it's the one that was left
    if (activeConversation && activeConversation._id === conversationId) {
      setActiveConversation(null);
      setMessages([]);
    }

    // Add system message about leaving group
    const systemMessage = {
      type: 'system',
      systemType: 'group_left',
      content: 'B·∫°n ƒë√£ r·ªùi kh·ªèi nh√≥m',
      conversationId: conversationId,
      createdAt: new Date().toISOString()
    };

    setMessages(prev => [...prev, systemMessage]);
    
    // Close the dialog
    setGroupMembersDialogOpen(false);
  };

  const handleGroupDeleted = (conversationId) => {
    // Remove conversation from list
    setConversations(prev =>
      prev.filter(conv => conv._id !== conversationId)
    );

    // Clear active conversation if it's the one that was deleted
    if (activeConversation && activeConversation._id === conversationId) {
      setActiveConversation(null);
      setMessages([]);
    }

    // Add system message about group deletion
    const systemMessage = {
      type: 'system',
      systemType: 'group_deleted',
      content: 'Nh√≥m ƒë√£ b·ªã x√≥a',
      conversationId: conversationId,
      createdAt: new Date().toISOString()
    };

    setMessages(prev => [...prev, systemMessage]);
    
    // Close the dialog
    setGroupMembersDialogOpen(false);
  };

  // X·ª≠ l√Ω ch·ªçn cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn
  const handleSelectForwardConversation = (conversation) => {
    setTargetConversation(conversation);
  };
  
  // X·ª≠ l√Ω x√°c nh·∫≠n chuy·ªÉn ti·∫øp tin nh·∫Øn
  const handleConfirmForward = async () => {
    if (!selectedMessage || !targetConversation) return;
    
    try {
      // L·∫•y token t·ª´ AuthService thay v√¨ s·ª≠ d·ª•ng h√†m getToken kh√¥ng t·ªìn t·∫°i
      const userData = AuthService.getUserData();
      const token = userData?.token;
      
      // S·ª≠ d·ª•ng Socket ƒë·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn
      SocketService.forwardMessage(
        selectedMessage._id,
        targetConversation._id,
        userId
      );
      
      // ƒê√≥ng dialog
      setForwardDialogOpen(false);
      setTargetConversation(null);
    } catch (error) {
      console.error("Error forwarding message:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn");
    }
  };
  
  // X·ª≠ l√Ω khi chuy·ªÉn ti·∫øp tin nh·∫Øn th√†nh c√¥ng
  const handleForwardMessageSuccess = (message) => {
    console.log("‚úÖ Tin nh·∫Øn chuy·ªÉn ti·∫øp th√†nh c√¥ng:", message);
    Alert.alert("Th√†nh c√¥ng", "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ti·∫øp");
    
    // Ch·ªâ c·∫≠p nh·∫≠t giao di·ªán n·∫øu ƒëang ·ªü trong cu·ªôc tr√≤ chuy·ªán ƒë√≠ch
    if (activeConversation && activeConversation._id.toString() === message.idConversation.toString()) {
      console.log("üìù ƒêang hi·ªÉn th·ªã tin nh·∫Øn chuy·ªÉn ti·∫øp trong cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i");
      setMessages(prevMessages => [...prevMessages, message]);
      
      // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
      setTimeout(() => {
        if (messagesEndRef.current) {
          messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
      }, 100);
    } else {
      console.log("‚ÑπÔ∏è Kh√¥ng hi·ªÉn th·ªã tin nh·∫Øn chuy·ªÉn ti·∫øp v√¨ kh√¥ng ·ªü trong cu·ªôc tr√≤ chuy·ªán ƒë√≠ch");
    }
  };
  
  // X·ª≠ l√Ω khi chuy·ªÉn ti·∫øp tin nh·∫Øn g·∫∑p l·ªói
  const handleForwardMessageError = (error) => {
    console.error("Forward message error:", error);
    Alert.alert("L·ªói", error.error || "Kh√¥ng th·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn");
  };
  
  // ƒêƒÉng k√Ω c√°c s·ª± ki·ªán socket cho ch·ª©c nƒÉng chuy·ªÉn ti·∫øp tin nh·∫Øn
  useEffect(() => {
    // ƒêƒÉng k√Ω s·ª± ki·ªán khi chuy·ªÉn ti·∫øp tin nh·∫Øn th√†nh c√¥ng
    SocketService.onForwardMessageSuccess(handleForwardMessageSuccess);
    
    // ƒêƒÉng k√Ω s·ª± ki·ªán khi chuy·ªÉn ti·∫øp tin nh·∫Øn g·∫∑p l·ªói
    SocketService.onForwardMessageError(handleForwardMessageError);
    
    // D·ªçn d·∫πp khi component b·ªã hu·ª∑
    return () => {
      SocketService.removeListener('forward_message_success');
      SocketService.removeListener('forward_message_error');
    };
  }, []);
  
  // Thu h·ªìi tin nh·∫Øn
  const handleRevokeMessage = async () => {
    if (!selectedMessage || !activeConversation) {
      handleMessageContextMenuClose();
      return;
    }
    
    // ƒê√≥ng menu tr∆∞·ªõc ti√™n ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ focus
    handleMessageContextMenuClose();
    
    try {
      // L·∫•y token
      const token = AuthService.getAccessToken();
      if (!token) {
        console.error('No access token found');
        Alert.alert("Error", "You are not authenticated");
        return;
      }
      
      // Ghi nh·∫≠n lo·∫°i tin nh·∫Øn tr∆∞·ªõc khi thu h·ªìi
      const messageType = selectedMessage.type || 'text';
      console.log('üìù ƒêang thu h·ªìi tin nh·∫Øn lo·∫°i:', messageType);
      
      // G·ªçi API thu h·ªìi tin nh·∫Øn
      const response = await fetch(`http://localhost:4000/chat/message/revoke/${selectedMessage._id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        // C·∫≠p nh·∫≠t tin nh·∫Øn trong state
        setMessages(prevMessages => 
          prevMessages.map(msg => 
            msg._id === selectedMessage._id ? { 
              ...msg, 
              isRevoked: true,
              // Gi·ªØ nguy√™n type ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o thu h·ªìi ƒë√∫ng
              type: messageType,
              // Gi·ªØ l·∫°i th√¥ng tin file n·∫øu c√≥
              fileUrl: msg.fileUrl,
              fileName: msg.fileName
            } : msg
          )
        );
        
        // Th√¥ng b√°o cho ng∆∞·ªùi d√πng kh√°c qua socket
        SocketService.revokeMessage(
          selectedMessage._id, 
          activeConversation._id, 
          userId
        );
      } else {
        console.error('Failed to revoke message');
        Alert.alert("Error", "Failed to revoke message");
      }
    } catch (error) {
      console.error('Error revoking message:', error);
      Alert.alert("Error", "An error occurred while revoking the message");
    }
  };
  
  // Xo√° tin nh·∫Øn
  const handleDeleteMessage = async () => {
    if (!selectedMessage || !activeConversation) {
      handleMessageContextMenuClose();
      return;
    }
    
    // ƒê√≥ng menu tr∆∞·ªõc ti√™n ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ focus
    handleMessageContextMenuClose();
    
    try {
      // L·∫•y token
      const token = AuthService.getAccessToken();
      if (!token) {
        console.error('No access token found');
        Alert.alert("Error", "You are not authenticated");
        return;
      }
      
      // G·ªçi API xo√° tin nh·∫Øn - Ch·ªâ ·ªü ph√≠a ng∆∞·ªùi d√πng hi·ªán t·∫°i
      const response = await fetch(`http://localhost:4000/chat/message/delete/${selectedMessage._id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        // X√≥a tin nh·∫Øn kh·ªèi giao di·ªán c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        setMessages(prevMessages => 
          prevMessages.filter(msg => msg._id !== selectedMessage._id)
        );
        
        // Th√¥ng b√°o cho ng∆∞·ªùi d√πng kh√°c qua socket
        SocketService.deleteMessage(
          selectedMessage._id, 
          activeConversation._id, 
          userId
        );
      } else {
        console.error('Failed to delete message');
        Alert.alert("Error", "Failed to delete message");
      }
    } catch (error) {
      console.error('Error deleting message:', error);
      Alert.alert("Error", "An error occurred while deleting the message");
    }
  };

  // C·∫≠p nh·∫≠t h√†m m·ªü file
  const handleOpenFile = async (fileUrl, fileName, fileType) => {
    if (!fileUrl) {
      Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n file.");
      return;
    }

    // Ki·ªÉm tra n·∫øu l√† file t·∫°m th·ªùi, th√¨ hi·ªÉn th·ªã th√¥ng b√°o
    if (fileUrl.startsWith('temp_file_')) {
      Alert.alert("Th√¥ng b√°o", "File ƒëang ƒë∆∞·ª£c t·∫£i l√™n m√°y ch·ªß. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.");
      return;
    }

    console.log("üîó M·ªü file:", fileUrl);
    console.log("üìÑ T√™n file:", fileName);
    console.log("üì¶ Lo·∫°i file:", fileType);
    
    // X√°c ƒë·ªãnh lo·∫°i file t·ª´ tham s·ªë ho·∫∑c ph√¢n t√≠ch t·ª´ fileName
    const getFileType = () => {
      // N·∫øu ƒë√£ c√≥ type ƒë∆∞·ª£c truy·ªÅn v√†o
      if (fileType && (fileType.includes('pdf') || fileType.includes('image') || 
          fileType.includes('video') || fileType.includes('audio'))) {
        if (fileType.includes('pdf')) return 'pdf';
        if (fileType.includes('image')) return 'image';
        if (fileType.includes('video')) return 'video';
        if (fileType.includes('audio')) return 'audio';
      }
      
      // Ph√¢n t√≠ch t·ª´ fileName
      if (fileName) {
        const extension = fileName.split('.').pop().toLowerCase();
        if (['pdf'].includes(extension)) return 'pdf';
        if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension)) return 'image';
        if (['mp4', 'webm', 'ogg', 'avi', 'mov'].includes(extension)) return 'video';
        if (['mp3', 'wav', 'm4a'].includes(extension)) return 'audio';
        if (['doc', 'docx'].includes(extension)) return 'doc';
        if (['xls', 'xlsx'].includes(extension)) return 'excel';
        if (['ppt', 'pptx'].includes(extension)) return 'presentation';
      }
      
      return 'file';
    };
    
    const type = getFileType();
    
    try {
      // ƒê·∫£m b·∫£o fileUrl l√† URL ƒë·∫ßy ƒë·ªß
      const url = fileUrl.startsWith('http') 
        ? fileUrl 
        : `http://localhost:4000${fileUrl.startsWith('/') ? '' : '/'}${fileUrl}`;
  
      console.log('üåê URL ho√†n ch·ªânh:', url);
      
      // M·ªü file tr·ª±c ti·∫øp m√† kh√¥ng c·∫ßn ki·ªÉm tra
      if (['image', 'pdf', 'video', 'audio'].includes(type)) {
        // V·ªõi h√¨nh ·∫£nh, PDF v√† video, tr·ª±c ti·∫øp m·ªü URL
        window.open(url, '_blank');
      } else {
        // V·ªõi c√°c file kh√°c, ch·ªâ c·∫ßn t·∫£i xu·ªëng
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName || 'download'; // ƒê·∫∑t t√™n file khi t·∫£i xu·ªëng
        link.target = '_blank';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi m·ªü file:", error);
      Alert.alert(
        "Kh√¥ng th·ªÉ m·ªü file", 
        "C√≥ l·ªói x·∫£y ra khi m·ªü file. Th·ª≠ t·∫£i xu·ªëng thay th·∫ø.",
        [
          {
            text: "T·∫£i xu·ªëng",
            onPress: () => {
              try {
                const downloadUrl = fileUrl.startsWith('http') 
                  ? fileUrl 
                  : `http://localhost:4000${fileUrl.startsWith('/') ? '' : '/'}${fileUrl}`;
                
                const downloadLink = document.createElement('a');
                downloadLink.href = downloadUrl;
                downloadLink.setAttribute('download', fileName || 'download');
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
              } catch (err) {
                console.error('L·ªói khi t·∫£i xu·ªëng:', err);
                Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i xu·ªëng file');
              }
            }
          },
          {
            text: "H·ªßy",
            style: "cancel"
          }
        ]
      );
    }
  };

  // X·ª≠ l√Ω th√™m c·∫£m x√∫c v√†o tin nh·∫Øn
  const handleAddReaction = async (messageId, emoji) => {
    if (!messageId || !userId || !activeConversation) return;
    
    try {
      const token = AuthService.getAccessToken();
      if (!token) {
        console.error('No access token found');
        Alert.alert("Error", "You are not authenticated");
        return;
      }
      
      // Ki·ªÉm tra tin nh·∫Øn c√≥ reaction t·ª´ user n√†y ch∆∞a
      const message = messages.find(msg => msg._id === messageId);
      if (!message) return;
      
      // Ki·ªÉm tra n·∫øu user ƒë√£ th·∫£ c·∫£m x√∫c n√†y, th√¨ x√≥a ƒëi
      if (message.reactions && 
          message.reactions[emoji] && 
          message.reactions[emoji].includes(userId)) {
        // X√≥a c·∫£m x√∫c
        await handleRemoveReaction(messageId, emoji);
        return;
      }
      
      // C·∫≠p nh·∫≠t UI t·∫°m th·ªùi tr∆∞·ªõc
      setMessages(prevMessages => 
        prevMessages.map(msg => {
          if (msg._id === messageId) {
            // T·∫°o b·∫£n sao c·ªßa reactions ho·∫∑c object m·ªõi n·∫øu ch∆∞a c√≥
            const updatedReactions = { ...(msg.reactions || {}) };
            
            // C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi danh s√°ch ng∆∞·ªùi d√πng cho emoji n√†y
            if (updatedReactions[emoji]) {
              // N·∫øu ƒë√£ c√≥ danh s√°ch cho emoji n√†y, th√™m userId v√†o
              if (!updatedReactions[emoji].includes(userId)) {
                updatedReactions[emoji] = [...updatedReactions[emoji], userId];
              }
            } else {
              // T·∫°o m·ªõi danh s√°ch cho emoji n√†y
              updatedReactions[emoji] = [userId];
            }
            
            return {
              ...msg,
              reactions: updatedReactions
            };
          }
          return msg;
        })
      );
      
      // G·ª≠i y√™u c·∫ßu qua socket ƒë·ªÉ th√¥ng b√°o cho c√°c ng∆∞·ªùi d√πng kh√°c
      SocketService.addReaction(messageId, activeConversation._id, userId, emoji);
      
      // ƒê·ªìng b·ªô v·ªõi server qua API
      await ChatService.addReaction(messageId, userId, emoji, token);
      
    } catch (error) {
      console.error('Error adding reaction:', error);
      Alert.alert("Error", "Failed to add reaction");
    }
  };
  
  // X·ª≠ l√Ω x√≥a c·∫£m x√∫c kh·ªèi tin nh·∫Øn
  const handleRemoveReaction = async (messageId, emoji) => {
    if (!messageId || !userId || !activeConversation) return;
    
    try {
      const token = AuthService.getAccessToken();
      if (!token) {
        console.error('No access token found');
        Alert.alert("Error", "You are not authenticated");
        return;
      }
      
      // C·∫≠p nh·∫≠t UI t·∫°m th·ªùi tr∆∞·ªõc
      setMessages(prevMessages => 
        prevMessages.map(msg => {
          if (msg._id === messageId && msg.reactions && msg.reactions[emoji]) {
            // T·∫°o b·∫£n sao c·ªßa reactions
            const updatedReactions = { ...msg.reactions };
            
            // X√≥a userId kh·ªèi danh s√°ch ng∆∞·ªùi d√πng cho emoji n√†y
            updatedReactions[emoji] = updatedReactions[emoji].filter(id => id !== userId);
            
            // N·∫øu kh√¥ng c√≤n ai th·∫£ emoji n√†y, x√≥a kh·ªèi danh s√°ch
            if (updatedReactions[emoji].length === 0) {
              delete updatedReactions[emoji];
            }
            
                  return {
              ...msg,
              reactions: updatedReactions
            };
          }
          return msg;
        })
      );
      
      // G·ª≠i y√™u c·∫ßu qua socket ƒë·ªÉ th√¥ng b√°o cho c√°c ng∆∞·ªùi d√πng kh√°c
      SocketService.removeReaction(messageId, activeConversation._id, userId, emoji);
      
      // ƒê·ªìng b·ªô v·ªõi server qua API
      await ChatService.removeReaction(messageId, userId, emoji, token);
      
    } catch (error) {
      console.error('Error removing reaction:', error);
      Alert.alert("Error", "Failed to remove reaction");
    }
  };

  // Th√™m event listener cho vi·ªác c·∫≠p nh·∫≠t c·∫£m x√∫c
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üëç Thi·∫øt l·∫≠p listener cho c·∫£m x√∫c tin nh·∫Øn');
    
    const handleMessageReaction = (data) => {
      const { messageId, emoji, userId: reactUserId, action } = data;
      
      console.log(`üëç Nh·∫≠n ph·∫£n h·ªìi c·∫£m x√∫c: ${emoji} t·ª´ ${reactUserId} cho tin nh·∫Øn ${messageId}`);
      
      if (!messageId || !emoji || !reactUserId) return;
      
      setMessages(prevMessages => 
        prevMessages.map(msg => {
          if (msg._id === messageId) {
            // T·∫°o b·∫£n sao c·ªßa reactions ho·∫∑c object m·ªõi n·∫øu ch∆∞a c√≥
            const updatedReactions = { ...(msg.reactions || {}) };
            
            if (action === 'add') {
              // Th√™m c·∫£m x√∫c
              if (updatedReactions[emoji]) {
                if (!updatedReactions[emoji].includes(reactUserId)) {
                  updatedReactions[emoji] = [...updatedReactions[emoji], reactUserId];
                }
              } else {
                updatedReactions[emoji] = [reactUserId];
              }
            } else if (action === 'remove') {
              // X√≥a c·∫£m x√∫c
              if (updatedReactions[emoji]) {
                updatedReactions[emoji] = updatedReactions[emoji].filter(id => id !== reactUserId);
                
                if (updatedReactions[emoji].length === 0) {
                  delete updatedReactions[emoji];
                }
              }
            }
            
            return {
              ...msg,
              reactions: updatedReactions
            };
          }
          return msg;
        })
      );
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onMessageReaction(handleMessageReaction);
    
    // Cleanup
    return () => {
      SocketService.removeListener('message_reaction');
    };
  }, []);

  const handleAvatarClick = (user) => {
    setSelectedUser(user);
    setProfileDialogOpen(true);
  };

  const handleCloseProfileDialog = () => {
    setProfileDialogOpen(false);
    setSelectedUser(null);
  };

  // X·ª≠ l√Ω tr·∫°ng th√°i online/offline c·ªßa ng∆∞·ªùi d√πng
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üü¢ Thi·∫øt l·∫≠p listener cho tr·∫°ng th√°i online/offline');
    
    // Map ƒë·ªÉ l∆∞u tr·∫°ng th√°i online c·ªßa c√°c user
    const onlineStatusMap = new Map();
    
    // T·∫°o Set ƒë·ªÉ theo d√µi ng∆∞·ªùi d√πng ƒë√£ b√°o c√°o n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!reportedUsers.current) {
      reportedUsers.current = new Set();
    }
    
    const handleUserOnline = (userId) => {
      // Tr√°nh x·ª≠ l√Ω c√πng m·ªôt userId nhi·ªÅu l·∫ßn - ngƒÉn v√≤ng l·∫∑p v√¥ h·∫°n
      if (reportedUsers.current.has(userId)) {
        console.log('‚ö†Ô∏è B·ªè qua s·ª± ki·ªán user_online tr√πng l·∫∑p cho:', userId);
        return;
      }
      
      console.log('üü¢ Ng∆∞·ªùi d√πng online:', userId);
      reportedUsers.current.add(userId);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i online trong state
      onlineStatusMap.set(userId, true);
      
      // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i online
      setConversations(prev => prev.map(conv => {
        // V·ªõi cu·ªôc tr√≤ chuy·ªán nh√≥m, kh√¥ng c·∫≠p nh·∫≠t tr·∫°ng th√°i online
        if (conv.type === 'group') return conv;
        
        // V·ªõi cu·ªôc tr√≤ chuy·ªán 1-1, ki·ªÉm tra ng∆∞·ªùi d√πng
        const otherUser = conv.members?.find(
          m => m.idUser && (
            (m.idUser._id && m.idUser._id.toString() === userId.toString()) ||
            (typeof m.idUser === 'string' && m.idUser.toString() === userId.toString())
          )
        )?.idUser;
        
        if (otherUser) {
          return {
            ...conv,
            isOnline: true,
            lastSeen: new Date()
          };
        }
        
        return conv;
      }));
      
      // Sau 10 ph√∫t, x√≥a kh·ªèi danh s√°ch reported ƒë·ªÉ cho ph√©p nh·∫≠n l·∫°i th√¥ng b√°o online
      setTimeout(() => {
        if (reportedUsers.current) {
          reportedUsers.current.delete(userId);
          console.log('üïí ƒê√£ x√≥a user kh·ªèi danh s√°ch reported sau 10 ph√∫t:', userId);
        }
      }, 10 * 60 * 1000); // 10 ph√∫t
    };
    
    const handleUserOffline = (userId) => {
      console.log('üî¥ Ng∆∞·ªùi d√πng offline:', userId);
      
      // X√≥a kh·ªèi danh s√°ch ƒë√£ report ƒë·ªÉ cho ph√©p b√°o online l·∫ßn sau
      reportedUsers.current.delete(userId);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i offline trong state
      onlineStatusMap.set(userId, false);
      
      // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i offline
      setConversations(prev => prev.map(conv => {
        // V·ªõi cu·ªôc tr√≤ chuy·ªán nh√≥m, kh√¥ng c·∫≠p nh·∫≠t tr·∫°ng th√°i online
        if (conv.type === 'group') return conv;
        
        // V·ªõi cu·ªôc tr√≤ chuy·ªán 1-1, ki·ªÉm tra ng∆∞·ªùi d√πng
        const otherUser = conv.members?.find(
          m => m.idUser && (
            (m.idUser._id && m.idUser._id.toString() === userId.toString()) ||
            (typeof m.idUser === 'string' && m.idUser.toString() === userId.toString())
          )
        )?.idUser;
        
        if (otherUser) {
          return {
            ...conv,
            isOnline: false,
            lastSeen: new Date()
          };
        }
        
        return conv;
      }));
    };
    
    // ƒêƒÉng k√Ω event listener m·ªôt c√°ch an to√†n s·ª≠ d·ª•ng registerEventListener
    SocketService.onUserOnline(handleUserOnline);
    SocketService.onUserOffline(handleUserOffline);
    
    // Khi ng∆∞·ªùi d√πng thay ƒë·ªïi cu·ªôc tr√≤ chuy·ªán ho·∫∑c v√†o trang chat
    // Th√¥ng b√°o r·∫±ng h·ªç ƒëang xem tin nh·∫Øn
    if (activeConversation?._id) {
      SocketService.viewingMessages(activeConversation._id);
    }
    
    // Cleanup
    return () => {
      console.log('üßπ D·ªçn d·∫πp listener tr·∫°ng th√°i online/offline');
      if (activeConversation?._id) {
        SocketService.stopViewingMessages(activeConversation._id);
      }
      
      // X√≥a listener s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c·ªßa SocketService
      SocketService.removeListener('user_online');
      SocketService.removeListener('user_offline');
    };
  }, [activeConversation]);

  // X·ª≠ l√Ω tin nh·∫Øn ƒë√£ chuy·ªÉn giao
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üì¨ Thi·∫øt l·∫≠p listener cho tin nh·∫Øn ƒë√£ chuy·ªÉn giao');
    
    const handleMessageDelivered = (data) => {
      console.log('üì¨ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn giao:', data.messageId);
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
      setMessages(prev => prev.map(msg => {
        if (msg._id === data.messageId) {
          return {
            ...msg,
            delivered: true,
            deliveredAt: data.deliveredAt
          };
        }
        return msg;
      }));
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onMessageDelivered(handleMessageDelivered);
    
    // Cleanup
    return () => {
      SocketService.removeListener('message_delivered');
    };
  }, []);

  // X·ª≠ l√Ω ai ƒëang xem tin nh·∫Øn
  useEffect(() => {
    if (!SocketService.socket || !activeConversation) return;
    
    console.log('üëÄ Thi·∫øt l·∫≠p listener cho ai ƒëang xem tin nh·∫Øn');
    
    const viewingUsers = new Map();
    
    const handleUserViewingMessages = (data) => {
      const { userId, conversationId } = data;
      
      // Ch·ªâ quan t√¢m ƒë·∫øn cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      if (conversationId !== activeConversation._id) return;
      
      console.log('üëÄ Ng∆∞·ªùi d√πng ƒëang xem tin nh·∫Øn:', userId);
      
      // T√¨m t√™n ng∆∞·ªùi d√πng t·ª´ members
      let userName = "Ai ƒë√≥";
      if (activeConversation?.members) {
        const member = activeConversation.members.find(
          m => m.idUser && m.idUser._id === userId
        );
        if (member?.idUser?.name) {
          userName = member.idUser.name;
        }
      }
      
      // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ƒëang xem
      viewingUsers.set(userId, userName);
      
      // TODO: C√≥ th·ªÉ hi·ªÉn th·ªã UI "X ƒëang xem tin nh·∫Øn" n·∫øu c·∫ßn
    };
    
    const handleUserStopViewingMessages = (data) => {
      const { userId, conversationId } = data;
      
      // Ch·ªâ quan t√¢m ƒë·∫øn cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      if (conversationId !== activeConversation._id) return;
      
      console.log('üëÄ Ng∆∞·ªùi d√πng ng·ª´ng xem tin nh·∫Øn:', userId);
      
      // X√≥a kh·ªèi danh s√°ch ng∆∞·ªùi ƒëang xem
      viewingUsers.delete(userId);
      
      // TODO: C·∫≠p nh·∫≠t UI n·∫øu c·∫ßn
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onUserViewingMessages(handleUserViewingMessages);
    SocketService.socket.on('user_stop_viewing_messages', handleUserStopViewingMessages);
    
    // Cleanup
    return () => {
      SocketService.removeListener('user_viewing_messages');
      SocketService.socket.off('user_stop_viewing_messages');
    };
  }, [activeConversation]);

  // X·ª≠ l√Ω ƒë·ªìng b·ªô tin nh·∫Øn sau khi m·∫•t k·∫øt n·ªëi
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üîÑ Thi·∫øt l·∫≠p listener cho ƒë·ªìng b·ªô tin nh·∫Øn');
    
    // Khi socket ƒë√£ ng·∫Øt k·∫øt n·ªëi v√† k·∫øt n·ªëi l·∫°i
    const handleReconnect = () => {
      console.log('üîÑ Socket k·∫øt n·ªëi l·∫°i, ƒë·ªìng b·ªô tin nh·∫Øn...');
      
      // ƒê·ªìng b·ªô tin nh·∫Øn cho cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      if (activeConversation?._id && messages.length > 0) {
        // L·∫•y th·ªùi gian c·ªßa tin nh·∫Øn m·ªõi nh·∫•t
        const latestMessage = messages.reduce((latest, msg) => {
          const msgTime = new Date(msg.createdAt).getTime();
          const latestTime = new Date(latest.createdAt).getTime();
          return msgTime > latestTime ? msg : latest;
        }, messages[0]);
        
        // G·ª≠i y√™u c·∫ßu ƒë·ªìng b·ªô t·ª´ tin nh·∫Øn cu·ªëi c√πng
        SocketService.syncMessages(latestMessage.createdAt, activeConversation._id);
      }
    };
    
    const handleSyncMessages = (data) => {
      console.log('üîÑ Nh·∫≠n tin nh·∫Øn ƒë·ªìng b·ªô:', data.messages?.length || 0);
      
      if (!data.messages || data.messages.length === 0) return;
      
      // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ƒëang ·ªü ƒë√∫ng cu·ªôc tr√≤ chuy·ªán
      if (activeConversation?._id === data.conversationId) {
        // L·ªçc nh·ªØng tin nh·∫Øn m·ªõi ch∆∞a c√≥ trong state
        const messageIds = new Set(messages.map(m => m._id));
        const newMessages = data.messages.filter(m => !messageIds.has(m._id));
        
        if (newMessages.length > 0) {
          // Th√™m tin nh·∫Øn m·ªõi v√†o state v√† s·∫Øp x·∫øp theo th·ªùi gian
          setMessages(prev => [...prev, ...newMessages].sort((a, b) => 
            new Date(a.createdAt) - new Date(b.createdAt)
          ));
        }
      }
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.socket.on('reconnect', handleReconnect);
    SocketService.onSyncMessages(handleSyncMessages);
    
    // Cleanup
    return () => {
      SocketService.socket.off('reconnect');
      SocketService.removeListener('sync_messages_result');
    };
  }, [activeConversation, messages]);

  // X·ª≠ l√Ω s·ª± ki·ªán group_created
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üë• Thi·∫øt l·∫≠p listener cho nh√≥m m·ªõi ƒë∆∞·ª£c t·∫°o');
    
    const handleGroupCreated = (data) => {
      console.log('üë• Nh√≥m m·ªõi ƒë∆∞·ª£c t·∫°o:', data.groupId);
      
      // N·∫øu ƒë√£ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß v·ªÅ nh√≥m, c·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán
      if (data._id) {
        const newGroup = data;
        
        // Ki·ªÉm tra xem nh√≥m ƒë√£ t·ªìn t·∫°i trong danh s√°ch ch∆∞a
        const exists = conversations.some(conv => conv._id === newGroup._id);
        
        if (!exists) {
          console.log('üë• Th√™m nh√≥m m·ªõi v√†o danh s√°ch cu·ªôc tr√≤ chuy·ªán');
          setConversations(prev => [newGroup, ...prev]);
        }
      } else {
        // N·∫øu ch·ªâ c√≥ ID, c·∫ßn t·∫£i th√¥ng tin nh√≥m
        console.log('üë• T·∫£i th√¥ng tin nh√≥m m·ªõi');
        
        // T·∫£i l·∫°i danh s√°ch cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ c√≥ th√¥ng tin nh√≥m m·ªõi
        fetchConversations();
      }
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onGroupCreated(handleGroupCreated);
    
    // Cleanup
    return () => {
      SocketService.removeListener('group_created');
    };
  }, [conversations]);

  // X·ª≠ l√Ω chi ti·∫øt ho·∫°t ƒë·ªông nh√≥m
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üë• Thi·∫øt l·∫≠p listener cho ho·∫°t ƒë·ªông chi ti·∫øt nh√≥m');
    
    const handleGroupActivity = (data) => {
      console.log('üë• Ho·∫°t ƒë·ªông nh√≥m:', data.activityType);
      
      // Ch·ªâ x·ª≠ l√Ω n·∫øu li√™n quan ƒë·∫øn cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      if (activeConversation?._id !== data.conversationId) return;
      
      // Hi·ªÉn th·ªã th√¥ng b√°o ho·∫°t ƒë·ªông trong tin nh·∫Øn n·∫øu c·∫ßn
      const activityMessage = {
        _id: `activity_${Date.now()}`,
        type: 'activity',
        content: '',
        activityType: data.activityType,
        sender: data.actorId,
        target: data.targetId,
        details: data.details,
        createdAt: data.timestamp || new Date(),
        idConversation: data.conversationId
      };
      
      // Th√™m th√¥ng b√°o ho·∫°t ƒë·ªông v√†o danh s√°ch tin nh·∫Øn
      setMessages(prev => [...prev, activityMessage]);
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onGroupActivity(handleGroupActivity);
    
    // Cleanup
    return () => {
      SocketService.removeListener('group_activity');
    };
  }, [activeConversation]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·ªã x√≥a kh·ªèi nh√≥m
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üö´ Thi·∫øt l·∫≠p listener cho khi ng∆∞·ªùi d√πng b·ªã x√≥a kh·ªèi nh√≥m');
    
    const handleRemovedFromGroup = (data) => {
      console.log('üö´ Ng∆∞·ªùi d√πng hi·ªán t·∫°i b·ªã x√≥a kh·ªèi nh√≥m:', data);
      
      // X√≥a conversation kh·ªèi danh s√°ch
      setConversations(prev => 
        prev.filter(conv => conv._id !== data.conversationId)
      );
      
      // N·∫øu ƒëang xem conversation b·ªã x√≥a th√¨ chuy·ªÉn v·ªÅ danh s√°ch
      if (activeConversation && activeConversation._id === data.conversationId) {
        setActiveConversation(null);
        setMessages([]);
        
        // Hi·ªÉn th·ªã dialog th√¥ng b√°o
        toast.info(data.message || `B·∫°n ƒë√£ b·ªã x√≥a kh·ªèi nh√≥m "${data.groupName}"`);
        
        // N·∫øu ƒëang ·ªü mobile view, chuy·ªÉn v·ªÅ danh s√°ch cu·ªôc tr√≤ chuy·ªán
        if (window.innerWidth <= 768) {
          setShowConversationList(true);
        }
      }
    };
    
    // Th√™m listener cho s·ª± ki·ªán khi nh√≥m b·ªã x√≥a b·ªüi admin
    const handleGroupDeletedEvent = (data) => {
      console.log('üö´ Nh√≥m ƒë√£ b·ªã admin x√≥a:', data);
      
      // X√≥a conversation kh·ªèi danh s√°ch
      setConversations(prev => 
        prev.filter(conv => conv._id !== data.conversationId)
      );
      
      // N·∫øu ƒëang xem conversation b·ªã x√≥a th√¨ chuy·ªÉn v·ªÅ danh s√°ch
      if (activeConversation && activeConversation._id === data.conversationId) {
        setActiveConversation(null);
        setMessages([]);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        Alert.alert("Th√¥ng b√°o", `Nh√≥m "${data.groupName || 'chat'}" ƒë√£ b·ªã x√≥a b·ªüi admin`);
        
        // N·∫øu ƒëang ·ªü mobile view, chuy·ªÉn v·ªÅ danh s√°ch cu·ªôc tr√≤ chuy·ªán
        if (window.innerWidth <= 768) {
          setShowConversationList(true);
        }
      }
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onRemovedFromGroup(handleRemovedFromGroup);
    SocketService.onGroupDeleted(handleGroupDeletedEvent);
    
    // Cleanup
    return () => {
      SocketService.removeListener('removed_from_group');
      SocketService.removeListener('group_deleted');
    };
  }, [activeConversation]);

  // X·ª≠ l√Ω l·ªói tin nh·∫Øn
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('‚ö†Ô∏è Thi·∫øt l·∫≠p listener cho l·ªói tin nh·∫Øn');
    
    const handleMessageError = (data) => {
      console.error('‚ö†Ô∏è L·ªói tin nh·∫Øn:', data);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      if (data.messageId) {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói cho tin nh·∫Øn c·ª• th·ªÉ
        setMessages(prev => prev.map(msg => {
          if (msg._id === data.messageId) {
            return {
              ...msg,
              error: true,
              errorMessage: data.message || 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn'
            };
          }
          return msg;
        }));
      } else {
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chung
        toast.error(data.message || 'ƒê√£ x·∫£y ra l·ªói v·ªõi tin nh·∫Øn');
      }
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onMessageError(handleMessageError);
    
    // Cleanup
    return () => {
      SocketService.removeListener('message_error');
    };
  }, []);

  // X·ª≠ l√Ω ng∆∞·ªùi d√πng c·ª• th·ªÉ ƒëang nh·∫≠p trong nh√≥m
  useEffect(() => {
    if (!SocketService.socket || !activeConversation || activeConversation.type !== 'group') return;
    
    console.log('‚å®Ô∏è Thi·∫øt l·∫≠p listener cho ng∆∞·ªùi d√πng c·ª• th·ªÉ ƒëang nh·∫≠p trong nh√≥m');
    
    const handleSpecificUserTyping = (data) => {
      // Ch·ªâ x·ª≠ l√Ω n·∫øu l√† cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i v√† l√† nh√≥m
      if (activeConversation._id !== data.conversationId) return;
      
      console.log('‚å®Ô∏è Ng∆∞·ªùi d√πng c·ª• th·ªÉ ƒëang nh·∫≠p:', data.userName);
      
      // C·∫≠p nh·∫≠t state ng∆∞·ªùi ƒëang nh·∫≠p
      setTypingUsers(prev => ({
        ...prev,
        [data.userId]: data.userName
      }));
      
      // T·ª± ƒë·ªông x√≥a sau 3 gi√¢y n·∫øu kh√¥ng c√≥ c·∫≠p nh·∫≠t m·ªõi
      setTimeout(() => {
        setTypingUsers(current => {
          const updated = { ...current };
          if (updated[data.userId]) {
            delete updated[data.userId];
          }
          return updated;
        });
      }, 3000);
    };
    
    // ƒêƒÉng k√Ω event listener
    SocketService.onSpecificUserTyping(handleSpecificUserTyping);
    
    // Cleanup
    return () => {
      SocketService.removeListener('specific_user_typing');
    };
  }, [activeConversation]);

  // Th√™m h√†m ti·ªán √≠ch ki·ªÉm tra quy·ªÅn admin
  const isGroupAdmin = (conversation) => {
    if (!conversation || !userId || conversation.type !== 'group') return false;
    
    // L·∫•y th√¥ng tin admin t·ª´ nhi·ªÅu ngu·ªìn (conversation object v√† localStorage)
    const adminId = conversation.admin?._id || conversation.admin || 
                    localStorage.getItem(`adminId_${conversation._id}`) || 
                    localStorage.getItem('adminId');
    
    console.log('Admin check - AdminId:', adminId, 'UserId:', userId);
    
    return adminId && userId.toString() === adminId.toString();
  };
  
  // Th√™m h√†m ti·ªán √≠ch ki·ªÉm tra quy·ªÅn admin2
  const isGroupAdmin2 = (conversation) => {
    if (!conversation || !userId || conversation.type !== 'group') return false;
    
    // L·∫•y th√¥ng tin admin2 t·ª´ nhi·ªÅu ngu·ªìn (conversation object v√† localStorage)
    const admin2Id = conversation.admin2?._id || conversation.admin2 || 
                     localStorage.getItem(`admin2Id_${conversation._id}`) || 
                     localStorage.getItem('admin2Id');
    
    console.log('Admin2 check - Admin2Id:', admin2Id, 'UserId:', userId);
    
    return admin2Id && userId.toString() === admin2Id.toString();
  };

  // X·ª≠ l√Ω s·ª± ki·ªán nh√≥m b·ªã x√≥a
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üóëÔ∏è Thi·∫øt l·∫≠p listener cho s·ª± ki·ªán nh√≥m b·ªã x√≥a');
    
    const handleGroupDeleted = (data) => {
      console.log('üóëÔ∏è Nh·∫≠n th√¥ng b√°o nh√≥m b·ªã x√≥a:', data);
      
      // X√≥a cu·ªôc tr√≤ chuy·ªán kh·ªèi danh s√°ch
      setConversations(prev => 
        prev.filter(conv => conv._id !== data.conversationId)
      );
      
      // N·∫øu ƒëang xem cu·ªôc tr√≤ chuy·ªán ƒë√£ b·ªã x√≥a, chuy·ªÉn v·ªÅ m·∫∑c ƒë·ªãnh
      if (activeConversation && activeConversation._id === data.conversationId) {
        setActiveConversation(null);
        setMessages([]);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        Alert.alert(
          "Th√¥ng b√°o", 
          data.message || `Nh√≥m "${data.groupName || 'chat'}" ƒë√£ b·ªã x√≥a b·ªüi admin`
        );
      }
    };
    
    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán
    SocketService.onGroupDeleted(handleGroupDeleted);
    
    return () => {
      // D·ªçn d·∫πp khi unmount
      SocketService.removeListener('group_deleted');
    };
  }, [activeConversation]);

  const handleFileSelectFromGroup = (file, type) => {
    setSelectedFile(file);
    
    // Create preview for images
    if (file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedFilePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    } else {
      setSelectedFilePreview(null);
    }
    
    // Set message type based on the group selection
    setMessageType(type || 'file');
    
    // Create temp file URL
    file.tempFileUrl = `temp_file_${Date.now()}_${file.name}`;
    
    // Focus input for caption
    setTimeout(() => {
      inputRef.current?.focus();
    }, 100);
  };

  // T·∫£i tin nh·∫Øn ƒë√£ ghim khi component ƒë∆∞·ª£c t·∫£i ho·∫∑c khi conversation thay ƒë·ªïi
  useEffect(() => {
    const loadPinnedMessagesForConversation = async () => {
      if (!activeConversation || !activeConversation._id || activeConversation.type !== 'group') return;
      
      try {
        console.log('T·∫£i tin nh·∫Øn ƒë√£ ghim cho cu·ªôc tr√≤ chuy·ªán nh√≥m:', activeConversation._id);
        const token = AuthService.getAccessToken();
        const response = await ChatService.getPinnedMessages(activeConversation._id, token);
        
        if (response.success && response.pinnedMessages) {
          console.log(`ƒê√£ t·∫£i ${response.pinnedMessages.length} tin nh·∫Øn ƒë√£ ghim`);
          // C·∫≠p nh·∫≠t conversation v·ªõi danh s√°ch tin nh·∫Øn ƒë√£ ghim
          setActiveConversation(prev => ({
            ...prev,
            pinnedMessages: response.pinnedMessages
          }));
        } else {
          console.log('Kh√¥ng c√≥ tin nh·∫Øn ƒë√£ ghim ho·∫∑c l·ªói:', response.message);
        }
      } catch (error) {
        console.error('L·ªói khi t·∫£i tin nh·∫Øn ƒë√£ ghim:', error);
      }
    };
    
    // Ch·ªâ t·∫£i tin nh·∫Øn ƒë√£ ghim n·∫øu l√† chat nh√≥m
    if (activeConversation?.type === 'group') {
      loadPinnedMessagesForConversation();
    }
  }, [activeConversation?._id, activeConversation?.type]);

  // X·ª≠ l√Ω s·ª± ki·ªán th√™m th√†nh vi√™n v√†o nh√≥m
  useEffect(() => {
    if (!SocketService.socket) return;
    
    console.log('üë• Thi·∫øt l·∫≠p listener cho s·ª± ki·ªán th√™m th√†nh vi√™n v√†o nh√≥m');
    
    const handleMemberAddedToGroup = (data) => {
      console.log('üë§ Th√†nh vi√™n m·ªõi ƒë∆∞·ª£c th√™m v√†o nh√≥m:', data);
      
      // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán
      if (data.conversation) {
        setConversations(prev => 
          prev.map(conv => 
            conv._id === data.conversation._id ? data.conversation : conv
          )
        );
        
        // C·∫≠p nh·∫≠t cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i n·∫øu ƒëang xem
        if (activeConversation && activeConversation._id === data.conversation._id) {
          console.log('üîÑ C·∫≠p nh·∫≠t th√¥ng tin nh√≥m hi·ªán t·∫°i v·ªõi th√†nh vi√™n m·ªõi');
          setActiveConversation(data.conversation);
          
          // Th√™m th√¥ng b√°o h·ªá th·ªëng v·ªÅ vi·ªác th√™m th√†nh vi√™n m·ªõi
          if (data.conversation.lastMessage && 
              data.conversation.lastMessage.type === 'system' && 
              data.conversation.lastMessage.systemType === 'add_member') {
            
            const systemMessage = {
              _id: `system_${Date.now()}`,
              type: 'system',
              content: data.conversation.lastMessage.content,
              createdAt: new Date().toISOString()
            };
            
            setMessages(prev => [...prev, systemMessage]);
            
            // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi
            setTimeout(() => {
              messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
            }, 100);
          }
        }
      }
    };
    
    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán
    SocketService.onMemberAdded(handleMemberAddedToGroup);
    
    // Cleanup
    return () => {
      SocketService.removeListener('member_added');
    };
  }, [activeConversation]);

  useEffect(() => {
    // Ensure the static/images directory exists
    const createStaticImagesDirIfNeeded = async () => {
      try {
        // Create directories if needed - this is a client-side check
        const staticDir = 'public/static';
        const imagesDir = `${staticDir}/images`;
        console.log('Ensuring static image directories exist');
      } catch (error) {
        console.error('Error handling static directories:', error);
      }
    };
    
    createStaticImagesDirIfNeeded();
  }, []);

  // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† kh·ªüi t·∫°o socket
  useEffect(() => {
    const initializeChat = async () => {
      try {
        // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng
        await fetchUserData();
        
        // T·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán
        await fetchConversations();
        
        // Kh·ªüi t·∫°o k·∫øt n·ªëi socket sau khi t·∫£i d·ªØ li·ªáu c∆° b·∫£n
        if (!SocketService.isConnected) {
          Logger.info('Initializing socket connection after basic data load');
          SocketService.connect();
          
          // Join user room sau khi k·∫øt n·ªëi
          const userData = AuthService.getUserData();
          if (userData && userData._id) {
            SocketService.joinUserRoom(userData);
          }
        }
      } catch (error) {
        Logger.error("Error initializing chat", error);
      }
    };

    initializeChat();
    
    // Cleanup khi component unmount
    return () => {
      // Disconnect socket n·∫øu c·∫ßn
    };
  }, [userId]);

  // H√†m x·ª≠ l√Ω t√¨m ki·∫øm cu·ªôc tr√≤ chuy·ªán
  const handleSearchConversation = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);
    
    if (!query) {
      setFilteredConversations(conversations);
      return;
    }
    
    const filtered = conversations.filter(conversation => {
      // T√¨m ki·∫øm theo t√™n nh√≥m n·∫øu l√† nh√≥m
      if (conversation.type === 'group') {
        return conversation.name.toLowerCase().includes(query);
      }
      
      // T√¨m ki·∫øm theo t√™n ng∆∞·ªùi d√πng n·∫øu l√† chat 1-1
      const otherUser = getOtherParticipant(conversation)?.idUser;
      if (otherUser) {
        return otherUser.name.toLowerCase().includes(query);
      }
      
      return false;
    });
    
    setFilteredConversations(filtered);
  };

  // C·∫≠p nh·∫≠t filteredConversations khi conversations thay ƒë·ªïi
  useEffect(() => {
    setFilteredConversations(conversations);
  }, [conversations]);

  // Th√™m state cho drawer
  const [groupControlDrawerOpen, setGroupControlDrawerOpen] = useState(false);

  // H√†m ƒë·ªÉ m·ªü drawer ƒëi·ªÅu khi·ªÉn nh√≥m
  const handleGroupControlOpen = () => {
    setGroupControlDrawerOpen(true);
  };

  // H√†m ƒë·ªÉ ƒë√≥ng drawer ƒëi·ªÅu khi·ªÉn nh√≥m
  const handleGroupControlClose = () => {
    setGroupControlDrawerOpen(false);
  };

  if (showProfile) {
    return <ProfileScreen onBack={() => setShowProfile(false)} />;
  }

  // Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i
  if (loading.conversations) {
    return (
      <Box sx={{ 
        display: 'flex', 
        flexDirection: 'column',
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh',
        bgcolor: 'background.default'
      }}>
        <LoadingAnimation />
        <Typography variant="body1" sx={{ mt: 2 }}>
          ƒêang t·∫£i d·ªØ li·ªáu cu·ªôc tr√≤ chuy·ªán...
        </Typography>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        height: "100%",
        bgcolor: "background.default",
      }}
    >
      {/* Main Content Area with Conversation List and Chat Area */}
      <Box
        sx={{
          display: "flex",
          height: "100%",
          width: "100%",
        }}
      >
        {/* Conversation List */}
      <Box
        sx={{
            width: { xs: '100%', md: '320px' },
            height: '100%',
            display: { xs: showConversationList && !activeConversation ? 'flex' : 'none', md: 'flex' },
            flexDirection: 'column',
            borderRight: '1px solid',
            borderColor: 'divider',
            bgcolor: 'background.paper',
            overflow: 'hidden', // NgƒÉn kh√¥ng cho to√†n b·ªô container cu·ªôn
        }}
      >
          {/* Header c·ªë ƒë·ªãnh */}
          <Box sx={{ 
            p: 2,
            borderBottom: '1px solid', 
            borderColor: 'divider',
            flexShrink: 0 // NgƒÉn ph·∫ßn header co l·∫°i
          }}>
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
              <Typography variant="h6">Cu·ªôc tr√≤ chuy·ªán</Typography>
              <Box sx={{ display: 'flex' }}>
                <Tooltip title="T·∫°o nh√≥m m·ªõi">
                  <IconButton 
                    size="small"
                    onClick={handleCreateGroup}
                    sx={{ mr: 1 }}
                  >
                    <GroupAddIcon />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Th√™m b·∫°n m·ªõi">
                  <IconButton 
                    size="small"
                    onClick={() => navigation.navigate('Contacts')}
                  >
                    <PersonAddIcon />
                  </IconButton>
                </Tooltip>
              </Box>
            </Box>

          <TextField
              variant="outlined"
              placeholder="T√¨m ki·∫øm..."
              fullWidth
              size="small"
              value={searchQuery}
              onChange={handleSearchConversation}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
                endAdornment: searchQuery ? (
                  <InputAdornment position="end">
                    <IconButton 
                      size="small" 
                      onClick={() => {
                        setSearchQuery("");
                        setFilteredConversations(conversations);
                      }}
                    >
                      <ClearIcon fontSize="small" />
                    </IconButton>
                  </InputAdornment>
                ) : null
              }}
          />
          </Box>
          
          {/* Danh s√°ch cu·ªôc tr√≤ chuy·ªán c√≥ th·ªÉ cu·ªôn */}
          <Box sx={{ 
            flex: 1, 
            overflow: 'auto' // Ch·ªâ ph·∫ßn n√†y c√≥ th·ªÉ cu·ªôn
          }}>
            <List sx={{ width: '100%' }}>
              {loading.conversations ? (
                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
                  <CircularProgress size={24} />
                </Box>
              ) : conversations.length === 0 ? (
                <Box sx={{ p: 3, textAlign: 'center' }}>
                  <Typography color="text.secondary">Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o</Typography>
                <Button
                  variant="contained"
                    startIcon={<PersonAddIcon />}
                    sx={{ mt: 2 }}
                    onClick={() => navigation.navigate('Contacts')}
                  >
                    T√¨m b·∫°n b√®
                </Button>
              </Box>
              ) : filteredConversations.length === 0 && searchQuery ? (
                <Box sx={{ p: 3, textAlign: 'center' }}>
                  <Typography color="text.secondary">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p</Typography>
                </Box>
              ) : (
                filteredConversations.map((conversation) => {
                  const otherUser = conversation.type === 'group' 
                    ? null 
                    : getOtherParticipant(conversation)?.idUser;
                  
                  const isOnline = otherUser && onlineUsers.includes(otherUser._id);
                  const lastMessage = conversation.lastMessage;
                  const isSelected = activeConversation?._id === conversation._id;

            return (
              <ListItem
                      key={conversation._id}
                      button
                      selected={isSelected}
                onClick={() => handleConversationSelect(conversation)}
                sx={{
                        mb: 0.5,
                        borderRadius: 1,
                        mx: 0.5,
                        '&.Mui-selected': {
                          bgcolor: 'action.selected',
                          '&:hover': {
                            bgcolor: 'action.hover',
                          },
                        },
                }}
              >
                <ListItemAvatar>
                  {conversation.type === 'group' ? (
                    <Badge
                      overlap="circular"
                      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                      badgeContent={
                        <Avatar sx={{ width: 16, height: 16, bgcolor: 'primary.main' }}>
                          <GroupIcon sx={{ fontSize: 12 }} />
                        </Avatar>
                      }
                    >
                      <Avatar src={conversation.avatar || ""}>
                        {!conversation.avatar && (conversation.name?.[0] || 'G')}
                      </Avatar>
                    </Badge>
                  ) : (
                    <Badge
                      overlap="circular"
                            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                      variant="dot"
                            color={isOnline ? 'success' : 'error'}
                    >
                            <Avatar src={otherUser?.avatar || ""}>
                              {!otherUser?.avatar && otherUser?.name?.[0]}
                            </Avatar>
                    </Badge>
                  )}
                </ListItemAvatar>
                <ListItemText
                  primary={
                          <Typography 
                            variant="body1" 
                            noWrap 
                  sx={{
                              fontWeight: conversation.unreadCount > 0 ? 'bold' : 'normal',
                              maxWidth: '180px'
                  }}
                >
                            {conversation.type === 'group' ? conversation.name : otherUser?.name || (otherUser?._id ? 'Ng∆∞·ªùi d√πng' : 'Ch·ªçn cu·ªôc tr√≤ chuy·ªán...')}
                  </Typography>
                        }
                        secondary={
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                            {lastMessage && (
                              <Typography 
                                variant="body2" 
                                color="text.secondary" 
                                noWrap
                      sx={{
                                  maxWidth: '120px',
                                  fontWeight: conversation.unreadCount > 0 ? 'medium' : 'normal'
                                }}
                              >
                                {lastMessage.type === 'text' 
                                  ? lastMessage.content 
                                  : lastMessage.type === 'image'
                                    ? 'üñºÔ∏è H√¨nh ·∫£nh'
                                    : lastMessage.type === 'video'
                                      ? 'üé¨ Video'
                                      : lastMessage.type === 'system'
                                        ? lastMessage.content
                                        : 'üìé T·ªáp ƒë√≠nh k√®m'
                                }
                      </Typography>
                            )}
                            {lastMessage && (
                              <Typography variant="caption" color="text.secondary">
                                ¬∑ {formatChatTime(lastMessage.createdAt)}
          </Typography>
                            )}
            </Box>
                        }
                      />
                      {conversation.unreadCount > 0 && (
                        <Badge 
                          badgeContent={conversation.unreadCount} 
                          color="primary"
                          sx={{ ml: 1 }}
                        />
                      )}
                    </ListItem>
                        );
                })
              )}
            </List>
                </Box>
      </Box>

        {/* Chat Area */}
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
            height: "100%",
            width: { xs: '100%', md: 'calc(100% - 320px)' },
            display: { xs: !showConversationList || activeConversation ? 'flex' : 'none', md: 'flex' },
        }}
      >
        {activeConversation ? (
          <>
            {/* Chat Header */}
              <Box
              sx={{
                  p: 2,
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "space-between",
                borderBottom: "1px solid",
                borderColor: "divider",
                bgcolor: "background.paper",
              }}
            >
                <Box sx={{ display: "flex", alignItems: "center" }}>
                  {/* Back button for mobile */}
                  <IconButton 
                    sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }}
                    onClick={() => setShowConversationList(true)}
                  >
                    <ArrowBackIcon />
                  </IconButton>
                  
                  {activeConversation.type === 'group' ? (
                    <Badge
                      overlap="circular"
                      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
                      badgeContent={
                        <Avatar sx={{ width: 16, height: 16, bgcolor: 'primary.main' }}>
                          <GroupIcon sx={{ fontSize: 12 }} />
                        </Avatar>
                      }
                    >
                      <Avatar
                        src={activeConversation.avatar || ""}
                        alt={activeConversation.name || "Group"}
                        sx={{ mr: 2 }}
                      >
                        {!activeConversation.avatar && (activeConversation.name?.[0] || 'G')}
                      </Avatar>
                    </Badge>
                  ) : (
                    <Badge
                      overlap="circular"
                      anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
                      variant="dot"
                      color={
                        onlineUsers.includes(
                          getOtherParticipant(activeConversation)?.idUser?._id
                        )
                          ? "success"
                          : "error"
                      }
                    >
                      <Avatar
                        src={
                          getOtherParticipant(activeConversation)?.idUser?.avatar ||
                          ""
                        }
                        sx={{ mr: 2 }}
                      >
                        {!getOtherParticipant(activeConversation)?.idUser?.avatar && 
                         getOtherParticipant(activeConversation)?.idUser?.name?.[0]}
                      </Avatar>
                    </Badge>
                  )}
                      <Box>
                    <Typography variant="h6">
                      {activeConversation.type === 'group' 
                        ? activeConversation.name || "Group Chat"
                        : getOtherParticipant(activeConversation)?.idUser?.name ||
                          (getOtherParticipant(activeConversation)?.idUser?._id ? "Ng∆∞·ªùi d√πng" : "User")
                      }
                        </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {activeConversation.type === 'group' 
                        ? `${activeConversation.members?.length || 0} members`
                        : onlineUsers.includes(
                            getOtherParticipant(activeConversation)?.idUser?._id
                          )
                          ? "Online"
                          : "Offline"
                      }
                      {Object.keys(typingUsers).includes(
                        getOtherParticipant(activeConversation)?.idUser?._id
                      ) && " ‚Ä¢ typing..."}
                        </Typography>
                          </Box>
                      </Box>
                <Box>
                {activeConversation.type === 'group' && (
                    <>
                    <Tooltip title="Th√†nh vi√™n nh√≥m">
                      <IconButton onClick={handleOpenGroupMembers}>
                        <PeopleIcon />
                      </IconButton>
                    </Tooltip>
                    
                    <Tooltip title="ƒêi·ªÅu khi·ªÉn nh√≥m">
                      <IconButton
                        onClick={handleGroupControlOpen}
                        aria-label="ƒêi·ªÅu khi·ªÉn nh√≥m"
                        color="primary"
                        sx={{ ml: 1 }}
                      >
                        <MoreVert />
                      </IconButton>
                    </Tooltip>
                    </>
                  )}
                  {!activeConversation.type === 'group' && (
                    <IconButton
                      onClick={handleMenuOpen}
                      aria-label="more"
                      aria-controls="long-menu"
                      aria-haspopup="true"
                    >
                      <MoreVert />
                    </IconButton>
                  )}

                {/* S·ª≠ d·ª•ng component GroupControlDrawer */}
                <GroupControlDrawer
                  open={groupControlDrawerOpen}
                  onClose={handleGroupControlClose}
                  conversation={activeConversation}
                  isAdmin={isGroupAdmin(activeConversation)}
                  isAdmin2={isGroupAdmin2(activeConversation)}
                  onViewPinnedMessages={() => setPinnedMessagesDialogOpen(true)}
                  onOpenGroupMembers={handleOpenGroupMembers}
                  onEditGroup={handleEditGroup}
                  onLeaveGroup={() => handleLeaveGroup(activeConversation._id)}
                  onDeleteGroup={() => handleDeleteGroup(activeConversation._id)}
                />

                <Menu
                    id="long-menu"
                    anchorEl={anchorEl}
                    keepMounted={false}
                    disablePortal
                    open={Boolean(anchorEl)}
                    onClose={handleMenuClose}
                    MenuListProps={{
                      'aria-labelledby': 'more-button',
                    }}
                    transformOrigin={{ 
                      vertical: 'top', 
                      horizontal: 'right' 
                    }}
                    anchorOrigin={{ 
                      vertical: 'top', 
                      horizontal: 'right' 
                    }}
                    PaperProps={{
                      sx: {
                        width: 220,
                        maxHeight: 300,
                        boxShadow: '0px 5px 15px rgba(0,0,0,0.2)'
                      }
                    }}
            >
                    {/* Ch·ªâ hi·ªÉn th·ªã menu xem tin nh·∫Øn ƒë√£ ghim khi ƒëang ·ªü trong nh√≥m */}
                    {activeConversation.type === 'group' && (
                      <MenuItem onClick={() => setPinnedMessagesDialogOpen(true)}>
                        Xem tin nh·∫Øn ƒë√£ ghim
                      </MenuItem>
                    )}
                    
                    {activeConversation.type === 'group' && (
                      <>
                        <MenuItem onClick={handleOpenGroupMembers}>
                          Th√†nh vi√™n nh√≥m
                        </MenuItem>
                        {isGroupAdmin(activeConversation) && (
                          <MenuItem onClick={handleEditGroup}>
                            Ch·ªânh s·ª≠a nh√≥m
                          </MenuItem>
                        )}
                        <MenuItem onClick={() => handleLeaveGroup(activeConversation._id)}>
                          R·ªùi nh√≥m
                        </MenuItem>
                        {isGroupAdmin(activeConversation) && (
                          <MenuItem onClick={() => handleDeleteGroup(activeConversation._id)}>
                            X√≥a nh√≥m
                          </MenuItem>
                        )}
                      </>
                    )}
            </Menu>
                </Box>
              </Box>

              {/* Pinned Message Banner - Ch·ªâ hi·ªÉn th·ªã trong chat nh√≥m */}
              {activeConversation.type === 'group' && activeConversation.pinnedMessages?.length > 0 && (
                <PinnedMessageBanner 
                  conversation={activeConversation}
                  onViewAllPinned={() => setPinnedMessagesDialogOpen(true)}
                  onUnpinMessage={(messageId) => {
                    // C·∫≠p nh·∫≠t tin nh·∫Øn trong danh s√°ch tin nh·∫Øn hi·ªán t·∫°i
                    setMessages(prevMessages => 
                      prevMessages.map(msg => 
                        msg._id === messageId ? {...msg, isPinned: false, pinnedBy: null, pinnedAt: null} : msg
                      )
                    );
                    
                    // C·∫≠p nh·∫≠t activeConversation ƒë·ªÉ lo·∫°i b·ªè tin nh·∫Øn ƒë√£ b·ªè ghim
                    setActiveConversation(prevConversation => ({
                      ...prevConversation,
                      pinnedMessages: prevConversation.pinnedMessages.filter(
                        msg => msg._id !== messageId
                      )
                    }));
                  }}
                />
            )}
            
              {/* Chat Messages */}
            <Box
              sx={{
                flex: 1,
                display: "flex",
                flexDirection: "column",
                overflowY: "auto",
                p: 2,
                bgcolor: "background.default",
                backgroundImage: theme => theme.palette.mode === 'dark' 
                  ? 'linear-gradient(rgba(0,0,0,0.8), rgba(0,0,0,0.8)), url("/static/images/chat-bg-pattern.png")' 
                  : 'linear-gradient(rgba(255,255,255,0.95), rgba(255,255,255,0.95)), url("/static/images/chat-bg-pattern.png")',
                backgroundSize: '200px',
                backgroundRepeat: 'repeat',
                backgroundAttachment: 'fixed'
              }}
              ref={messagesContainerRef}
              onScroll={e => {
                const { scrollTop } = e.currentTarget;
                if (scrollTop === 0 && hasMoreMessages && !loadingMoreMessages) {
                  loadMoreMessages();
                }
              }}
            >
                    {loadingMoreMessages && (
                  <Box sx={{ display: 'flex', justifyContent: 'center', py: 2 }}>
                        <CircularProgress size={24} />
                      </Box>
                    )}
                  
                {messages.length === 0 && !loading.messages ? (
                  <Box sx={{ 
                    display: 'flex', 
                    flexDirection: 'column',
                    alignItems: 'center', 
                    justifyContent: 'center',
                    height: '100%'
                  }}>
                    <Typography color="text.secondary" gutterBottom>
                      Ch∆∞a c√≥ tin nh·∫Øn n√†o
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      H√£y g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán
                    </Typography>
                  </Box>
                ) : (
                  loading.messages ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
                      <CircularProgress />
                    </Box>
                  ) : (
                    messages.map((message, index) => {
                      const isCurrentUser = isSentByCurrentUser(message);
                      const showSender = activeConversation.type === 'group' && 
                                       !isCurrentUser && 
                                       (index === 0 || 
                                        !messages[index - 1].sender || 
                                        !message.sender ||
                                        messages[index - 1].sender.toString() !== message.sender.toString());
                                          
                      const messageDate = new Date(message.createdAt);
                      const showDateSeparator = index === 0 || 
                        new Date(messages[index - 1].createdAt).toDateString() !== messageDate.toDateString();
                      
                      return (
                        <React.Fragment key={message._id || message.id || index}>
                          {showDateSeparator && (
                            <Box sx={{ 
                              display: 'flex', 
                              justifyContent: 'center', 
                              my: 2 
                            }}>
                                <Typography 
                                variant="caption" 
                                  sx={{ 
                                  bgcolor: theme => theme.palette.mode === 'dark' ? 'rgba(50,50,50,0.9)' : 'background.paper',
                                    color: 'text.secondary',
                                  px: 2,
                                  py: 0.5,
                                  borderRadius: 4,
                                  boxShadow: theme => theme.palette.mode === 'dark' ? '0 1px 3px rgba(0,0,0,0.3)' : 'none'
                                  }}
                                >
                                {messageDate.toLocaleDateString()}
                                </Typography>
                            </Box>
                          )}
                          
                          {message.type === 'system' ? (
                            <Box sx={{ 
                              display: 'flex', 
                              justifyContent: 'center', 
                              my: 1 
                            }}>
                              <Typography 
                                variant="caption" 
                                sx={{
                                  bgcolor: theme => theme.palette.mode === 'dark' ? 'rgba(50,50,50,0.9)' : 'background.paper',
                                  color: theme => theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.8)' : 'text.secondary',
                                  px: 2,
                                  py: 0.5,
                                  borderRadius: 4,
                                  boxShadow: theme => theme.palette.mode === 'dark' ? '0 1px 3px rgba(0,0,0,0.3)' : 'none'
                                }}
                              >
                                {message.content}
                              </Typography>
                            </Box>
                          ) : (
                            <Box
                              id={`message-${message._id || message.id || 'temp-' + index}`}
                              sx={{
                                display: 'flex',
                                flexDirection: 'column',
                                alignItems: isCurrentUser ? 'flex-end' : 'flex-start',
                                mb: 1,
                                maxWidth: '80%',
                                alignSelf: isCurrentUser ? 'flex-end' : 'flex-start',
                              }}
                              onContextMenu={(e) => handleMessageContextMenu(e, message)}
                            >
                              {/* Hi·ªÉn th·ªã t√™n ng∆∞·ªùi g·ª≠i trong chat nh√≥m */}
                              {showSender && !isCurrentUser && activeConversation.type === 'group' && (
                                <Typography 
                                  variant="caption" 
                                  sx={{ 
                                    ml: 2, 
                                    mb: 0.5,
                                    color: theme => theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.8)' : 'text.secondary',
                                    fontWeight: 500
                                  }}
                                >
                                  {getSenderName(message, activeConversation)}
                                </Typography>
                              )}
                              
                              <Box sx={{ 
                                display: 'flex', 
                                alignItems: 'flex-start',
                                flexDirection: isCurrentUser ? 'row-reverse' : 'row',
                                gap: 1
                              }}>
                                {/* Hi·ªÉn th·ªã avatar trong c·∫£ chat ƒë∆°n v√† nh√≥m */}
                                {!isCurrentUser && (
                                  <Avatar 
                                    src={message.originalSender?.avatar || ''} 
                                    sx={{ width: 32, height: 32 }}
                                    onClick={() => message.originalSender && handleAvatarClick(message.originalSender)}
                                  >
                                    {!message.originalSender?.avatar && message.originalSender?.name?.[0]}
                                  </Avatar>
                                )}
                                
                                {message.isRevoked ? (
                                  <Box sx={{ 
                                    display: 'flex',
                                    alignItems: 'center',
                                    p: 1.5,
                                    borderRadius: 2,
                                    bgcolor: theme => theme.palette.mode === 'dark' ? 'rgba(60,60,60,0.8)' : 'action.hover',
                                    color: theme => theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.7)' : 'text.secondary',
                                    maxWidth: '100%',
                                    border: theme => theme.palette.mode === 'dark' ? '1px solid rgba(255,255,255,0.1)' : 'none'
                                  }}>
                                    <Typography variant="body2" color="inherit" fontStyle="italic">
                                      Tin nh·∫Øn ƒë√£ b·ªã thu h·ªìi
                                    </Typography>
                                  </Box>
                                ) : message.type === 'text' ? (
                                  <Paper
                                    elevation={0}
                                    sx={{ 
                                      p: 1.5,
                                      borderRadius: isCurrentUser ? '18px 18px 4px 18px' : '18px 18px 18px 4px',
                                      bgcolor: isCurrentUser ? 'primary.main' : 'background.paper',
                                      color: isCurrentUser ? 'primary.contrastText' : 'text.primary',
                                      maxWidth: '100%',
                                      wordBreak: 'break-word',
                                      boxShadow: !isCurrentUser ? '0 1px 2px rgba(0,0,0,0.1)' : 'none',
                                      border: !isCurrentUser ? '1px solid rgba(0,0,0,0.05)' : 'none',
                                      position: 'relative',
                                      '&::before': !isCurrentUser ? {
                                        content: '""',
                                        position: 'absolute',
                                        bottom: 0,
                                        left: -8,
                                        width: 15,
                                        height: 15,
                                        backgroundColor: 'background.paper',
                                        borderBottom: '1px solid rgba(0,0,0,0.05)',
                                        borderLeft: '1px solid rgba(0,0,0,0.05)',
                                        borderBottomLeftRadius: '50%',
                                        clipPath: 'polygon(0 0, 100% 100%, 0 100%)',
                                        transformOrigin: 'bottom left',
                                        zIndex: 0,
                                      } : {},
                                      // Improve dark mode contrast by adding these styles
                                      '.MuiTypography-root': {
                                        color: isCurrentUser ? 'primary.contrastText' : 'text.primary',
                                      },
                                      // Dark mode specific styling
                                      '.MuiPaper-root.MuiPaper-elevation': {
                                        borderColor: theme => theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.05)',
                                      }
                                    }}
                                  >
                                    <Typography 
                                      variant="body1" 
                                      sx={{ 
                                        color: isCurrentUser ? 'inherit' : 'text.primary'
                                      }}
                                    >{message.content}</Typography>
                                  </Paper>
                                ) : (
                                  <RenderFileMessage 
                                    message={message}
                                    handleOpenFile={handleOpenFile}
                                  />
                                )}
                              </Box>
                              
                              {/* Message reactions if any */}
                              {message.reactions && Object.keys(message.reactions).length > 0 && (
                                <Box sx={{ 
                                  display: 'flex', 
                                  justifyContent: isCurrentUser ? 'flex-end' : 'flex-start', 
                                  mt: 0.5, 
                                  alignItems: 'center',
                                  ml: !isCurrentUser ? 5 : 0, // Th√™m margin left khi kh√¥ng ph·∫£i ng∆∞·ªùi d√πng hi·ªán t·∫°i
                                  mr: isCurrentUser ? 5 : 0   // Th√™m margin right khi l√† ng∆∞·ªùi d√πng hi·ªán t·∫°i
                                }}>
                                  <MessageReactions 
                                    reactions={message.reactions}
                                    messageId={message._id || message.id}
                                    currentUserId={userId}
                                    onAddReaction={handleAddReaction} 
                                    onRemoveReaction={handleRemoveReaction}
                                  />
                                  
                                  {/* Add Pin button for group chats */}
                                  {activeConversation?.type === 'group' && !message.isRevoked && (
                                    <PinMessageButton 
                                      message={message} 
                                      conversation={activeConversation}
                                      onPinStatusChange={(messageId, isPinned) => {
                                        setMessages(prevMessages => 
                                          prevMessages.map(msg => 
                                            msg._id === messageId ? { ...msg, isPinned } : msg
                                          )
                                        );
                                      }}
                                    />
                                  )}
                                </Box>
                              )}
                              
                              {/* Add reaction button if not showing reactions */}
                              {(!message.reactions || Object.keys(message.reactions).length === 0) && !message.isRevoked && (
                                <Box sx={{ 
                                  display: 'flex', 
                                  justifyContent: isCurrentUser ? 'flex-end' : 'flex-start', 
                                  mt: 0.5,
                                  ml: !isCurrentUser ? 5 : 0, // Th√™m margin left khi kh√¥ng ph·∫£i ng∆∞·ªùi d√πng hi·ªán t·∫°i
                                  mr: isCurrentUser ? 5 : 0   // Th√™m margin right khi l√† ng∆∞·ªùi d√πng hi·ªán t·∫°i
                                }}>
                                  <MessageReactions 
                                    reactions={{}}
                                    messageId={message._id || message.id}
                                    currentUserId={userId}
                                    onAddReaction={handleAddReaction} 
                                    onRemoveReaction={handleRemoveReaction}
                                  />
                                  
                                  {/* Add Pin button for group chats */}
                                  {activeConversation?.type === 'group' && !message.isRevoked && (
                                    <PinMessageButton 
                                      message={message} 
                                      conversation={activeConversation}
                                      onPinStatusChange={(messageId, isPinned) => {
                                        setMessages(prevMessages => 
                                          prevMessages.map(msg => 
                                            msg._id === messageId ? { ...msg, isPinned } : msg
                                          )
                                        );
                                      }}
                                    />
                                  )}
                                </Box>
                              )}
                              
                              <Box sx={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                mt: 0.5,
                                mx: 1,
                                ml: !isCurrentUser ? 5 : 1, // Th√™m margin left khi kh√¥ng ph·∫£i ng∆∞·ªùi d√πng hi·ªán t·∫°i
                                mr: isCurrentUser ? 5 : 1   // Th√™m margin right khi l√† ng∆∞·ªùi d√πng hi·ªán t·∫°i
                              }}>
                                <Typography 
                                  variant="caption" 
                                  color={theme => 
                                    theme.palette.mode === 'dark' 
                                      ? isCurrentUser ? 'rgba(255,255,255,0.7)' : 'rgba(255,255,255,0.5)' 
                                      : 'text.secondary'
                                  }
                                  sx={{ fontSize: '0.7rem' }}
                                >
                                  {formatChatTime(message.createdAt)}
                                </Typography>
                                
                                {isCurrentUser && (
                                  <Box sx={{ display: 'flex', alignItems: 'center', ml: 0.5 }}>
                                    {message.status === "sending" ? (
                                      <CircularProgress size={8} sx={{ ml: 0.5 }} />
                                    ) : message.status === "failed" ? (
                                      <Typography variant="caption" color="error" sx={{ ml: 0.5 }}>
                                        !
                                      </Typography>
                                    ) : message.seen ? (
                                      <DoneAllIcon sx={{ fontSize: 12, ml: 0.5, color: 'primary.main' }} />
                                    ) : message.delivered ? (
                                      <DoneAllIcon sx={{ 
                                        fontSize: 12, 
                                        ml: 0.5, 
                                        color: theme => 
                                          theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.7)' : 'text.secondary' 
                                      }} />
                                    ) : (
                                      <DoneAllIcon sx={{ 
                                        fontSize: 12, 
                                        ml: 0.5, 
                                        color: theme => 
                                          theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.7)' : 'text.secondary' 
                                      }} />
                                    )}
                                  </Box>
                                )}
                              </Box>
                            </Box>
                          )}
                        </React.Fragment>
                      );
                    })
                  )
                )}
                <div ref={messagesEndRef} />
              </Box>
                
              {/* Chat Input */}
                  <Box
                    sx={{
                  p: 2,
                  bgcolor: "background.paper",
                  borderTop: "1px solid",
                  borderColor: "divider",
                    }}
                  >
                {/* Display typing indicator */}
                {Object.keys(typingUsers).length > 0 && (
                  <Box sx={{ mb: 1, height: 20 }}>
                    <Typography variant="caption" color="text.secondary">
                      {Object.values(typingUsers).join(', ')} ƒëang nh·∫≠p...
                      <span className="typing-animation">
                        <span className="dot"></span>
                        <span className="dot"></span>
                        <span className="dot"></span>
                      </span>
                    </Typography>
                  </Box>
                )}

                {/* File preview */}
                {selectedFile && (
                  <Box sx={{ 
                      mb: 2, 
                    p: 1, 
                    bgcolor: 'action.hover', 
                    borderRadius: 1,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between'
                  }}>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      {selectedFile.type.startsWith('image/') && selectedFilePreview ? (
                        <Avatar 
                          variant="rounded" 
                      src={selectedFilePreview} 
                          sx={{ width: 40, height: 40, mr: 1 }} 
                    />
                      ) : selectedFile.type.startsWith('video/') ? (
                        <Avatar variant="rounded" sx={{ width: 40, height: 40, mr: 1, bgcolor: 'primary.dark' }}>
                          <VideocamIcon />
                        </Avatar>
                      ) : selectedFile.type.startsWith('audio/') ? (
                        <Avatar variant="rounded" sx={{ width: 40, height: 40, mr: 1, bgcolor: 'secondary.dark' }}>
                          <AudiotrackIcon />
                        </Avatar>
                      ) : selectedFile.type.includes('pdf') ? (
                        <Avatar variant="rounded" sx={{ width: 40, height: 40, mr: 1, bgcolor: 'error.dark' }}>
                          <PictureAsPdfIcon />
                        </Avatar>
                      ) : selectedFile.type.includes('word') || selectedFile.name.endsWith('.doc') || selectedFile.name.endsWith('.docx') ? (
                        <Avatar variant="rounded" sx={{ width: 40, height: 40, mr: 1, bgcolor: 'info.dark' }}>
                          <DescriptionIcon />
                        </Avatar>
                      ) : selectedFile.type.includes('excel') || selectedFile.name.endsWith('.xls') || selectedFile.name.endsWith('.xlsx') ? (
                        <Avatar variant="rounded" sx={{ width: 40, height: 40, mr: 1, bgcolor: 'success.dark' }}>
                          <TableChartIcon />
                        </Avatar>
                      ) : (
                        <Avatar variant="rounded" sx={{ width: 40, height: 40, mr: 1, bgcolor: 'grey.700' }}>
                          <InsertDriveFileIcon />
                        </Avatar>
                      )}
                      <Typography variant="body2" noWrap sx={{ maxWidth: '200px' }}>
                          {selectedFile.name}
                        </Typography>
                      </Box>
                    <IconButton onClick={handleCancelFileSelection} size="small">
                      <CancelIcon fontSize="small" />
                    </IconButton>
                  </Box>
                )}
                
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <FileUploadGroup onFileSelect={handleFileSelectFromGroup} />
                  
                  <IconButton onClick={handleEmojiOpen}>
                    <InsertEmoticonIcon />
                  </IconButton>
                  
                  <IconButton onClick={(e) => handleTabChange(e)}>
                    <GifIcon />
                  </IconButton>
                  
                  {/* Popover cho GiphyGallery */}
                  <Popover
                    open={showGifGallery}
                    anchorEl={emojiAnchorEl}
                    onClose={handleEmojiClose}
                    anchorOrigin={{
                      vertical: 'top',
                      horizontal: 'center',
                    }}
                    transformOrigin={{
                      vertical: 'bottom',
                      horizontal: 'center',
                    }}
                  >
                    <GiphyGallery onSelectGif={handleSendGif} onClose={handleEmojiClose} />
                  </Popover>
                  
                  <TextField
                    fullWidth
                    placeholder="Nh·∫≠p tin nh·∫Øn ho·∫∑c @ ƒë·ªÉ g·ªçi AI..."
                    value={newMessage}
                    onChange={handleMessageTyping}
                    onKeyPress={handleKeyPress}
                    inputRef={inputRef}
                    variant="outlined"
                    size="small"
                    disabled={isProcessingAI}
                    sx={{ mx: 1 }}
                    helperText={isProcessingAI ? "ƒêang x·ª≠ l√Ω y√™u c·∫ßu AI..." : "G√µ @ ƒë·ªÉ hi·ªÉn th·ªã g·ª£i √Ω AI"}
                  />
                  
                  <IconButton
                    color="primary"
                    onClick={handleSendMessage}
                    disabled={(!newMessage.trim() && !selectedFile) || isProcessingAI}
                  >
                    {isProcessingAI ? <CircularProgress size={24} /> : <SendIcon />}
                  </IconButton>
                </Box>
            </Box>
          </>
        ) : (
          <Box
            sx={{
              flex: 1,
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              flexDirection: "column",
              p: 4,
              bgcolor: "background.default",
            }}
          >
              <img 
                src="http://localhost:4000/uploads/logo.webp" 
                alt="Select a conversation" 
                style={{ 
                  width: '200px', 
                  height: '200px', 
                  marginBottom: '32px',
                  opacity: 0.8,
                  objectFit: 'contain'
                }}
              />
              <Typography variant="h5" color="text.primary" gutterBottom>
                Ch√†o m·ª´ng ƒë·∫øn v·ªõi Chattera
              </Typography>
              <Typography variant="body1" color="text.secondary" align="center" sx={{ mb: 3, maxWidth: '500px' }}>
                Ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán t·ª´ danh s√°ch b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫Øn tin, 
                ho·∫∑c t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi v·ªõi b·∫°n b√®.
              </Typography>
              <Box sx={{ display: 'flex', gap: 2 }}>
                <Button
                  variant="contained"
                  startIcon={<PersonAddIcon />}
                  onClick={() => navigation.navigate('Contacts')}
                >
                  T√¨m b·∫°n b√®
                </Button>
                <Button
                  variant="outlined"
                  startIcon={<GroupAddIcon />}
                  onClick={handleCreateGroup}
                >
                  T·∫°o nh√≥m chat
                </Button>
              </Box>
          </Box>
        )}
        </Box>
      </Box>

      {/* Menu ng·ªØ c·∫£nh cho tin nh·∫Øn */}
      <Menu
        anchorEl={messageContextMenu}
        open={Boolean(messageContextMenu)}
        onClose={handleMessageContextMenuClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'left',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'left',
        }}
      >
        {/* Chuy·ªÉn ti·∫øp tin nh·∫Øn */}
        <MenuItem onClick={handleForwardMessage}>
          <ListItemIcon>
            <ForwardIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Chuy·ªÉn ti·∫øp</ListItemText>
        </MenuItem>

        {/* Thu h·ªìi tin nh·∫Øn - ch·ªâ hi·ªÉn th·ªã v·ªõi tin nh·∫Øn c·ªßa m√¨nh */}
        {selectedMessage && isSentByCurrentUser(selectedMessage) && (
          <MenuItem onClick={handleRevokeMessage}>
            <ListItemIcon>
              <UndoIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText>Thu h·ªìi</ListItemText>
          </MenuItem>
        )}

        {/* X√≥a tin nh·∫Øn */}
        <MenuItem onClick={handleDeleteMessage}>
          <ListItemIcon>
            <DeleteIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>X√≥a</ListItemText>
        </MenuItem>
      </Menu>
      
      {/* Dialog ch·ªçn cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ chuy·ªÉn ti·∫øp tin nh·∫Øn */}
      <Dialog
        open={forwardDialogOpen}
        onClose={handleCloseForwardDialog}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Ch·ªçn cu·ªôc tr√≤ chuy·ªán</DialogTitle>
        <DialogContent>
          <List>
            {conversations.map((conversation) => {
              const otherUser = conversation.type === 'group' 
                ? null 
                : getOtherParticipant(conversation)?.idUser;

              return (
                <ListItem
                  key={conversation._id}
                  button
                  selected={targetConversation?._id === conversation._id}
                  onClick={() => handleSelectForwardConversation(conversation)}
                >
                  <ListItemAvatar>
                    {conversation.type === 'group' ? (
                      <Avatar>
                        <GroupIcon />
                      </Avatar>
                    ) : (
                      <Avatar src={otherUser?.avatar || ""}>
                        {!otherUser?.avatar && otherUser?.name?.[0]}
                      </Avatar>
                    )}
                  </ListItemAvatar>
                  <ListItemText 
                    primary={conversation.type === 'group' 
                      ? conversation.name 
                      : otherUser?.name || 'Ng∆∞·ªùi d√πng'
                    }
                  />
                </ListItem>
              );
            })}
          </List>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseForwardDialog}>H·ªßy</Button>
          <Button 
            onClick={handleConfirmForward}
            disabled={!targetConversation}
            variant="contained"
          >
            Chuy·ªÉn ti·∫øp
          </Button>
        </DialogActions>
      </Dialog>

      {/* Group Chat Dialogs */}
      <CreateGroupDialog
        open={createGroupDialogOpen}
        onClose={() => setCreateGroupDialogOpen(false)}
        onGroupCreated={handleGroupCreated}
      />
      
      {activeConversation && (
        <GroupMembersDialog
          open={groupMembersDialogOpen}
          onClose={() => setGroupMembersDialogOpen(false)}
          conversation={activeConversation}
          onMemberRemoved={handleMemberRemoved}
          onGroupLeft={handleGroupLeft}
          onGroupDeleted={handleGroupDeleted}
          onGroupUpdated={handleGroupUpdated}
        />
      )}
      
      {activeConversation && (
        <EditGroupDialog
          open={editGroupDialogOpen}
          onClose={() => setEditGroupDialogOpen(false)}
          conversation={activeConversation}
          onGroupUpdated={handleGroupUpdated}
        />
      )}
      
      {/* Pinned Messages Dialog */}
      {activeConversation && (
        <PinnedMessagesDialog
          open={pinnedMessagesDialogOpen}
          onClose={() => setPinnedMessagesDialogOpen(false)}
          conversation={activeConversation}
        />
      )}
      
      {/* Profile Dialog */}
      <ProfileDialog
        open={profileDialogOpen}
        onClose={handleCloseProfileDialog}
        user={selectedUser}
        currentUser={user}
      />
      {/* Component g·ª£i √Ω @AIGemini */}
      {showAIMention && (
        <Paper
          sx={{
            position: 'fixed',
            top: mentionPosition.top,
            left: mentionPosition.left,
            zIndex: 1300,
            width: 'auto',
            p: 1,
            boxShadow: 3,
            borderRadius: 1
          }}
        >
          <MenuItem 
            onClick={() => {
              // L·∫•y v·ªã tr√≠ c·ªßa k√Ω t·ª± @ trong chu·ªói
              const atIndex = newMessage.lastIndexOf('@');
              if (atIndex !== -1) {
                // Thay th·∫ø @ b·∫±ng @AIGemini
                const updatedMessage = 
                  newMessage.substring(0, atIndex) + 
                  '@AIGemini ' + 
                  newMessage.substring(atIndex + 1);
                setNewMessage(updatedMessage);
                // ·∫®n g·ª£i √Ω
                setShowAIMention(false);
                // Focus v√†o input
                inputRef.current?.focus();
              }
            }}
            sx={{ 
              display: 'flex', 
              alignItems: 'center',
              gap: 1,
              p: 1
            }}
          >
            <SmartToyIcon color="primary" fontSize="small" />
            <Typography>AIGemini</Typography>
          </MenuItem>
        </Paper>
      )}
      
      {/* Snackbar ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
        action={
          <IconButton
            size="small"
            color="inherit"
            onClick={() => setSnackbarOpen(false)}
          >
            <CloseIcon fontSize="small" />
          </IconButton>
        }
      />
    </Box>
  );
};



export default ChatUI;

