// Th√™m m·ªôt l·ªõp ghi log ƒë∆°n gi·∫£n v√†o ƒë·∫ßu file
const Logger = {
  // C√°c c·∫•p ƒë·ªô log
  levels: {
    DEBUG: 0,  // Chi ti·∫øt nh·∫•t, h·ªØu √≠ch khi ph√°t tri·ªÉn
    INFO: 1,   // Th√¥ng tin chung
    WARN: 2,   // C·∫£nh b√°o
    ERROR: 3,  // L·ªói
  },
  
  // C·∫•u h√¨nh c·∫•p ƒë·ªô hi·ªán t·∫°i
  currentLevel: 1, // M·∫∑c ƒë·ªãnh ch·ªâ hi·ªán INFO tr·ªü l√™n
  
  // B·∫≠t/t·∫Øt group logs cho d·ªÖ ƒë·ªçc
  useGroups: true,
  
  // Thi·∫øt l·∫≠p c·∫•p ƒë·ªô log
  setLevel(level) {
    this.currentLevel = level;
  },
  
  // C√°c ph∆∞∆°ng th·ª©c log theo c·∫•p ƒë·ªô
  debug(message, data) {
    if (this.currentLevel <= this.levels.DEBUG) {
      if (data && this.useGroups) {
        console.groupCollapsed(`üîç ${message}`);
        console.log(data);
        console.groupEnd();
      } else {
        console.log(`üîç ${message}`, data || '');
      }
    }
  },
  
  info(message, data) {
    if (this.currentLevel <= this.levels.INFO) {
      if (data && this.useGroups) {
        console.groupCollapsed(`‚ÑπÔ∏è ${message}`);
        console.log(data);
        console.groupEnd();
      } else {
        console.log(`‚ÑπÔ∏è ${message}`, data || '');
      }
    }
  },
  
  warn(message, data) {
    if (this.currentLevel <= this.levels.WARN) {
      if (data && this.useGroups) {
        console.groupCollapsed(`‚ö†Ô∏è ${message}`);
        console.log(data);
        console.groupEnd();
      } else {
        console.warn(`‚ö†Ô∏è ${message}`, data || '');
      }
    }
  },
  
  error(message, error) {
    if (this.currentLevel <= this.levels.ERROR) {
      if (error && this.useGroups) {
        console.groupCollapsed(`‚ùå ${message}`);
        console.error(error);
        console.groupEnd();
      } else {
        console.error(`‚ùå ${message}`, error || '');
      }
    }
  }
};

// Trong m√¥i tr∆∞·ªùng production, ch·ªâ hi·ªÉn th·ªã l·ªói
if (process.env.NODE_ENV === 'production') {
  Logger.setLevel(Logger.levels.ERROR);
}

import axios from "axios";
import AuthService from "./AuthService";
import SocketService from "./SocketService";
import GeminiService from "./GeminiService";
import { API_URL as BASE_API_URL, getApiUrl } from "../config/constants";

// T·∫°o h√†m helper ƒë·ªÉ l·∫•y API URL hi·ªán t·∫°i
const getBaseUrl = async () => {
  try {
    const baseUrl = await getApiUrl();
    return baseUrl;
  } catch (error) {
    console.error('Error getting API URL, using default', error);
    return BASE_API_URL;
  }
};

// Kh·ªüi t·∫°o v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
let API_URL = `${BASE_API_URL}/chat`;

// H√†m helper ƒë·ªÉ t·∫°o URL API ƒë·∫ßy ƒë·ªß
const getApiEndpoint = async (endpoint) => {
  const baseUrl = await getBaseUrl();
  return `${baseUrl}/chat${endpoint}`;
};

// C·∫≠p nh·∫≠t API URL khi c√≥ thay ƒë·ªïi
const updateServiceApiUrl = async () => {
  try {
    const baseUrl = await getBaseUrl();
    API_URL = `${baseUrl}/chat`;
    Logger.info('API URL updated', { API_URL });
  } catch (error) {
    Logger.error('Failed to update API URL', error);
  }
};

// G·ªçi h√†m n√†y khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
updateServiceApiUrl();

class ChatService {
  // Get conversation by ID
  static async getConversationById(conversationId) {
    try {
      Logger.info('Fetching conversation by ID', { conversationId });
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.get(`${API_URL}/conversation/${conversationId}`, config);
      return response.data;
    } catch (error) {
      Logger.error("Error fetching conversation by ID", error);
      throw error;
    }
  }

  // Create a new group conversation
  static async createGroupConversation(groupData, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      Logger.info('Creating new group conversation', { groupName: groupData.name });
      
      const response = await axios.post(
        `${API_URL}/group`, 
        groupData,
        config
      );
      
      // Ensure the response includes the admin role
      if (response.data && response.data.conversation) {
        const userData = AuthService.getUserData();
        if (userData) {
          response.data.conversation.admin = {
            _id: userData._id,
            name: userData.name,
            avatar: userData.avatar
          };
        }
      }
      
      return response.data;
    } catch (error) {
      Logger.error("Error creating group conversation", error);
      throw error;
    }
  }

  // Add members to a group
  static async addMembersToGroup(conversationId, memberIds, token) {
    try {
      if (!token) {
        throw new Error('No token provided');
      }

      // Remove 'Bearer ' if it's already included in the token
      const cleanToken = token.replace('Bearer ', '');
      
      Logger.debug('Clean token:', cleanToken);
      
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };
      
      Logger.info('Adding members to group', { conversationId, memberCount: memberIds.length });
      
      const response = await axios.post(
        `${API_URL}/group/members`, 
        { conversationId, memberIds },
        config
      );
      
      return response.data;
    } catch (error) {
      Logger.error("Error adding members to group", error);
      if (error.response) {
        Logger.error("Response details:", {
          data: error.response.data,
          status: error.response.status,
          headers: error.response.headers
        });
      }
      throw error;
    }
  }

  // Remove a member from a group
  static async removeMemberFromGroup(conversationId, memberId, token) {
    try {
      const cleanToken = token.replace('Bearer ', '');
      console.log('Clean token:', cleanToken); // Debug log
      
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };

      console.log('Request config:', config); // Debug log
      console.log('Removing member from conversation:', conversationId); // Debug log
      console.log('Member to remove:', memberId); // Debug log
      
      // Get current user data to determine role
      const userData = AuthService.getUserData();
      
      // N·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ d·ªØ li·ªáu th√¨ kh√¥ng th·ªÉ x√°c ƒë·ªãnh vai tr√≤
      if (!userData) {
        throw new Error('User data not available');
      }
      
      // Ki·ªÉm tra quy·ªÅn admin cho cu·ªôc tr√≤ chuy·ªán c·ª• th·ªÉ
      const adminId = localStorage.getItem(`adminId_${conversationId}`) || localStorage.getItem('adminId');
      const admin2Id = localStorage.getItem(`admin2Id_${conversationId}`) || localStorage.getItem('admin2Id');
      
      // Chuy·ªÉn ƒë·ªïi ID sang string ƒë·ªÉ so s√°nh ch√≠nh x√°c
      const currentUserId = userData._id.toString();
      const adminIdStr = adminId ? adminId.toString() : null;
      const admin2IdStr = admin2Id ? admin2Id.toString() : null;
      
      const isAdmin = adminIdStr && currentUserId === adminIdStr;
      const isAdmin2 = admin2IdStr && currentUserId === admin2IdStr;
      
      console.log('Current user role check:', { 
        currentUserId, 
        adminId: adminIdStr, 
        admin2Id: admin2IdStr,
        isAdmin, 
        isAdmin2 
      });
      
      // Tr∆∞·ªõc khi x√≥a, l·∫•y th√¥ng tin v·ªÅ th√†nh vi√™n b·ªã x√≥a ƒë·ªÉ g·ª≠i qua socket
      let memberName = '';
      try {
        // L·∫•y th√¥ng tin cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ t√¨m t√™n th√†nh vi√™n
        const conversationResponse = await axios.get(
          `${API_URL}/conversation/${conversationId}`,
          config
        );
        
        if (conversationResponse.data && conversationResponse.data.members) {
          const memberToRemove = conversationResponse.data.members.find(
            member => member.idUser && (
              (member.idUser._id && member.idUser._id.toString() === memberId.toString()) ||
              (typeof member.idUser === 'string' && member.idUser.toString() === memberId.toString())
            )
          );
          
          if (memberToRemove && memberToRemove.idUser) {
            memberName = typeof memberToRemove.idUser === 'object' 
              ? memberToRemove.idUser.name || 'Th√†nh vi√™n'
              : 'Th√†nh vi√™n';
          }
        }
      } catch (error) {
        console.warn('Could not fetch member name before removal:', error);
      }
      
      let response;
      
      // Use different endpoints based on user role
      if (isAdmin2 && !isAdmin) {
        // For admin2, use a POST request to a different endpoint
        console.log('Using admin2 endpoint for member removal');
        response = await axios.post(
          `${API_URL}/group/${conversationId}/admin2/remove/${memberId}`,
          {},
          config
        );
      } else {
        // For admin, use the standard DELETE endpoint
        console.log('Using standard admin endpoint for member removal');
        response = await axios.delete(
          `${API_URL}/group/${conversationId}/members/${memberId}`,
          config
        );
      }
      
      console.log('Response data:', response.data); // Debug log
      
      // G·ª≠i th√¥ng tin chi ti·∫øt qua socket ƒë·ªÉ c·∫≠p nh·∫≠t real-time
      SocketService.emitMemberRemovedFromGroup({
        conversationId,
        memberId,
        removedBy: userData._id,
        removedByName: userData.name,
        memberName: memberName,
        timestamp: new Date().toISOString()
      });
      
      return response.data;
    } catch (error) {
      console.error('Error removing member from group:', error);
      if (error.response) {
        console.error('Response data:', error.response.data);
        console.error('Response status:', error.response.status);
        console.error('Response headers:', error.response.headers);
      }
      throw error;
    }
  }

  // Leave a group
  static async leaveGroup(conversationId, token) {
    try {
      if (!token) {
        throw new Error('No token provided');
      }

      // Remove 'Bearer ' if it's already included in the token
      const cleanToken = token.replace('Bearer ', '');
      
      console.log('Clean token for leave group:', cleanToken); // Debug log
      
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };
      
      console.log('Leave group request config:', config); // Debug log
      
      // Using POST method to match the backend route
      const response = await axios.post(
        `${API_URL}/group/leave/${conversationId}`,
        {}, // Empty body for POST request
        config
      );
      
      return response.data;
    } catch (error) {
      console.error("Error leaving group:", error);
      if (error.response) {
        console.error("Response data:", error.response.data);
        console.error("Response status:", error.response.status);
        console.error("Response headers:", error.response.headers);
      }
      throw error;
    }
  }

  // Update group information
  static async updateGroupInfo(groupData, token) {
    try {
      if (!token) {
        throw new Error('No token provided');
      }

      // Remove 'Bearer ' if it's already included in the token
      const cleanToken = token.replace('Bearer ', '');
      
      console.log('Clean token:', cleanToken); // Debug log
      
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };
      
      console.log('Request config:', config); // Debug log
      console.log('Group data:', groupData); // Debug log
      
      const response = await axios.put(
        `${API_URL}/group`, 
        groupData,
        config
      );
      
      return response.data;
    } catch (error) {
      console.error("Error updating group info:", error);
      if (error.response) {
        console.error("Response data:", error.response.data);
        console.error("Response status:", error.response.status);
        console.error("Response headers:", error.response.headers);
      }
      throw error;
    }
  }

  // Delete a group
  static async deleteGroup(conversationId, token) {
    try {
      if (!token) {
        throw new Error('No token provided');
      }

      // Remove 'Bearer ' if it's already included in the token
      const cleanToken = token.replace('Bearer ', '');
      
      console.log('Clean token:', cleanToken); // Debug log
      
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };
      
      console.log('Request config:', config); // Debug log
      
      const response = await axios.delete(
        `${API_URL}/group/${conversationId}`,
        config
      );
      
      return response.data;
    } catch (error) {
      console.error("Error deleting group:", error);
      if (error.response) {
        console.error("Response data:", error.response.data);
        console.error("Response status:", error.response.status);
        console.error("Response headers:", error.response.headers);
      }
      throw error;
    }
  }

  // L·∫•y danh s√°ch cu·ªôc tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng v·ªõi metadata t·ªëi thi·ªÉu
  static async getUserConversations(userId) {
    try {
      Logger.info('Fetching conversations for user', { userId });
      
      // Th√™m tham s·ªë ch·ªâ l·∫•y metadata, kh√¥ng t·∫£i l·ªãch s·ª≠ tin nh·∫Øn ƒë·∫ßy ƒë·ªß
      // Explicity request fully populated user data with the 'populate_users=true' parameter
      const response = await axios.get(`${API_URL}/conversations/${userId}?metadata_only=true&populate_users=true`);
      
      // Validate conversation member data
      if (response.data && Array.isArray(response.data)) {
        // Check if any conversations have unpopulated member data
        const hasUnpopulatedMembers = response.data.some(conv => {
          if (!conv.members || !Array.isArray(conv.members)) return false;
          
          return conv.members.some(member => {
            return member.idUser && typeof member.idUser === 'string';
          });
        });
        
        if (hasUnpopulatedMembers) {
          Logger.warn('Some conversations have unpopulated member data', {
            conversationCount: response.data.length
          });
        }
        
        // X·ª≠ l√Ω d·ªØ li·ªáu cu·ªôc tr√≤ chuy·ªán v√† l∆∞u th√¥ng tin admin v√†o localStorage
        response.data.forEach(conversation => {
          if (conversation.type === 'group') {
            // L∆∞u th√¥ng tin admin
            if (conversation.admin) {
              const adminId = conversation.admin._id || conversation.admin;
              localStorage.setItem(`adminId_${conversation._id}`, adminId);
            }
            
            // L∆∞u th√¥ng tin admin2
            if (conversation.admin2) {
              const admin2Id = conversation.admin2._id || conversation.admin2;
              localStorage.setItem(`admin2Id_${conversation._id}`, admin2Id);
            }
          }
        });
      }
      
      Logger.info(`Fetched ${response.data.length} conversations`);
      return response.data;
    } catch (error) {
      Logger.error("Error fetching conversations", error);
      throw error;
    }
  }

  // L·∫•y tin nh·∫Øn v·ªõi lazy loading
  static async getConversationMessages(conversationId, options = {}) {
    try {
      Logger.info('Fetching messages for conversation', { conversationId, options });
      
      // Gi·∫£m gi·ªõi h·∫°n m·∫∑c ƒë·ªãnh xu·ªëng 15 tin nh·∫Øn m·ªói l·∫ßn t·∫£i ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t
      const limit = options.limit || 15;
      
      // X√¢y d·ª±ng URL parameters
      let url = `${API_URL}/allmessage/${conversationId}?limit=${limit}`;
      
      // Th√™m tham s·ªë before n·∫øu c√≥
      if (options.before) {
        url += `&before=${options.before}`;
      }
      
      Logger.debug('Request URL:', url);
      const response = await axios.get(url);
      
      // Chu·∫©n h√≥a d·ªØ li·ªáu tin nh·∫Øn ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
      const normalizeMessages = (messages) => {
        if (!Array.isArray(messages)) return [];
        
        return messages.map(msg => {
          // ƒê·∫£m b·∫£o ID ng∆∞·ªùi g·ª≠i lu√¥n ·ªü d·∫°ng chu·ªói ƒë·ªÉ so s√°nh nh·∫•t qu√°n
          if (msg.sender && typeof msg.sender === 'object' && msg.sender._id) {
            msg.originalSender = { ...msg.sender }; // L∆∞u th√¥ng tin ng∆∞·ªùi g·ª≠i g·ªëc
            msg.sender = msg.sender._id; // Ch·ªâ l∆∞u ID
          }
          
          // ƒê·∫£m b·∫£o ID nh·∫•t qu√°n
          if (msg._id) {
            msg.id = msg._id;
          }
          
          return msg;
        });
      };
      
      // Tin nh·∫Øn s·∫Ω tr·∫£ v·ªÅ d·∫°ng { messages: [], hasMore: boolean, nextCursor: string }
      const messageCount = response.data.messages?.length || (Array.isArray(response.data) ? response.data.length : 0);
      Logger.info(`Fetched ${messageCount} messages`);
      
      // N·∫øu API tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng m·ªõi, x·ª≠ l√Ω
      if (response.data && response.data.messages) {
        const result = {
          messages: normalizeMessages(response.data.messages),
          hasMore: response.data.hasMore || false,
          nextCursor: response.data.nextCursor || null
        };
        Logger.debug('Normalized response with pagination', { hasMore: result.hasMore, messageCount: result.messages.length });
        return result;
      } 
      // N·∫øu API tr·∫£ v·ªÅ theo ƒë·ªãnh d·∫°ng c≈© (m·∫£ng tin nh·∫Øn), chuy·ªÉn ƒë·ªïi
      else if (Array.isArray(response.data)) {
        const result = {
          messages: normalizeMessages(response.data),
          hasMore: false, // Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ th√™m tin nh·∫Øn c≈© h∆°n
          nextCursor: null
        };
        Logger.debug('Converted legacy response format', { messageCount: result.messages.length });
        return result;
      } 
      // N·∫øu kh√¥ng kh·ªõp v·ªõi format n√†o
      else {
        Logger.warn('Unexpected response format', response.data);
        return { messages: [], hasMore: false, nextCursor: null };
      }
    } catch (error) {
      Logger.error("Error fetching messages", error);
      throw error;
    }
  }

  // T·∫£i th√™m tin nh·∫Øn c≈© h∆°n (lazy loading)
  static async loadMoreMessages(conversationId, beforeTimestamp, limit = 20) {
    try {
      Logger.info(`Loading more messages`, { conversationId, before: beforeTimestamp, limit });
      return this.getConversationMessages(conversationId, {
        before: beforeTimestamp,
        limit: limit
      });
    } catch (error) {
      Logger.error("Error loading more messages", error);
      throw error;
    }
  }

  // Get friends list (from conversations)
  static async getUserFriends(userId) {
    try {
      const response = await axios.get(`${API_URL}/friend/${userId}`);
      return response.data;
    } catch (error) {
      console.error("Error fetching user friends:", error);
      throw error;
    }
  }

  // Send a new message
  static async sendMessage(messageData, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      Logger.info('Sending message', { 
        conversationId: messageData.idConversation, 
        type: messageData.type || 'text'
      });
      
      const response = await axios.post(
        `${API_URL}/message`, 
        messageData,
        config
      );
      
      return response.data;
    } catch (error) {
      Logger.error("Error sending message via HTTP", error);
      throw error;
    }
  }

  // Mark messages as seen
  static async markMessagesAsSeen(conversationId, token) {
    try {
      const config = {
        headers: {
          authorization: `Bearer ${token}`,
        },
      };
      const response = await axios.post(
        `${API_URL}/seen/${conversationId}`,
        {},
        config
      );
      return response.data;
    } catch (error) {
      console.error("Error marking messages as seen:", error);
      throw error;
    }
  }

  // Create a new conversation
  static async createConversation(userFrom, userTo) {
    try {
      const response = await axios.post(`${API_URL}/create`, {
        userFrom,
        userTo,
      });
      return response.data;
    } catch (error) {
      console.error("Error creating conversation:", error);
      throw error;
    }
  }

  // Join an existing conversation
  static async joinConversation(conversationId) {
    try {
      const response = await axios.get(`${API_URL}/join/${conversationId}`);
      return response.data;
    } catch (error) {
      console.error("Error joining conversation:", error);
      throw error;
    }
  }

  // Upload file message
  static async uploadFile(formData, token) {
    try {
      // Ch·ªâ log th√¥ng tin c∆° b·∫£n c·ªßa file, kh√¥ng log to√†n b·ªô formData
      const fileInfo = {
        fileName: formData.get('file')?.name,
        fileSize: formData.get('file')?.size,
        fileType: formData.get('file')?.type,
        conversationId: formData.get('idConversation'),
        messageType: formData.get('type')
      };
      
      Logger.info("Uploading file", fileInfo);
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'multipart/form-data'
        }
      };
      
      const response = await axios.post(
        `${API_URL}/upload`, 
        formData,
        config
      );
      
      Logger.info("File upload successful", { fileUrl: response.data.fileUrl });
      return response.data;
    } catch (error) {
      Logger.error("Error uploading file", error);
      // Xem chi ti·∫øt l·ªói t·ª´ response n·∫øu c√≥
      if (error.response && error.response.data) {
        Logger.error("Server error details", error.response.data);
      }
      throw error;
    }
  }
  
  // Ki·ªÉm tra xem URL c√≥ ho·∫°t ƒë·ªông kh√¥ng
  static async checkFileUrl(url) {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      return response.ok;
    } catch (error) {
      console.error("Error checking file URL:", error);
      return false;
    }
  }
  
  // T·∫£i xu·ªëng file t·ª´ URL
  static async downloadFile(url, fileName) {
    try {
      // T·∫°o m·ªôt th·∫ª a t·∫°m th·ªùi ƒë·ªÉ t·∫£i xu·ªëng
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', fileName || 'download');
      link.setAttribute('target', '_blank');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      return true;
    } catch (error) {
      console.error("Error downloading file:", error);
      return false;
    }
  }

  // Th√™m c·∫£m x√∫c v√†o tin nh·∫Øn
  static async addReaction(messageId, userId, emoji, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.post(
        `${API_URL}/message/reaction`, 
        { messageId, userId, emoji },
        config
      );
      
      return response.data;
    } catch (error) {
      console.error("Error adding reaction:", error);
      throw error;
    }
  }
  
  // X√≥a c·∫£m x√∫c kh·ªèi tin nh·∫Øn
  static async removeReaction(messageId, userId, emoji, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.post(
        `${API_URL}/message/reaction/remove`, 
        { messageId, userId, emoji },
        config
      );
      
      return response.data;
    } catch (error) {
      console.error("Error removing reaction:", error);
      throw error;
    }
  }
  
  // Chuy·ªÉn ti·∫øp tin nh·∫Øn
  static async forwardMessage(messageId, conversationId, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.post(
        `${API_URL}/message/forward`, 
        { messageId, conversationId },
        config
      );
      
      return response.data;
    } catch (error) {
      console.error('Error forwarding message:', error);
      return { success: false, message: error.response?.data?.message || 'Failed to forward message' };
    }
  }
  
  // Pin a message in a group chat
  static async pinMessage(messageId, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.post(
        `${API_URL}/message/${messageId}/pin`,
        {},
        config
      );
      
      return response.data;
    } catch (error) {
      console.error('Error pinning message:', error);
      return { success: false, message: error.response?.data?.message || 'Failed to pin message' };
    }
  }
  
  // Unpin a message in a group chat
  static async unpinMessage(messageId, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.delete(
        `${API_URL}/message/${messageId}/pin`,
        { headers: config.headers }
      );
      
      return response.data;
    } catch (error) {
      console.error('Error unpinning message:', error);
      return { success: false, message: error.response?.data?.message || 'Failed to unpin message' };
    }
  }
  
  // Get all pinned messages in a conversation
  static async getPinnedMessages(conversationId, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.get(
        `${API_URL}/conversation/${conversationId}/pinned-messages`,
        { headers: config.headers }
      );
      
      return response.data;
    } catch (error) {
      console.error('Error getting pinned messages:', error);
      return { success: false, message: error.response?.data?.message || 'Failed to get pinned messages' };
    }
  }
  
  // Unpin a message in a group chat
  static async unpinMessage(messageId, token) {
    try {
      const response = await axios.delete(
        `${API_URL}/message/${messageId}/pin`,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      return response.data;
    } catch (error) {
      console.error('Error unpinning message:', error);
      return { success: false, message: error.response?.data?.message || 'Failed to unpin message' };
    }
  }
  
  // Get all pinned messages in a conversation
  static async getPinnedMessages(conversationId, token) {
    try {
      const response = await axios.get(
        `${API_URL}/conversation/${conversationId}/pinned-messages`,
        {
          headers: {
            Authorization: `Bearer ${token}`
          }
        }
      );
      return response.data;
    } catch (error) {
      console.error('Error getting pinned messages:', error);
      return { success: false, message: error.response?.data?.message || 'Failed to get pinned messages' };
    }
  }

  // Set admin2
  static async setAdmin2(conversationId, memberId, token) {
    try {
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.post(
        `${API_URL}/group/admin2`,
        { conversationId, memberId },
        config
      );
      
      // L∆∞u ID c·ªßa admin2 m·ªõi v√†o localStorage
      if (response.data && response.data.admin2) {
        const admin2Id = response.data.admin2._id || response.data.admin2;
        localStorage.setItem(`admin2Id_${conversationId}`, admin2Id);
      }
      
      return response.data;
    } catch (error) {
      console.error("Error setting admin2:", error);
      throw error;
    }
  }

  // Remove admin2
  static async removeAdmin2(conversationId, token) {
    try {
      if (!token) {
        throw new Error('No token provided');
      }

      // Remove 'Bearer ' if it's already included in the token
      const cleanToken = token.replace('Bearer ', '');
      
      console.log('Clean token:', cleanToken); // Debug log
      
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };
      
      console.log('Request config:', config); // Debug log
      console.log('Removing admin2 from conversation:', conversationId); // Debug log
      
      // Make sure we're using the correct URL format
      const response = await axios({
        method: 'delete',
        url: `${API_URL}/group/admin2/${conversationId}`,
        headers: config.headers
      });
      
      // X√≥a ID c·ªßa admin2 kh·ªèi localStorage khi admin2 b·ªã x√≥a
      localStorage.removeItem(`admin2Id_${conversationId}`);
      
      return response.data;
    } catch (error) {
      console.error("Error removing admin2:", error);
      if (error.response) {
        console.error("Response data:", error.response.data);
        console.error("Response status:", error.response.status);
        console.error("Response headers:", error.response.headers);
      }
      throw error;
    }
  }

  // Update group permissions
  static async updateGroupPermissions(conversationId, permissions, token) {
    try {
      console.log('Making request with token:', token); // Debug log
      
      const config = {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.put(
        `${API_URL}/group/permissions`,
        { conversationId, permissions },
        config
      );
      
      return response.data;
    } catch (error) {
      console.error("Error updating group permissions:", error);
      throw error;
    }
  }

  // G·ª≠i tin nh·∫Øn GIF t·ª´ Giphy API
  static async sendGifMessage(conversationId, senderId, gifData, token, caption = '') {
    try {
      if (!conversationId || !senderId || !gifData) {
        throw new Error("Missing required data for sending GIF");
      }
      
      // L·∫•y URL c·ªßa GIF t·ª´ d·ªØ li·ªáu Giphy
      const gifUrl = gifData.original || gifData.url;
      
      // Create message data for GIF
      const messageData = {
        idConversation: conversationId,
        sender: senderId,
        fileUrl: gifUrl, 
        type: 'gif',
        content: caption
      };
      
      // L∆∞u tin nh·∫Øn v√†o c∆° s·ªü d·ªØ li·ªáu tr∆∞·ªõc
      const config = {
        headers: {
          Authorization: `Bearer ${token || AuthService.getAccessToken()}`,
          'Content-Type': 'application/json'
        }
      };
      
      // G·ª≠i HTTP request ƒë·ªÉ l∆∞u tin nh·∫Øn
      const response = await axios.post(
        `${API_URL}/message`, 
        messageData,
        config
      );
      
      // L·∫•y tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o database v·ªõi ID ch√≠nh x√°c
      const savedMessage = response.data;
      
      // Ch·ªâ g·ª≠i qua socket n·∫øu l∆∞u v√†o database th√†nh c√¥ng
      // V√† g·ª≠i v·ªõi ID ch√≠nh x√°c t·ª´ database ƒë·ªÉ tr√°nh duplicate
      if (savedMessage && savedMessage._id) {
        SocketService.sendMessage({
          ...messageData,
          _id: savedMessage._id,
          id: savedMessage._id
        });
      }
      
      return savedMessage || messageData;
    } catch (error) {
      console.error("Error sending GIF message:", error);
      // Kh√¥ng g·ª≠i qua socket n·∫øu HTTP request l·ªói ƒë·ªÉ tr√°nh duplicate
      // N·∫øu c·∫ßn hi·ªÉn th·ªã tin nh·∫Øn t·∫°m th·ªùi, h√£y x·ª≠ l√Ω ·ªü ph√≠a UI thay v√¨ g·ª≠i qua socket
      throw error;
    }
  }

  // Get images and videos shared in a conversation
  static async getConversationMedia(conversationId) {
    try {
      Logger.info('Fetching media for conversation', { conversationId });
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.get(`${API_URL}/conversation/${conversationId}/media`, config);
      console.log('Raw media API response:', response.data);
      
      // Handle different possible response formats
      if (response.data && response.data.media) {
        return response.data.media;
      } else if (response.data && response.data.success && response.data.media) {
        return response.data.media;
      } else if (Array.isArray(response.data)) {
        return response.data;
      }
      
      return [];
    } catch (error) {
      Logger.error("Error fetching conversation media", error);
      return [];
    }
  }

  // Get documents/files shared in a conversation
  static async getConversationFiles(conversationId) {
    try {
      Logger.info('Fetching files for conversation', { conversationId });
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.get(`${API_URL}/conversation/${conversationId}/files`, config);
      console.log('Raw files API response:', response.data);
      
      // Handle different possible response formats
      if (response.data && response.data.files) {
        return response.data.files;
      } else if (response.data && response.data.success && response.data.files) {
        return response.data.files;
      } else if (Array.isArray(response.data)) {
        return response.data;
      }
      
      return [];
    } catch (error) {
      Logger.error("Error fetching conversation files", error);
      return [];
    }
  }

  // Get links shared in a conversation
  static async getConversationLinks(conversationId) {
    try {
      Logger.info('Fetching links for conversation', { conversationId });
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const response = await axios.get(`${API_URL}/conversation/${conversationId}/links`, config);
      console.log('Raw links API response:', response.data);
      
      // Handle different possible response formats
      if (response.data && response.data.links) {
        return response.data.links;
      } else if (response.data && response.data.success && response.data.links) {
        return response.data.links;
      } else if (Array.isArray(response.data)) {
        return response.data;
      }
      
      return [];
    } catch (error) {
      Logger.error("Error fetching conversation links", error);
      return [];
    }
  }
  
  // Process @AIGemini commands in messages
  static async processAIGeminiMessage(message, conversationId, senderId) {
    try {
      Logger.info('Processing @AIGemini message', { conversationId });
      
      // Extract the query from the message (remove @AIGemini prefix)
      // H·ªó tr·ª£ c·∫£ hai c√°ch vi·∫øt @AIGemini v√† @AiGemini
      const aiPrefixes = ['@AIGemini', '@AiGemini'];
      let matchedPrefix = null;
      
      for (const prefix of aiPrefixes) {
        if (message.trim().startsWith(prefix)) {
          matchedPrefix = prefix;
          break;
        }
      }
      
      if (!matchedPrefix) {
        return null; // Not an AI message
      }
      
      const query = message.substring(matchedPrefix.length).trim();
      if (!query) {
        return {
          error: true,
          message: 'Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi sau @AIGemini'
        };
      }
      
      // T·∫°o tin nh·∫Øn t·∫°m th·ªùi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
      const tempUserMessage = {
        id: `temp-user-${Date.now()}`,
        _id: `temp-user-${Date.now()}`,
        idConversation: conversationId,
        sender: senderId,
        content: message,
        type: 'text',
        createdAt: new Date().toISOString(),
        status: 'sending'
      };
      
      // T·∫°o tin nh·∫Øn t·∫°m th·ªùi c·ªßa AI ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
      const tempAIMessage = {
        id: `temp-ai-${Date.now()}`,
        _id: `temp-ai-${Date.now()}`,
        idConversation: conversationId,
        sender: 'ai-gemini', // ID c·ªßa Gemini AI
        content: 'ƒêang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n...',
        type: 'text',
        createdAt: new Date().toISOString(),
        status: 'sending',
        isAI: true
      };
      
      // Tr·∫£ v·ªÅ c·∫£ hai tin nh·∫Øn t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc
      const tempMessages = [tempUserMessage, tempAIMessage];
      
      // G·ªçi API ƒë·ªÉ g·ª≠i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
      const token = AuthService.getAccessToken();
      const userMessageData = {
        idConversation: conversationId,
        sender: senderId,
        content: message,
        type: 'text'
      };
      
      // G·ª≠i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
      const userMessageResponse = await this.sendMessage(userMessageData, token);
      
      // G·ªçi API Gemini tr·ª±c ti·∫øp qua backend
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      // G·ªçi API endpoint /chat/gemini/message
      const geminiResponse = await axios.post(
        `${API_URL.replace('/chat', '')}/chat/gemini/message`,
        {
          content: message, // G·ª≠i tin nh·∫Øn g·ªëc bao g·ªìm c·∫£ @AIGemini
          conversationId: conversationId,
          sender: senderId // Th√™m th√¥ng tin ng∆∞·ªùi g·ª≠i
        },
        config
      );
      
      Logger.info('Gemini response received', geminiResponse.data);
      
      // C·∫≠p nh·∫≠t tin nh·∫Øn AI v·ªõi n·ªôi dung th·ª±c t·∫ø
      const aiMessageContent = geminiResponse.data?.data?.content || 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini.';
      const aiMessage = {
        id: `ai-${Date.now()}`,
        _id: geminiResponse.data?.data?._id || `ai-${Date.now()}`,
        idConversation: conversationId,
        sender: 'ai-gemini', // ID c·ªßa Gemini AI
        content: aiMessageContent,
        type: 'text',
        createdAt: new Date().toISOString(),
        status: 'sent',
        isAI: true
      };
      
      return {
        success: true,
        tempMessages: tempMessages,
        userMessage: userMessageResponse,
        aiMessage: aiMessage,
        aiResponse: aiMessageContent
      };
    } catch (error) {
      Logger.error("Error processing @AIGemini message", error);
      console.error("Error details:", error?.response?.data || error);
      return {
        error: true,
        message: 'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu AI. Vui l√≤ng th·ª≠ l·∫°i sau.'
      };
    }
  }
  
  // Generate an image using AI from text prompt
  static async generateImage(data) {
    try {
      Logger.info('Generating AI image from text', { prompt: data.prompt });
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const baseUrl = await getBaseUrl();
      const response = await axios.post(`${baseUrl}/image-ai/generate`, data, config);
      return response;
    } catch (error) {
      Logger.error("Error generating AI image", error);
      throw error;
    }
  }

  // Transform an existing image using AI
  static async transformImage(data) {
    try {
      Logger.info('Transforming image with AI', { imageUrl: data.imageUrl });
      
      const token = AuthService.getAccessToken();
      if (!token) {
        throw new Error('No authentication token found');
      }
      
      const config = {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };
      
      const baseUrl = await getBaseUrl();
      const response = await axios.post(`${baseUrl}/image-ai/transform`, data, config);
      return response;
    } catch (error) {
      Logger.error("Error transforming image with AI", error);
      throw error;
    }
  }

  // Process @Image commands in messages
  static async processImageAIMessage(message, conversationId, senderId, socketId) {
    try {
      Logger.info('Processing @Image message', { conversationId });
      
      // Extract the query from the message (remove @Image prefix)
      if (!message.trim().startsWith('@Image')) {
        return null; // Not an AI image message
      }
      
      const prompt = message.substring('@Image'.length).trim();
      if (!prompt) {
        return {
          error: true,
          message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ h√¨nh ·∫£nh sau @Image'
        };
      }
      
      // T·∫°o tin nh·∫Øn t·∫°m th·ªùi c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
      const tempUserMessage = {
        id: `temp-user-${Date.now()}`,
        _id: `temp-user-${Date.now()}`,
        idConversation: conversationId,
        sender: senderId,
        content: message,
        type: 'text',
        createdAt: new Date().toISOString(),
        status: 'sending'
      };
      
      // T·∫°o tin nh·∫Øn t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
      const tempProcessingMessage = {
        id: `temp-ai-image-${Date.now()}`,
        _id: `temp-ai-image-${Date.now()}`,
        idConversation: conversationId,
        sender: senderId,
        content: 'ƒêang t·∫°o h√¨nh ·∫£nh... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i gi√¢y.',
        type: 'text',
        createdAt: new Date().toISOString(),
        status: 'sending'
      };
      
      // Tr·∫£ v·ªÅ tin nh·∫Øn t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc
      const tempMessages = [tempUserMessage, tempProcessingMessage];
      
      // G·ªçi API ƒë·ªÉ g·ª≠i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
      const token = AuthService.getAccessToken();
      const userMessageData = {
        idConversation: conversationId,
        sender: senderId,
        content: message,
        type: 'text'
      };
      
      // G·ª≠i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
      const userMessageResponse = await this.sendMessage(userMessageData, token);
      
      // G·ªçi API ƒë·ªÉ t·∫°o h√¨nh ·∫£nh
      const imageResponse = await this.generateImage({
        prompt: prompt,
        conversationId: conversationId,
        sender: senderId,
        socketId: socketId
      });
      
      Logger.info('AI image generated', imageResponse.data);
      
      return {
        success: true,
        tempMessages: tempMessages,
        userMessage: userMessageResponse,
        imageMessage: imageResponse.data.data
      };
    } catch (error) {
      Logger.error("Error processing @Image message", error);
      console.error("Error details:", error?.response?.data || error);
      return {
        error: true,
        message: 'Kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.'
      };
    }
  }

  // X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán ch·ªâ cho b·∫£n th√¢n user
  static async clearChatHistoryForUser(conversationId, token) {
    try {
      if (!token) {
        throw new Error('No token provided');
      }
      const cleanToken = token.replace('Bearer ', '');
      const config = {
        headers: {
          'Authorization': `Bearer ${cleanToken}`,
          'Content-Type': 'application/json'
        }
      };
      const response = await axios.delete(
        `${API_URL}/conversation/${conversationId}/history`,
        config
      );
      return response.data;
    } catch (error) {
      Logger.error('Error clearing chat history for user', error);
      throw error;
    }
  }
}

export default ChatService;
